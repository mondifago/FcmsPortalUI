@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using FcmsPortalUI.Components.Account.Shared
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FcmsPortal.Models
@using FcmsPortal.Services

@inject SignInManager<Person> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ISchoolDataService SchoolDataService

<PageTitle>Log in</PageTitle>

<div class="login-container">
    <div class="login-content">
        @if (school != null)
        {
            @if (!string.IsNullOrEmpty(school.LogoUrl))
            {
                <img src="@school.LogoUrl" alt="School Logo" class="school-logo-display" />
            }

            @if (!string.IsNullOrEmpty(school.Name))
            {
                <div class="school-name-display">@school.Name</div>
            }
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                <i class="fa fa-exclamation-triangle me-2"></i>@errorMessage
            </div>
        }

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" role="alert" />

            <div class="mb-3">
                <label for="email" class="black-label">Email</label>
                <InputText @bind-Value="Input.Email"
                           id="email"
                           class="sign-in-box"
                           autocomplete="username"
                           placeholder="Enter your email" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="password" class="black-label">Password</label>
                <InputText type="password"
                           @bind-Value="Input.Password"
                           id="password"
                           class="sign-in-box"
                           autocomplete="current-password"
                           placeholder="Enter your password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-check mb-3 text-start">
                <InputCheckbox @bind-Value="Input.RememberMe" id="remember-me" class="form-check-input" />
                <label for="remember-me" class="form-check-label grey-label" style="display: inline;">Remember me</label>
            </div>

            <div class="mb-3">
                <button type="submit" class="btn login-btn-small">Log in</button>
            </div>

            <div class="text-center mt-3">
                <a href="Account/ForgotPassword" class="text-muted small">Forgot your password?</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private School? school;
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SchoolDataService.HasSchool())
        {
            school = SchoolDataService.GetSchool();
        }

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
