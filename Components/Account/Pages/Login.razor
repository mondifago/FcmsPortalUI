@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using FcmsPortalUI.Components.Account.Shared
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FcmsPortal.Models
@using FcmsPortal.Services

@inject SignInManager<Person> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ISchoolDataService SchoolDataService

<PageTitle>Log in</PageTitle>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
        background: linear-gradient(135deg, #f5f7fb, #e9ecef);
    }
</style>

<div class="login-container">
    <div class="col-md-5">
        <!-- Branding -->
        <div class="text-center mb-4">
            <h2 style="color: #dc3545; font-weight: bold;">FCMS Portal</h2>
            @if (school != null && !string.IsNullOrEmpty(school.Name))
            {
                <div class="d-flex justify-content-center align-items-center gap-2">
                    @if (!string.IsNullOrEmpty(school.LogoUrl))
                    {
                        <img src="@school.LogoUrl" alt="School Logo" style="height: 40px; width: 40px; object-fit: contain;" />
                    }
                    <p class="mb-0 text-muted">@school.Name</p>
                </div>
            }
        </div>

        <!-- Login Card -->
        <div class="card shadow-lg">
            <div class="card-header text-white text-center" style="background-color: #28a745;">
                <h4 class="mb-0">Welcome Back</h4>
                <p class="mb-0 small">Sign in to your account</p>
            </div>
            <div class="card-body p-4">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        <i class="fa fa-exclamation-triangle me-2"></i>@errorMessage
                    </div>
                }

                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" role="alert" />

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText @bind-Value="Input.Email"
                                   id="email"
                                   class="form-control"
                                   autocomplete="username"
                                   placeholder="Enter your email" />
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText type="password"
                                   @bind-Value="Input.Password"
                                   id="password"
                                   class="form-control"
                                   autocomplete="current-password"
                                   placeholder="Enter your password" />
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>

                    <div class="form-check mb-3">
                        <InputCheckbox @bind-Value="Input.RememberMe"
                                       class="form-check-input"
                                       id="rememberMe" />
                        <label class="form-check-label" for="rememberMe">
                            Remember me
                        </label>
                    </div>

                    <button type="submit" class="w-100 btn btn-lg text-white" style="background-color: #28a745;">
                        Log In
                    </button>

                    <div class="text-center mt-3">
                        <a href="Account/ForgotPassword" class="text-muted small">Forgot your password?</a>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private School? school;
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SchoolDataService.HasSchool())
        {
            school = SchoolDataService.GetSchool();
        }

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
