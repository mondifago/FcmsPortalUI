@page "/Account/Register"

@using Microsoft.AspNetCore.Antiforgery
@attribute [RequireAntiforgeryToken(required: false)]
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using FcmsPortal.Models
@using FcmsPortalUI.Components.Account.Shared
@using FcmsPortalUI.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject IAccountInvitationService InvitationService
@inject UserManager<Person> UserManager
@inject IUserStore<Person> UserStore
@inject SignInManager<Person> SignInManager
@inject IEmailSender<Person> EmailSender
@inject ILogger<Register> Logger
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>

@if (!isTokenValid && token is not null)
{
    <div class="alert alert-danger">
        Invalid or expired registration link.
    </div>
}
else
{
    <div class="row">
        <div class="col-lg-6">
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <h2>Create a new account.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />

                <!-- Email -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email"
                               id="Input.Email"
                               class="form-control"
                               autocomplete="username"
                               aria-required="true"
                               placeholder="name@example.com"
                               readonly="@isEmailReadOnly" />
                    <label for="Input.Email">Email</label>
                    <ValidationMessage For="@(() => Input.Email)" class="text-danger" />
                </div>

                <!-- Password -->
                <div class="form-floating mb-3">
                    <InputText type="password"
                               @bind-Value="Input.Password"
                               id="Input.Password"
                               class="form-control"
                               autocomplete="new-password"
                               aria-required="true"
                               placeholder="password" />
                    <label for="Input.Password">Password</label>
                    <ValidationMessage For="@(() => Input.Password)" class="text-danger" />
                </div>

                <!-- Confirm Password -->
                <div class="form-floating mb-3">
                    <InputText type="password"
                               @bind-Value="Input.ConfirmPassword"
                               id="Input.ConfirmPassword"
                               class="form-control"
                               autocomplete="new-password"
                               aria-required="true"
                               placeholder="password" />
                    <label for="Input.ConfirmPassword">Confirm Password</label>
                    <ValidationMessage For="@(() => Input.ConfirmPassword)" class="text-danger" />
                </div>

                <button type="submit" class="w-100 btn btn-lg btn-primary"
                        disabled="@(!isTokenValid && token is not null)">
                    Register
                </button>
            </EditForm>
        </div>

        <div class="col-lg-4 col-lg-offset-2">
            <section>
                <h3>Use another service to register.</h3>
                <hr />
                <ExternalLoginPicker />
            </section>
        </div>
    </div>
}


@code {
    private string? token;
    private int? invitedPersonId;
    private bool isTokenValid = true;
    private bool isEmailReadOnly = false;
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message =>
        identityErrors is null
            ? null
            : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("token", out var tokenValue))
        {
            token = tokenValue;
            var invitation = await InvitationService.GetByTokenAsync(token!);

            if (invitation is not null && !string.IsNullOrWhiteSpace(invitation.Email))
            {
                invitedPersonId = invitation.PersonId;
                Input.Email = invitation.Email;
                isTokenValid = true;
                isEmailReadOnly = true;
            }
            else
            {
                isTokenValid = false;
            }
        }
    }


    public async Task RegisterUser(EditContext editContext)
    {
        if (!isTokenValid || token is null)
        {
            identityErrors = new[]
            {
            new IdentityError
            { Description = "Invalid or expired invitation token." }
        };
            return;
        }

        // Re-fetch the invitation (defensive)
        var invitation = await InvitationService.GetByTokenAsync(token);
        if (invitation is null)
        {
            identityErrors = new[] { new IdentityError { Description = "Invitation not found." } };
            return;
        }

        // Locate the EXISTING Person tied to this invitation
        Person? user = null;
        if (invitedPersonId is not null)
        {
            user = await UserManager.FindByIdAsync(invitedPersonId.Value.ToString());
        }

        // Fallback by email if needed
        user ??= await UserManager.FindByEmailAsync(Input.Email);

        if (user is null)
        {
            identityErrors = new[]
            {
            new IdentityError { Description = "Linked person not found for this invitation." }
        };
            return;
        }

        // Ensure username/email are set correctly on the existing user
        user.UserName = Input.Email;
        user.Email = Input.Email;

        // Auto-confirming invited email manually set because having received the email by user, email is confirmed
        user.EmailConfirmed = true;

        // Ensure user security stamp exists
        if (string.IsNullOrEmpty(user.SecurityStamp))
            user.SecurityStamp = Guid.NewGuid().ToString();

        var updateRes = await UserManager.UpdateAsync(user);
        if (!updateRes.Succeeded)
        {
            identityErrors = updateRes.Errors;
            return;
        }

        // Add a password IF one doesn’t exist yet
        if (string.IsNullOrEmpty(user.PasswordHash))
        {
            var setPassRes = await UserManager.AddPasswordAsync(user, Input.Password);
            if (!setPassRes.Succeeded)
            {
                identityErrors = setPassRes.Errors;
                return;
            }
        }
        else
        {
            // If a password already exists, you may want to block or allow reset
            identityErrors = new[] { new IdentityError { Description = "Account already has a password. Use Login or Forgot Password." } };
            return;
        }

        if (!string.IsNullOrWhiteSpace(invitation.Role))
        {
            var roleName = invitation.Role.Trim();

            if (!await UserManager.IsInRoleAsync(user, roleName))
                await UserManager.AddToRoleAsync(user, roleName);

            var claims = await UserManager.GetClaimsAsync(user);

            if (!claims.Any(c => c.Type == "Role"))
                await UserManager.AddClaimAsync(user, new Claim("Role", roleName));

            if (!claims.Any(c => c.Type == "PersonId"))
                await UserManager.AddClaimAsync(user, new Claim("PersonId", user.Id.ToString()));

            if (user.SchoolFees?.Id > 0 && !claims.Any(c => c.Type == "SchoolId"))
                await UserManager.AddClaimAsync(user, new Claim("SchoolId", user.SchoolFees.Id.ToString()));
        }

        await InvitationService.MarkAsUsedAsync(token);

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }


    private IUserEmailStore<Person> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<Person>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
