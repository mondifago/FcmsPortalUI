@using FcmsPortalUI.Components.Pages.School
@using FcmsPortal.Services
@inject ISchoolDataService SchoolDataService
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase
@implements IDisposable
@rendermode InteractiveServer

<div class="layout-container">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="mt-3">
                    <h5>Initializing Portal...</h5>
                </div>
            </div>
        </div>
    }
    else if (hasSchool && hasPrincipal)
    {
        <div class="top-row">
            <div class="logo-container">
                <a href="/" class="home-link">FCMS</a>
            </div>
            <button class="navbar-toggler" @onclick="ToggleNavMenu">
                <i class="fas fa-bars"></i>
            </button>
            <div class="top-icons">
                <input type="text" class="search-box" placeholder="Search...">
                <a href="/messages" class="icon-link"><i class="fas fa-envelope"></i></a>
                <a href="/notifications" class="icon-link"><i class="fas fa-bell"></i></a>
                <button class="icon-link" style="border: none; background: none;" @onclick="ShowSchoolSettings">
                    <i class="fas fa-cog"></i>
                </button>
                <a href="/profile" class="icon-link"><i class="fas fa-user-circle"></i></a>
            </div>
        </div>

        <div class="page">
            <NavMenu @ref="navMenu" HasSchool="@hasSchool" />
            <main>
                <article class="content px-4">
                    @Body
                </article>
            </main>
        </div>

        <SchoolSettingsModal IsVisible="showSchoolSettings"
                             OnClose="CloseSchoolSettings"
                             OnSave="HandleSchoolSettingsSaved" />
    }
    else
    {
        <div class="top-row">
            <div class="logo-container">
                <a href="/" class="home-link">FCMS</a>
            </div>
        </div>
        <div class="page">
            <main style="margin-left: 0;">
                <article class="content px-4">
                    @Body
                </article>
            </main>
        </div>
    }
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private NavMenu? navMenu;
    private bool collapseNavMenu = true;
    private bool showSchoolSettings = false;
    private bool hasSchool = false;
    private bool hasPrincipal = false;
    private bool isLoading = true;

    protected override void OnInitialized()
    {
        InitializeApp();
        NavigationManager.LocationChanged += OnLocationChanged;  
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)  
    {
        InitializeApp();
    }

    private void InitializeApp()
    {
        isLoading = true;
        StateHasChanged();

        hasSchool = SchoolDataService.HasSchool();

        if (!hasSchool)
        {
            var currentUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            if (!currentUri.StartsWith("school/create"))
            {
                NavigationManager.NavigateTo("/school/create", true);
                return;
            }
        }

        if (hasSchool)
        {
            hasPrincipal = SchoolDataService.HasPrincipal();

            if (!hasPrincipal)
            {
                var currentUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
                if (!currentUri.StartsWith("principal/create"))
                {
                    NavigationManager.NavigateTo("/principal/create", true);
                    return;
                }
            }
        }

        isLoading = false;
        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        navMenu?.Toggle(collapseNavMenu);
    }

    private void ShowSchoolSettings()
    {
        showSchoolSettings = true;
        StateHasChanged();
    }

    private void CloseSchoolSettings()
    {
        showSchoolSettings = false;
        StateHasChanged();
    }

    private void HandleSchoolSettingsSaved()
    {
        FcmsPortalUI.Components.Pages.School.Home.TriggerSchoolDataRefresh();
        showSchoolSettings = false;
        StateHasChanged();
    }

    public void Dispose()  
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
