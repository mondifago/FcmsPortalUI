@page "/learningpaths/details/{Id:int}"
@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal
@using FcmsPortalUI.Components.Pages.Shared
@using System.Globalization
@inject ISchoolDataService SchoolDataService
@inject NavigationManager NavigationManager

<div class="container-fluid mt-3">
    @if (learningPath == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row mb-3">
            <div class="col">
                <div class="d-flex justify-content-between align-items-center">
                    <h2>Learning Path Details</h2>
                    <div>
                        <button class="btn btn-success" @onclick="ShowAddStudentsModal">
                            <i class="fa fa-user-plus"></i> Add Students
                        </button>
                        <a href="/learningpath/edit/@learningPath.Id" class="btn btn-warning me-2">
                            <i class="fa fa-pencil"></i> Edit
                        </a>
                        <a href="/classes" class="btn btn-secondary">
                            <i class="fa fa-arrow-left"></i> Back to List
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Left Column: Basic Info and Calendar -->
            <div class="col-md-8">
                <!-- Basic Information Card -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Basic Information</h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <dl class="row">
                                    <dt class="col-sm-5">Education Level:</dt>
                                    <dd class="col-sm-7">@learningPath.EducationLevel</dd>

                                    <dt class="col-sm-5">Class Level:</dt>
                                    <dd class="col-sm-7">@learningPath.ClassLevel</dd>

                                    <dt class="col-sm-5">Semester:</dt>
                                    <dd class="col-sm-7">@learningPath.Semester</dd>
                                </dl>
                            </div>
                            <div class="col-md-6">
                                <dl class="row">
                                    <dt class="col-sm-5">Academic Year:</dt>
                                    <dd class="col-sm-7">@learningPath.AcademicYear</dd>

                                    <dt class="col-sm-5">Fee:</dt>
                                    <dd class="col-sm-7">@learningPath.FeePerSemester.ToString("C", new CultureInfo("en-NG"))</dd>

                                    <dt class="col-sm-5">Approval Status:</dt>
                                    <dd class="col-sm-7">
                                        <span class="@GetApprovalStatusBadgeClass(learningPath.ApprovalStatus)">
                                            @learningPath.ApprovalStatus
                                        </span>
                                    </dd>
                                </dl>
                            </div>
                        </div>

                        @if (isTeacher && learningPath.ApprovalStatus == PrincipalApprovalStatus.Pending)
                        {
                            <button class="btn btn-primary" @onclick="SubmitForReview">
                                <i class="fa fa-check-circle"></i> Submit
                            </button>
                        }
                        @if (isPrincipal && learningPath.ApprovalStatus == PrincipalApprovalStatus.Review)
                        {
                            <button class="btn btn-success" @onclick="ApproveLearnignPath">
                                <i class="fa fa-thumbs-up"></i> Approve
                            </button>
                            <button class="btn btn-secondary" @onclick="RestoreLearningPath">
                                <i class="fa fa-undo"></i> Restore
                            </button>
                        }

                    </div>
                </div>

                <!-- Schedule Calendar Card -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Class Schedule</h4>
                        <div>
                            <button class="btn btn-sm btn-light me-2" @onclick="PreviousMonth">
                                <i class="fa fa-chevron-left"></i>
                            </button>
                            <span class="text-white">@currentDate.ToString("MMMM yyyy")</span>
                            <button class="btn btn-sm btn-light ms-2" @onclick="NextMonth">
                                <i class="fa fa-chevron-right"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <a href="/scheduleEntry/create/@learningPath.Id" class="btn btn-success">
                                <i class="fa fa-plus"></i> Schedule A Class
                            </a>
                        </div>

                        <!-- Calendar -->
                        <div class="table-responsive">
                            <table class="table table-bordered calendar-table">
                                <thead>
                                    <tr>
                                        <th>Sun</th>
                                        <th>Mon</th>
                                        <th>Tue</th>
                                        <th>Wed</th>
                                        <th>Thu</th>
                                        <th>Fri</th>
                                        <th>Sat</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int week = 0; week < 6; week++)
                                    {
                                        <tr style="height: 100px;">
                                            @for (int day = 0; day < 7; day++)
                                            {
                                                int displayDay = week * 7 + day - firstDayOfMonth + 1;
                                                bool isCurrentMonth = displayDay > 0 && displayDay <= daysInMonth;
                                                var date = new DateTime(currentDate.Year, currentDate.Month, isCurrentMonth ? displayDay : 1);
                                                var sessionsOnDay = isCurrentMonth ? GetSessionsForDate(date) : new List<ScheduleEntry>();

                                                <td class="@(!isCurrentMonth ? "bg-light" : "")">
                                                    @if (isCurrentMonth)
                                                    {
                                                        <div class="d-flex justify-content-end">
                                                            <span class="badge bg-secondary">@displayDay</span>
                                                        </div>
                                                        @if (sessionsOnDay.Any())
                                                        {
                                                            <div class="calendar-events">
                                                                <div class="calendar-event" @onclick="() => NavigateToScheduleList(date)">
                                                                    <div class="card bg-info text-white mb-1 p-1">
                                                                        <small>
                                                                            <i class="fa fa-calendar-day me-1"></i>
                                                                            @sessionsOnDay.Count Class@(sessionsOnDay.Count > 1 ? "es" : "")
                                                                        </small>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                    }
                                                </td>
                                            }
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column: Students and Payment Information -->
            <div class="col-md-4">
                <!-- Enrolled Students Card -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Enrolled Students (@learningPath.Students.Count)</h4>
                    </div>
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush">
                            @if (learningPath.Students == null || !learningPath.Students.Any())
                            {
                                <div class="list-group-item">
                                    <p class="text-muted mb-0">No students enrolled</p>
                                </div>
                            }
                            else
                            {
                                @foreach (var student in learningPath.Students)
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <i class="fa fa-user me-2"></i>
                                            @student.Person.FirstName @student.Person.LastName
                                        </div>
                                        <span class="@(LogicMethods.IsPaymentSuccessful(student, learningPath) ? "badge bg-success" : "badge bg-warning")">
                                            @(LogicMethods.IsPaymentSuccessful(student, learningPath) ? "Paid" : "Unpaid")
                                        </span>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>

                <!-- Payment Status Card -->
                <div class="card mb-4">
                    <div class="card-header bg-success text-white">
                        <h4 class="mb-0">Payment Successful (@learningPath.StudentsPaymentSuccessful.Count)</h4>
                    </div>
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush">
                            @if (learningPath.StudentsPaymentSuccessful == null || !learningPath.StudentsPaymentSuccessful.Any())
                            {
                                <div class="list-group-item">
                                    <p class="text-muted mb-0">No successful payments yet</p>
                                </div>
                            }
                            else
                            {
                                @foreach (var student in learningPath.StudentsPaymentSuccessful)
                                {
                                    <div class="list-group-item">
                                        <i class="fa fa-user-check me-2"></i>
                                        @student.Person.FirstName @student.Person.LastName
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>

                <!-- Add Student Grade -->
                <div class="card mb-4">
                    <div class="card-header bg-info text-white">
                        <h4 class="mb-0">Student Grades Rankings</h4>
                    </div>
                    <div class="card-body">
                        @if (gradeReport == null || !gradeReport.RankedStudents.Any())
                        {
                            <div class="alert alert-info">
                                <p class="mb-0">No grades have been recorded for this learning path yet.</p>
                                @if (isTeacher)
                                {
                                    <button class="btn btn-primary mt-3" @onclick="ShowRecordGradeModal">
                                        <i class="fa fa-plus-circle"></i> Record Grades
                                    </button>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Rank</th>
                                            <th>Student</th>
                                            <th>Overall Grade</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < gradeReport.RankedStudents.Count; i++)
                                        {
                                            var studentGrade = gradeReport.RankedStudents[i];
                                            var rank = i + 1;

                                            <tr>
                                                <td>
                                                    @if (rank <= 3)
                                                    {
                                                        <span class="badge rounded-pill bg-@(rank == 1 ? "warning text-dark" : rank == 2 ? "secondary" : "bronze")">
                                                            @rank
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        @rank
                                                    }
                                                </td>
                                                <td>@studentGrade.Student.Person.FirstName @studentGrade.Student.Person.LastName</td>
                                                <td>@studentGrade.SemesterOverallGrade.ToString("F2")</td>
                                                <td>
                                                    <button class="btn btn-sm btn-info" @onclick="() => ViewStudentGradeDetails(studentGrade.Student)">
                                                        <i class="fa fa-eye"></i> Details
                                                    </button>
                                                    @if (isTeacher)
                                                    {
                                                        <button class="btn btn-sm btn-warning ms-2" @onclick="() => EditStudentGrade(studentGrade.Student)">
                                                            <i class="fa fa-pencil"></i> Edit
                                                        </button>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            @if (isTeacher)
                            {
                                <div class="mt-3">
                                    <button class="btn btn-primary" @onclick="ShowRecordGradeModal">
                                        <i class="fa fa-plus-circle"></i> Record New Grades
                                    </button>
                                    <button class="btn btn-success ms-2" @onclick="FinalizeGrades" disabled="@gradeReport.IsFinalized">
                                        <i class="fa fa-check-circle"></i> Finalize Grades
                                    </button>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }



        <!-- Session Details Modal -->
        @if (selectedSession != null)
        {
            <div class="modal fade show" style="display: block;" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header bg-info text-white">
                            <h5 class="modal-title">@selectedSession.Title</h5>
                            <button type="button" class="btn-close" @onclick="CloseSessionModal"></button>
                        </div>
                        <div class="modal-body">
                            <dl class="row">
                                <dt class="col-sm-4">Date & Time:</dt>
                                <dd class="col-sm-8">@selectedSession.DateTime.ToString("dddd, MMMM d, yyyy h:mm tt")</dd>
                                
                                <dt class="col-sm-4">Duration:</dt>
                                <dd class="col-sm-8">@selectedSession.Duration.TotalMinutes minutes</dd>
                                
                                <dt class="col-sm-4">Venue:</dt>
                                <dd class="col-sm-8">@selectedSession.Venue</dd>
                                
                                @if (selectedSession.ClassSession != null)
                                {
                                    <dt class="col-sm-4">Course:</dt>
                                    <dd class="col-sm-8">@selectedSession.ClassSession.Course</dd>
                                    
                                    <dt class="col-sm-4">Topic:</dt>
                                    <dd class="col-sm-8">@selectedSession.ClassSession.Topic</dd>
                                    
                                    <dt class="col-sm-4">Teacher:</dt>
                                    <dd class="col-sm-8">
                                        @if (selectedSession.ClassSession.Teacher != null)
                                        {
                                            @selectedSession.ClassSession.Teacher.Person.FirstName @selectedSession.ClassSession.Teacher.Person.LastName
                                        }
                                        else
                                        {
                                            <span class="text-muted">No teacher assigned</span>
                                        }
                                    </dd>
                                }
                            </dl>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseSessionModal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        }

</div>
@if (showAddStudentsModal)
{
    <div class="modal show" style="display: block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Students to Learning Path</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddStudentsModal"></button>
                </div>
                <div class="modal-body">
                    @if (availableStudents == null || !availableStudents.Any())
                    {
                        <p>No eligible students found for this learning path.</p>
                    }
                    else
                    {
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <div>
                                    <button type="button" class="btn btn-sm btn-outline-primary me-2"
                                            @onclick="SelectAllStudents">
                                        Select All
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary"
                                            @onclick="UnselectAllStudents">
                                        Unselect All
                                    </button>
                                </div>
                                <div>
                                    <span class="badge bg-info">@selectedStudentIds.Count selected</span>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-sm table-striped">
                                    <thead>
                                        <tr>
                                            <th style="width: 50px;"></th>
                                            <th>ID</th>
                                            <th>Name</th>
                                            <th>Education Level</th>
                                            <th>Class Level</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var student in availableStudents)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="form-check">
                                                        <input type="checkbox"
                                                               class="form-check-input"
                                                               checked="@IsStudentSelected(student.Id)"
                                                               @onchange="(e) => ToggleStudentSelection(student.Id, e.Value)" />
                                                    </div>
                                                </td>
                                                <td>@student.Id</td>
                                                <td>@student.Person.FirstName @student.Person.LastName</td>
                                                <td>@student.Person.EducationLevel</td>
                                                <td>@student.Person.ClassLevel</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddStudentsModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddSelectedStudents"
                            disabled="@(!selectedStudentIds.Any())">
                        Add Students
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>

}

<StudentGradeModal IsVisible="showGradeModal"
                  Student="selectedStudent"
                  LearningPath="learningPath"
                  OnSave="HandleSaveGrade"
                  OnClose="() => showGradeModal = false" />
@code {
    [Parameter]
    public int Id { get; set; }
    
    private LearningPath learningPath;
    private bool isTeacher = true; 
    private bool isPrincipal = true; 
    private DateTime currentDate = DateTime.Now;
    private int daysInMonth;
    private int firstDayOfMonth;
    private ScheduleEntry selectedSession;
    private int selectedStudentId = 0;
    private bool showAddStudentsModal = false;
    private List<Student> availableStudents = new List<Student>();
    private HashSet<int> selectedStudentIds = new HashSet<int>();
    private LearningPathGradeReport gradeReport;
    private Student selectedStudent;
    private bool showGradeModal = false;
    private bool showGradeDetailsModal = false;
    
    protected override void OnInitialized()
    {
        learningPath = SchoolDataService.GetLearningPathById(Id);
        gradeReport = SchoolDataService.GetGradeReportForLearningPath(Id);
        UpdateCalendarInfo();
    }
    
    private void UpdateCalendarInfo()
    {
        daysInMonth = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);
        firstDayOfMonth = (int)new DateTime(currentDate.Year, currentDate.Month, 1).DayOfWeek;
    }
    
    private void PreviousMonth()
    {
        currentDate = currentDate.AddMonths(-1);
        UpdateCalendarInfo();
    }
    
    private void NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
        UpdateCalendarInfo();
    }
    
   
    
    private string GetApprovalStatusBadgeClass(PrincipalApprovalStatus status)
    {
        return learningPath.ApprovalStatus switch
        {
            PrincipalApprovalStatus.Approved => "badge bg-success",
            PrincipalApprovalStatus.Review => "badge bg-info",
            PrincipalApprovalStatus.Pending => "badge bg-warning",
            _ => "badge bg-secondary"
        };
    }
    
    private bool IsCurrentUserPrincipal()
    {
        // In a real application, this would check if the current user is a principal
        // For this demo, we'll return true to allow the approval functionality
        return true;
    }
    
    private void UpdateApprovalStatus(PrincipalApprovalStatus status)
    {
        if (learningPath != null)
        {
            learningPath.ApprovalStatus = status;
            StateHasChanged();
        }
    }

    private List<ScheduleEntry> GetSessionsForDate(DateTime date)
    {
        return LogicMethods.GetSchedulesByDateInLearningPath(learningPath, date);
    }

    private void ShowSessionDetails(ScheduleEntry session)
    {
        selectedSession = session;
    }
    
    private void CloseSessionModal()
    {
        selectedSession = null;
    }
    
    private void ShowAddStudentsModal()
    {
        var allEligibleStudents = LogicMethods.GetStudentsByLevel(
            SchoolDataService.GetSchool(),
            learningPath.EducationLevel,
            learningPath.ClassLevel);

        availableStudents = allEligibleStudents
            .Where(s => !learningPath.Students.Any(existingStudent => existingStudent.Id == s.Id))
            .ToList();

        selectedStudentIds.Clear();
        showAddStudentsModal = true;
    }

    private void CloseAddStudentsModal()
    {
        showAddStudentsModal = false;
    }

    private bool IsStudentSelected(int studentId)
    {
        return selectedStudentIds.Contains(studentId);
    }

    private void ToggleStudentSelection(int studentId, object isChecked)
    {
        Util.ToggleItemSelection<Student>(studentId, isChecked, selectedStudentIds);
    }

    private void SelectAllStudents()
    {
        selectedStudentIds = new HashSet<int>(availableStudents.Select(s => s.Id));
    }

    private void UnselectAllStudents()
    {
        selectedStudentIds.Clear();
    }

    private void AddSelectedStudents()
    {
        if (!selectedStudentIds.Any())
            return;

        var studentsToAdd = availableStudents
            .Where(s => selectedStudentIds.Contains(s.Id))
            .ToList();

        SchoolDataService.AddMultipleStudentsToLearningPath(learningPath, studentsToAdd);
        SchoolDataService.UpdateLearningPath(learningPath);
        learningPath = SchoolDataService.GetLearningPathById(Id);

        CloseAddStudentsModal();
    }

    private void SubmitForReview()
    {
        learningPath.ApprovalStatus = PrincipalApprovalStatus.Review;
        SchoolDataService.UpdateLearningPath(learningPath);
    }

    private void ApproveLearnignPath()
    {
        learningPath.ApprovalStatus = PrincipalApprovalStatus.Approved;
        SchoolDataService.UpdateLearningPath(learningPath);
    }

    private void RestoreLearningPath()
    {
        learningPath.ApprovalStatus = PrincipalApprovalStatus.Pending;
        SchoolDataService.UpdateLearningPath(learningPath);
    }

    private void NavigateToScheduleList(DateTime date)
    {
        string formattedDate = date.ToString("yyyy-MM-dd");
        NavigationManager.NavigateTo($"/learningpath/{learningPath.Id}/schedules/{formattedDate}");
    }

    private void ShowRecordGradeModal()
    {
        showGradeModal = true;
    }

    private void ViewStudentGradeDetails(Student student)
    {
        selectedStudent = student;
        showGradeDetailsModal = true;
    }

    private void EditStudentGrade(Student student)
    {
        selectedStudent = student;
        showGradeModal = true;
    }

    private void FinalizeGrades()
    {
        if (gradeReport != null && !gradeReport.IsFinalized)
        {
            gradeReport.IsFinalized = true;
            SchoolDataService.UpdateGradeReport(gradeReport);
        }
    }

    private async Task HandleSaveGrade(CourseGrade grade)
    {
        SchoolDataService.SaveCourseGrade(grade);
        gradeReport = SchoolDataService.GetGradeReportForLearningPath(Id);

        showGradeModal = false;
    }
}