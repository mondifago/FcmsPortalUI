@page "/learningpaths/details/{Id:int}"
@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal
@using FcmsPortalUI.Components.Pages.Shared
@using System.Globalization
@inject ISchoolDataService SchoolDataService
@inject NavigationManager NavigationManager

<div class="container-fluid mt-3">
    @if (learningPath == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row mb-3">
            <div class="col">
                <div class="d-flex justify-content-between align-items-center">
                    <h2>Learning Path Details</h2>
                    <div>
                        <button class="btn btn-success" @onclick="ShowAddStudentsModal">
                            <i class="fa fa-user-plus"></i> Add Students
                        </button>
                        <a href="/learningpath/edit/@learningPath.Id" class="btn btn-warning me-2">
                            <i class="fa fa-pencil"></i> Edit
                        </a>
                        <a href="/classes" class="btn btn-secondary">
                            <i class="fa fa-arrow-left"></i> Back to List
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Left Column: Basic Info and Calendar -->
            <div class="col-md-8">
                <!-- Basic Information Card -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Basic Information</h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <dl class="row">
                                    <dt class="col-sm-5">Education Level:</dt>
                                    <dd class="col-sm-7">@learningPath.EducationLevel</dd>

                                    <dt class="col-sm-5">Class Level:</dt>
                                    <dd class="col-sm-7">@learningPath.ClassLevel</dd>

                                    <dt class="col-sm-5">Semester:</dt>
                                    <dd class="col-sm-7">@learningPath.Semester</dd>

                                    <dt class="col-sm-5">Semester Start:</dt>
                                    <dd class="col-sm-7">@learningPath.SemesterStartDate.ToString("MMM d, yyyy")</dd>
                                </dl>
                            </div>
                            <div class="col-md-6">
                                <dl class="row">
                                    <dt class="col-sm-5">Academic Year:</dt>
                                    <dd class="col-sm-7">@learningPath.AcademicYear</dd>

                                    <dt class="col-sm-5">Fee:</dt>
                                    <dd class="col-sm-7">@learningPath.FeePerSemester.ToString("C", new CultureInfo("en-NG"))</dd>

                                    <dt class="col-sm-5">Semester End:</dt>
                                    <dd class="col-sm-7">@learningPath.SemesterEndDate.ToString("MMM d, yyyy")</dd>

                                    <dt class="col-sm-5">Exams Start:</dt>
                                    <dd class="col-sm-7">@learningPath.ExamsStartDate.ToString("MMM d, yyyy")</dd>

                                    <dt class="col-sm-5">Approval Status:</dt>
                                    <dd class="col-sm-7">
                                        <span class="@Util.GetApprovalStatusBadgeClass(learningPath.ApprovalStatus)">
                                            @learningPath.ApprovalStatus
                                        </span>
                                    </dd>
                                </dl>
                            </div>
                        </div>

                        @if (isTeacher && learningPath.ApprovalStatus == PrincipalApprovalStatus.Pending)
                        {
                            <button class="btn btn-primary" @onclick="SubmitForReview">
                                <i class="fa fa-check-circle"></i> Submit
                            </button>
                        }
                        @if (isPrincipal && learningPath.ApprovalStatus == PrincipalApprovalStatus.Review)
                        {
                            <button class="btn btn-success" @onclick="ApproveLearningPath">
                                <i class="fa fa-thumbs-up"></i> Approve
                            </button>
                            <button class="btn btn-secondary" @onclick="RestoreLearningPath">
                                <i class="fa fa-undo"></i> Restore
                            </button>
                        }

                    </div>
                </div>
                <div class="mb-3">
                    <button class="btn btn-success" @onclick="ShowScheduleCreateModal">
                        <i class="fa fa-plus"></i> Schedule A Class
                    </button>
                </div>
                <MonthlyCalendarView Title="Class Schedule"
                                     CurrentDate="@currentDate"
                                     CurrentDateChanged="date => { currentDate = date; StateHasChanged(); }"
                                     OnDateSelected="NavigateToScheduleList"
                                     OnScheduleTypeClicked="HandleScheduleTypeClicked"
                                     GetSchedulesForDate="date => GetSessionsForDate(date)"
                                     ScheduleTypeLabel="Class"
                                     ScheduleTypesLabel="Classes" />

            </div>

            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Enrolled Students (@learningPath.Students.Count)</h4>
                    </div>
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush">
                            @if (learningPath.Students == null || !learningPath.Students.Any())
                            {
                                <div class="list-group-item">
                                    <p class="text-muted mb-0">No students enrolled</p>
                                </div>
                            }
                            else
                            {
                                @foreach (var student in learningPath.Students)
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <a href="/students/details/@student.Id" class="text-decoration-none">
                                                @Util.GetFullName(student.Person)
                                            </a>
                                        </div>
                                        @{
                                            var (statusText, badgeClass) = Util.GetPaymentStatus(student);
                                        }
                                        <span class="badge @badgeClass">@statusText</span>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    @if (learningPath.Students != null && learningPath.Students.Any())
                    {
                        <div class="card-footer text-center">
                            <button class="@GetAttendanceButtonClass()" @onclick="HandleAttendanceAction">
                                @GetAttendanceButtonText()
                            </button>
                        </div>
                    }
                </div>

                <!-- Student Grade -->
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Student Grades</h4>
                    </div>
                    <div class="card-body">
                        @if (!IsGradeConfigurationComplete())
                        {
                            <div class="alert alert-warning">
                                <i class="fa fa-exclamation-triangle"></i>
                                <strong>Grade Configuration Required</strong>
                                <p class="mb-3">Grade weights must be configured for all courses before recording grades or issuing homework.</p>

                                @if (GetUnconfiguredCourses().Any())
                                {
                                    <p class="mb-2"><strong>Courses needing configuration:</strong></p>
                                    <ul class="mb-3">
                                        @foreach (var course in GetUnconfiguredCourses())
                                        {
                                            <li>@course</li>
                                        }
                                    </ul>
                                }
                            </div>
                        }
                        @if (learningPath.Students?.Any() != true)
                        {
                            <div class="alert alert-info">
                                <p class="mb-0">No students enrolled in this learning path yet.</p>
                            </div>
                        }
                        @if (learningPath.Students?.Any() == true && !HasAnyGrades())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Student</th>
                                            <th>Status</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var student in learningPath.Students.OrderBy(s => s.Person.FirstName))
                                        {
                                            <tr>
                                                <td>@student.Person.FirstName @student.Person.LastName</td>
                                                <td><span class="badge bg-secondary">No Grades</span></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        @if (learningPath.Students?.Any() == true && HasAnyGrades())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Rank</th>
                                            <th>Student</th>
                                            <th>Ave. Grade</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < GetRankedStudents().Count; i++)
                                        {
                                            var studentGrade = GetRankedStudents()[i];
                                            var rank = i + 1;

                                            <tr>
                                                <td>
                                                    <span class="fw-light @Util.GetRankColorClass(rank)">
                                                        @Util.GetOrdinalNumber(rank)
                                                    </span>
                                                </td>
                                                <td>@(studentGrade.Student?.Person?.LastName ?? "Unknown")</td>
                                                <td>@studentGrade.SemesterOverallGrade.ToString("F2")%</td>
                                                <td>
                                                    @if (studentGrade.Student != null)
                                                    {
                                                        <button class="btn btn-sm btn-primary" @onclick="() => ShowStudentDetails(studentGrade.Student)">Details</button>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        <div class="d-flex justify-content-center mt-4">
                            <button class="btn btn-primary" @onclick="ShowMainGradePage">
                                Manage Grades
                            </button>
                            <button class="btn btn-success ms-2" @onclick="ShowFinalizeGradesModal">
                                Finalize Grades
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <ScheduleEntryCreate IsVisible="showScheduleCreateModal"
                         LearningPathId="learningPath?.Id"
                         DateParam="@selectedDateForSchedule"
                         AllowClassSchedule="true"
                         RestrictToClassOnly="true"
                         OnSave="HandleScheduleCreated"
                         OnClose="() => showScheduleCreateModal = false" />
</div>

@if (showAddStudentsModal)
{
    <div class="modal show" style="display: block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Students to Learning Path</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddStudentsModal"></button>
                </div>
                <div class="modal-body">
                    @if (availableStudents == null || !availableStudents.Any())
                    {
                        <p>No eligible students found for this learning path.</p>
                    }
                    else
                    {
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <div>
                                    <button type="button" class="btn btn-sm btn-outline-primary me-2"
                                            @onclick="SelectAllStudents">
                                        Select All
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary"
                                            @onclick="UnselectAllStudents">
                                        Unselect All
                                    </button>
                                </div>
                                <div>
                                    <span class="badge bg-info">@selectedStudentIds.Count selected</span>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-sm table-striped">
                                    <thead>
                                        <tr>
                                            <th style="width: 50px;"></th>
                                            <th>ID</th>
                                            <th>Name</th>
                                            <th>Education Level</th>
                                            <th>Class Level</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var student in availableStudents)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="form-check">
                                                        <input type="checkbox"
                                                               class="form-check-input"
                                                               checked="@IsStudentSelected(student.Id)"
                                                               @onchange="(e) => ToggleStudentSelection(student.Id, e.Value as bool? ?? false)" />
                                                    </div>
                                                </td>
                                                <td>@student.Id</td>
                                                <td>@student.Person.FirstName @student.Person.LastName</td>
                                                <td>@student.Person.EducationLevel</td>
                                                <td>@student.Person.ClassLevel</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddStudentsModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddSelectedStudents"
                            disabled="@(!selectedStudentIds.Any())">
                        Add Students
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}

<FinalizeGradesModal IsVisible="showFinalizeGradesModal"
                     LearningPath="learningPath"
                     OnClose="CloseFinalizeGradesModal" />

<LearningPathGradesModal IsVisible="showGradesModal"
                         LearningPath="learningPath"
                         OnClose="() => showGradesModal = false" />


@if (showAttendanceModal)
{
    <TakeAttendanceModal IsVisible="showAttendanceModal"
                         Students="@(learningPath?.Students ?? new List<Student>())"
                         LearningPath="learningPath"
                         AttendanceDate="DateTime.Now"
                         TeacherId="@GetCurrentTeacher().Id"
                         OnAttendanceSubmitted="OnAttendanceSubmitted"
                         OnClose="CloseAttendanceModal" />
}

@if (showDailyAttendanceModal && todaysAttendance != null)
{
    <DailyAttendanceViewModal IsVisible="showDailyAttendanceModal"
                              SelectedDate="DateTime.Now"
                              AttendanceData="dailyAttendanceData"
                              OnClose="CloseDailyAttendanceModal" />
}

<StudentGradeDetailsModal IsVisible="showStudentDetailsModal"
                          Student="selectedStudent"
                          LearningPath="learningPath"
                          OnClose="CloseStudentDetailsModal" />

@code {
    [Parameter]
    public int Id { get; set; }

    private LearningPath learningPath = new LearningPath();
    private DailyAttendanceLogEntry? dailyAttendanceData;
    private DailyAttendanceLogEntry? todaysAttendance;
    private List<Student> availableStudents = new List<Student>();
    private HashSet<int> selectedStudentIds = new HashSet<int>();
    private Student? selectedStudent;
    private DateTime currentDate = DateTime.Now;
    private string? selectedDateForSchedule = null;
    private bool showGradesModal = false;
    private bool showStudentDetailsModal = false;
    private bool showFinalizeGradesModal = false;
    private bool showAttendanceModal = false;
    private bool showDailyAttendanceModal = false;
    private bool showScheduleCreateModal = false;
    private bool showAddStudentsModal = false;
    private bool isPrincipal = true;
    private bool isTeacher = true;

    protected override void OnInitialized()
    {
        learningPath = SchoolDataService.GetLearningPathById(Id) ?? new LearningPath();
    }

    private Staff GetCurrentTeacher()
    {
        if (learningPath == null) return new Staff();

        var school = SchoolDataService.GetSchool();
        return LogicMethods.GetFirstTeacherByEducationLevel(school, learningPath.EducationLevel);
    }

    private List<ScheduleEntry> GetSessionsForDate(DateTime date)
    {
        var learningPathSchedules = learningPath != null
      ? LogicMethods.GetSchedulesByDateInLearningPath(learningPath, date)
      : new List<ScheduleEntry>();

        var generalSchedules = SchoolDataService.GetAllSchoolCalendarSchedules()
            .Where(s => s.DateTime.Date == date.Date &&
                       ((!string.IsNullOrEmpty(s.Event)) || (!string.IsNullOrEmpty(s.Meeting))))
            .ToList();

        var allSchedules = new List<ScheduleEntry>();
        allSchedules.AddRange(learningPathSchedules);
        allSchedules.AddRange(generalSchedules);

        return allSchedules;
    }

    private void ShowAddStudentsModal()
    {
        var allEligibleStudents = LogicMethods.GetStudentsByLevel(
            SchoolDataService.GetSchool(),
            learningPath.EducationLevel,
            learningPath.ClassLevel);

        availableStudents = allEligibleStudents
            .Where(s => !learningPath.Students.Any(existingStudent => existingStudent.Id == s.Id))
            .ToList();

        selectedStudentIds.Clear();
        showAddStudentsModal = true;
    }

    private void CloseAddStudentsModal()
    {
        showAddStudentsModal = false;
    }

    private bool IsStudentSelected(int studentId)
    {
        return selectedStudentIds.Contains(studentId);
    }

    private void ToggleStudentSelection(int studentId, object isChecked)
    {
        Util.ToggleItemSelection<Student>(studentId, isChecked, selectedStudentIds);
    }

    private void SelectAllStudents()
    {
        selectedStudentIds = new HashSet<int>(availableStudents.Select(s => s.Id));
    }

    private void UnselectAllStudents()
    {
        selectedStudentIds.Clear();
    }

    private void AddSelectedStudents()
    {
        if (!selectedStudentIds.Any())
            return;

        var studentsToAdd = availableStudents
            .Where(s => selectedStudentIds.Contains(s.Id))
            .ToList();

        SchoolDataService.AddMultipleStudentsToLearningPath(learningPath, studentsToAdd);
        SchoolDataService.UpdateLearningPath(learningPath);
        learningPath = SchoolDataService.GetLearningPathById(Id) ?? new LearningPath();

        CloseAddStudentsModal();
    }

    private void SubmitForReview()
    {
        learningPath.ApprovalStatus = PrincipalApprovalStatus.Review;
        SchoolDataService.UpdateLearningPath(learningPath);
    }

    private void ApproveLearningPath()
    {
        learningPath.ApprovalStatus = PrincipalApprovalStatus.Approved;
        SchoolDataService.ArchiveStudentPayments(learningPath);
        SchoolDataService.ArchiveStudentAttendance(learningPath);
        foreach (var student in learningPath.Students.ToList())
        {
            SchoolDataService.RemoveStudentFromLearningPath(learningPath, student);
        }

        SchoolDataService.UpdateLearningPath(learningPath);
        SchoolDataService.CreateTemplateFromLearningPath(learningPath);
        StateHasChanged();
    }

    private void RestoreLearningPath()
    {
        learningPath.ApprovalStatus = PrincipalApprovalStatus.Pending;
        SchoolDataService.UpdateLearningPath(learningPath);
    }

    private void NavigateToScheduleList(DateTime date)
    {
        string formattedDate = date.ToString("yyyy-MM-dd");
        NavigationManager.NavigateTo($"/learningpath/{learningPath.Id}/schedules/{formattedDate}");
    }



    private void HandleScheduleTypeClicked((DateTime date, ScheduleType? type) data)
    {
        if (data.type == ScheduleType.ClassSession)
        {
            NavigateToScheduleList(data.date);
        }
    }

    private void ShowScheduleCreateModal()
    {
        selectedDateForSchedule = null;
        showScheduleCreateModal = true;
    }

    private void ShowScheduleCreateModalForDate(DateTime date)
    {
        selectedDateForSchedule = date.ToString("yyyy-MM-dd");
        showScheduleCreateModal = true;
    }

    private void HandleScheduleCreated(ScheduleEntry scheduleEntry)
    {
        learningPath = SchoolDataService.GetLearningPathById(Id) ?? new LearningPath();
        showScheduleCreateModal = false;
        selectedDateForSchedule = null;
        StateHasChanged();
    }

    private string GetAttendanceButtonText()
    {
        return SchoolDataService.HasAttendanceBeenTaken(learningPath.Id, currentDate) ? "View Attendance" : "Take Attendance";
    }

    private string GetAttendanceButtonClass()
    {
        return SchoolDataService.HasAttendanceBeenTaken(learningPath.Id, currentDate)
            ? "btn btn-success btn-sm"
            : "btn btn-warning btn-sm";
    }

    private void HandleAttendanceAction()
    {
        if (SchoolDataService.HasAttendanceBeenTaken(learningPath.Id, currentDate))
        {
            ShowTodaysAttendance();
        }
        else
        {
            showAttendanceModal = true;
        }
    }

    private void ShowTodaysAttendance()
    {
        if (learningPath != null)
        {
            dailyAttendanceData = LogicMethods.GetDailyAttendanceEntry(learningPath, DateTime.Now);
            todaysAttendance = dailyAttendanceData;
            showDailyAttendanceModal = true;
        }
    }


    private void OnAttendanceSubmitted(DailyAttendanceLogEntry attendanceLog)
    {
        showAttendanceModal = false;
        learningPath = SchoolDataService.GetLearningPathById(Id) ?? new LearningPath();
        StateHasChanged();
    }

    private void CloseAttendanceModal()
    {
        showAttendanceModal = false;
    }

    private void CloseDailyAttendanceModal()
    {
        showDailyAttendanceModal = false;
        todaysAttendance = null;
    }

    private bool IsGradeConfigurationComplete()
    {
        var allCourses = CourseDefaults.GetCourseNames(learningPath.EducationLevel);
        var configuredCourses = SchoolDataService.GetAllCourseGradingConfigurations(learningPath.Id);

        return allCourses.All(course => configuredCourses.Any(config => config.Course == course));
    }

    private List<string> GetUnconfiguredCourses()
    {
        return SchoolDataService.GetCoursesWithoutGradingConfiguration(learningPath.Id);
    }

    private bool HasAnyGrades()
    {
        return learningPath.Students.Any(s => s.CourseGrades.Any(cg =>
            cg.LearningPathId == learningPath.Id && cg.TestGrades.Any()));
    }

    private List<StudentGradeSummary> GetRankedStudents()
    {
        var gradeReport = LogicMethods.GenerateLearningPathGradeReport(learningPath);
        return gradeReport.RankedStudents;
    }

    private void ShowMainGradePage()
    {
        showGradesModal = true;
    }

    private void ShowStudentDetails(Student student)
    {
        selectedStudent = student;
        showStudentDetailsModal = true;
    }

    private void CloseStudentDetailsModal()
    {
        showStudentDetailsModal = false;
        selectedStudent = null;
    }

    private void ShowFinalizeGradesModal()
    {
        showFinalizeGradesModal = true;
    }

    private void CloseFinalizeGradesModal()
    {
        showFinalizeGradesModal = false;
        learningPath = SchoolDataService.GetLearningPathById(Id) ?? new LearningPath();
        StateHasChanged();
    }
}