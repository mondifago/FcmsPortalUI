@page "/classes"
@using FcmsPortalUI.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortalUI.Components.Pages.Shared
@inject ISchoolDataService SchoolDataService
@inject IPermissionService PermissionService
@inject NavigationManager NavigationManager

<h3>Learning Paths</h3>

@if (canManageLearningPaths)
{
    <div class="mb-3">
        <a href="/learningpath/create" class="btn btn-primary">
            <span class="oi oi-plus"></span> Add New Learning Path
        </a>
    </div>
}


@if (learningPaths == null)
{
    <p>Loading...</p>
}
else if (!learningPaths.Any())
{
    <p>No learning paths found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Education Level</th>
                    <th>Class Level</th>
                    <th>Semester</th>
                    <th>Academic Year</th>
                    <th>Approval Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var learningPath in learningPaths)
                {
                    <tr>
                        <td>@learningPath.Id</td>
                        <td>@learningPath.EducationLevel</td>
                        <td>@learningPath.ClassLevel</td>
                        <td>@learningPath.Semester</td>
                        <td>@learningPath.AcademicYear</td>
                        <td>
                            @if (canManageLearningPaths)
                            {
                                <span class="@Util.GetApprovalStatusBadgeClass(learningPath.ApprovalStatus)">
                                    @learningPath.ApprovalStatus
                                </span>
                            }
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <a href="/learningpaths/details/@learningPath.Id" class="btn btn-sm btn-info">
                                    <span class="fa fa-eye"></span> Details
                                </a>
                                @if (canManageLearningPaths)
                                {
                                    <a href="/learningpath/edit/@learningPath.Id" class="btn btn-sm btn-warning">
                                        <span class="fa fa-pencil"></span> Edit
                                    </a>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteConfirmation(learningPath)">
                                        <span class="fa fa-trash"></span> Delete
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<ConfirmDeleteModal IsVisible="showDeleteConfirmation"
                    Title="Confirm Delete"
                    Message="Are you sure you want to delete this Learning Path?"
                    OnConfirm="DeleteLearningPath"
                    OnCancel="CancelDelete" />


@code {
    private IEnumerable<LearningPath> learningPaths = Enumerable.Empty<LearningPath>();
    private LearningPath? learningPathToDelete;
    private List<LearningPath> visibleLearningPaths = new();
    private Person? currentUser;
    private int? currentUserId;
    private bool canManageLearningPaths;
    private bool isStaff;
    private bool isGuardian;
    private bool isStudent;
    private bool showDeleteConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        currentUserId = await PermissionService.GetCurrentUserIdAsync();
        currentUser = await PermissionService.GetCurrentPersonAsync();

        canManageLearningPaths = await PermissionService.IsInAnyRoleAsync("Developer", "Principal", "Admin", "Teacher");
        isStaff = await PermissionService.IsInRoleAsync("Staff");
        isGuardian = await PermissionService.IsInRoleAsync("Guardian");
        isStudent = await PermissionService.IsInRoleAsync("Student");

        LoadLearningPaths();

        if (isGuardian)
        {
            var guardian = SchoolDataService.GetGuardians()
                .FirstOrDefault(g => g.PersonId == currentUser?.Id);

            var wardIds = guardian?.Wards
                .Select(w => w.LearningPathId)
                .Where(id => id != null)
                .ToList() ?? new();

            learningPaths = learningPaths.Where(lp => wardIds.Contains(lp.Id));
        }
        else if (isStudent)
        {
            var student = SchoolDataService.GetStudents()
                .FirstOrDefault(s => s.PersonId == currentUser?.Id);

            if (student?.LearningPathId != null)
                learningPaths = learningPaths.Where(lp => lp.Id == student.LearningPathId);
        }
    }

    private void LoadLearningPaths()
    {
        learningPaths = SchoolDataService.GetAllLearningPaths();
    }

    private void DeleteConfirmation(LearningPath learningPath)
    {
        learningPathToDelete = learningPath;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        learningPathToDelete = null;
        showDeleteConfirmation = false;
    }

    private void DeleteLearningPath()
    {
        if (learningPathToDelete != null)
        {
            SchoolDataService.DeleteLearningPath(learningPathToDelete.Id);
            LoadLearningPaths();
        }

        showDeleteConfirmation = false;
        learningPathToDelete = null;
    }
}