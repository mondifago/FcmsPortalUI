@page "/learningpath/create"
@rendermode InteractiveServer
@inject ISchoolDataService SchoolDataService
@inject NavigationManager NavigationManager
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Services
@using FcmsPortal
@using FcmsPortalUI.Components.Pages.Shared

<h3>Create Learning Path</h3>

<div class="row">
    <div class="col-md-8">
        <LearningPathForm LearningPath="learningPath"
                          IsEditing="false"
                          AvailableStudents="availableStudents"
                          AvailableClassLevels="availableClassLevels"
                          SelectedStudentIds="selectedStudentIds"
                          SubmitButtonText="Create Learning Path"
                          OnSubmit="HandleValidSubmit"
                          OnCancel="NavigateToList"
                          OnEducationLevelChanged="OnEducationLevelChanged"
                          OnClassLevelChanged="OnClassLevelChanged"
                          OnFeePerSemesterChanged="OnFeePerSemesterChanged"
                          AcademicYearStartYear="academicYearStartYear"
                          AcademicYearStartYearChanged="HandleAcademicYearChanged" />
    </div>
</div>

@code {
    private LearningPath learningPath = new LearningPath();
    private List<Student> availableStudents = new List<Student>();
    private List<int> selectedStudentIds = new List<int>();
    private School school;
    private List<ClassLevel> availableClassLevels = new List<ClassLevel>();
    private ClassLevelMapping classLevelMappingService = new ClassLevelMapping();
    private Dictionary<EducationLevel, List<ClassLevel>> classLevelMappings = new Dictionary<EducationLevel, List<ClassLevel>>();
    private int academicYearStartYear = DateTime.Now.Year;

    protected override void OnInitialized()
    {
        school = SchoolDataService.GetSchool();
        learningPath.Students = new List<Student>();
        learningPath.StudentsPaymentSuccessful = new List<Student>();
        learningPath.Schedule = new List<ScheduleEntry>();
        learningPath.GradesList = new Dictionary<Student, CourseGrade>();
        learningPath.AcademicYearStart = DateTime.Now;
        classLevelMappings = classLevelMappingService.GetClassLevelsByEducationLevel();
        availableClassLevels = GetAvailableClassLevels(learningPath.EducationLevel);
    }

    private async Task OnEducationLevelChanged()
    {
        learningPath.ClassLevel = ClassLevel.None;
        availableClassLevels = GetAvailableClassLevels(learningPath.EducationLevel);
        UpdateAvailableStudents();
        StateHasChanged();
    }

    private async Task OnClassLevelChanged()
    {
        UpdateAvailableStudents();
        StateHasChanged();
    }

    private async Task OnFeePerSemesterChanged()
    {
        if (learningPath.Students != null && learningPath.Students.Any())
        {
            LogicMethods.SetStudentFeesForLearningPath(learningPath);
        }
    }

    private async Task HandleAcademicYearChanged(int year)
    {
        academicYearStartYear = year;
    }

    private List<ClassLevel> GetAvailableClassLevels(EducationLevel educationLevel)
    {
        if (educationLevel == EducationLevel.None)
            return new List<ClassLevel>();

        return classLevelMappings.TryGetValue(educationLevel, out var levels)
            ? levels
            : new List<ClassLevel>();
    }

    private void UpdateAvailableStudents()
    {
        if (learningPath.EducationLevel != 0 && learningPath.ClassLevel != ClassLevel.None)
        {
            availableStudents = LogicMethods.GetStudentsByLevel(school, learningPath.EducationLevel, learningPath.ClassLevel);
            selectedStudentIds.Clear();
        }
        else
        {
            availableStudents.Clear();
            selectedStudentIds.Clear();
        }
    }

    private void HandleValidSubmit(LearningPath submittedLearningPath)
    {
        // Update the learning path with selected students
        learningPath.Students = availableStudents
            .Where(s => selectedStudentIds.Contains(s.Id))
            .ToList();

        // Set the academic year
        learningPath.AcademicYearStart = new DateTime(
            academicYearStartYear,
            learningPath.AcademicYearStart.Month,
            learningPath.AcademicYearStart.Day
        );

        // Add the learning path to the school
        SchoolDataService.AddLearningPath(learningPath);

        // Apply fees to all students in the learning path
        LogicMethods.SetStudentFeesForLearningPath(learningPath);

        NavigateToList();
    }

    private void NavigateToList()
    {
        NavigationManager.NavigateTo("/classes");
    }
}