@page "/classsession/details/{Id:int}"
@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal
@using FcmsPortalUI.Components.Pages.Shared
@inject ISchoolDataService SchoolDataService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="container-fluid mt-3">
    <div class="row mb-3">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <h2>Class Session Details</h2>
                <div>
                    <button class="btn btn-secondary" @onclick="GoBack">
                        <i class="fa fa-arrow-left"></i> Back
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (classSession == null)
    {
        <div class="d-flex justify-content-center" >
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Left Column (8 columns) -->
            <div class="col-md-8">
                <!-- Basic Information Card -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">@classSession.Course - @classSession.Topic</h4>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <dl class="mb-0">
                                    <dt>Teacher</dt>
                                    <dd>
                                        @if (classSession.Teacher != null)
                                        {
                                            <span>@classSession.Teacher.Person.FirstName @classSession.Teacher.Person.LastName</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not assigned</span>
                                        }
                                    </dd>
                                </dl>
                            </div>
                            <div class="col-md-6">
                                <dl class="mb-0">
                                    <dt>Schedule</dt>
                                    <dd>
                                        @if (scheduleEntry != null)
                                        {
                                            <span>@scheduleEntry.DateTime.ToString("MMM d, yyyy h:mm tt") - @scheduleEntry.Venue</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No schedule information</span>
                                        }
                                    </dd>
                                </dl>
                            </div>
                        </div>

                        <h5>Description</h5>
                        <p class="mb-4">@(string.IsNullOrEmpty(classSession.Description) ? "No description available" : classSession.Description)</p>
                    </div>
                </div>

                <!-- Materials Upload Section -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Course Materials</h4>
                        @if (isTeacher)
                        {
                            <button class="btn btn-sm btn-light" @onclick="ToggleMaterialsUpload">
                                <i class="fa fa-plus"></i> Add Materials
                            </button>
                        }
                    </div>
                    <div class="card-body">
                        <!-- PDF Viewer Box -->
                        <div class="pdf-viewer-container mb-4">
                            @if (selectedPdfUrl != null)
                            {
                                <embed src="@selectedPdfUrl" type="application/pdf" width="100%" height="100%" />
                            }
                            else
                            {
                                <div class="pdf-viewer-placeholder">
                                    <i class="fa fa-file-pdf text-muted"></i>
                                    <p class="mt-3 text-muted">No slide presentation available</p>
                                    @if (isTeacher)
                                    {
                                        <p class="text-muted">Upload a PDF file to display your presentation slides here</p>
                                        <button class="btn btn-primary btn-sm mt-1" @onclick="ToggleMaterialsUpload">
                                           Upload Slides
                                        </button>
                                    }
                                </div>
                            }
                        </div>

                        @if (showMaterialsUpload)
                        {
                            <div class="mb-4">
                                <h5>Upload Materials</h5>
                                <FileAttachmentManager Title="Upload Study Materials"
                                                       Category="@($"ClassSession-{classSession.Id}-Materials")"
                                                       ReferenceId="classSession.Id"
                                                       AllowUpload="true"
                                                       AllowDelete="isTeacher"
                                                       AllowMultiple="true"
                                                       OnAttachmentsChanged="HandleMaterialsChanged" />
                            </div>
                        }

                        <!-- Material Selection -->
                        @if (classSession.StudyMaterials != null && classSession.StudyMaterials.Any())
                        {
                            <div class="mb-3">
                                <h5>Available Materials</h5>
                                <div class="list-group">
                                    @foreach (var material in classSession.StudyMaterials)
                                    {
                                        <button class="list-group-item list-group-item-action d-flex justify-content-between align-items-center @(selectedPdfUrl == material.FilePath ? "active" : "")"
                                                @onclick="() => SelectMaterial(material)">
                                            <div>
                                                <i class="@Util.GetFileIcon(material.FileName) me-2"></i>
                                                @material.FileName
                                                <small class="text-muted ms-2">(@Util.FormatFileSize(material.FileSize))</small>
                                            </div>
                                            <div>
                                                <a href="@material.FilePath" target="_blank" class="btn btn-sm btn-outline-primary me-2" @onclick:stopPropagation>
                                                    <i class="fa fa-download"></i>
                                                </a>
                                                @if (isTeacher && IsPdfFile(material.FileName))
                                                {
                                                    <button class="btn btn-sm @(selectedPdfUrl == material.FilePath ? "btn-success" : "btn-outline-secondary")" @onclick:stopPropagation="true" @onclick="() => SelectMaterial(material)">
                                                        <i class="fa fa-eye"></i> @(selectedPdfUrl == material.FilePath ? "Showing" : "Show")
                                                    </button>
                                                }
                                            </div>
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Lesson Plan Section -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Lesson Plan</h4>
                        @if (isTeacher && !editingLessonPlan && !string.IsNullOrEmpty(classSession.LessonPlan))
                        {
                            <button class="btn btn-sm btn-light" @onclick="EditLessonPlan">
                                <i class="fa fa-edit"></i> Edit
                            </button>
                        }
                    </div>
                    <div class="card-body">
                        @if (editingLessonPlan)
                        {
                            <EditForm Model="@lessonPlanModel" OnValidSubmit="SaveLessonPlan">
                                <div class="mb-3">
                                    <InputTextArea @bind-Value="lessonPlanModel.Content"
                                                   class="form-control"
                                                   rows="10"
                                                   placeholder="Enter your lesson plan content here..." />
                                </div>
                                <div class="d-flex justify-content-end">
                                    <button type="button" class="btn btn-secondary me-2" @onclick="CancelLessonPlanEdit">Cancel</button>
                                    <button type="submit" class="btn btn-primary">Save</button>
                                </div>
                            </EditForm>
                        }
                        else
                        {
                            <div class="lesson-plan-content p-3 bg-light rounded" style="min-height: 200px;">
                                @if (!string.IsNullOrEmpty(classSession.LessonPlan))
                                {
                                    <div class="formatted-content">
                                        @((MarkupString)Util.FormatTextWithLinks(classSession.LessonPlan))
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center text-muted my-5">
                                        <i class="fa fa-book-open fa-3x mb-3"></i>
                                        <p>No lesson plan has been created yet.</p>
                                        @if (isTeacher)
                                        {
                                            <button class="btn btn-outline-primary mt-2" @onclick="EditLessonPlan">
                                                <i class="fa fa-plus"></i> Create Lesson Plan
                                            </button>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>

                <!-- Teacher's Remarks Section -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Teacher's Remarks</h4>
                        @if (isTeacher && !showRemarksEditor && !string.IsNullOrEmpty(classSession.TeacherRemarks))
                        {
                            <button class="btn btn-sm btn-light" @onclick="() => showRemarksEditor = true">
                                <i class="fa fa-edit"></i> Edit
                            </button>
                        }
                    </div>
                    <div class="card-body">
                        @if (showRemarksEditor)
                        {
                            <EditForm Model="@remarksModel" OnValidSubmit="SaveRemarks">
                                <div class="mb-3">
                                    <InputTextArea @bind-Value="remarksModel.Remarks" class="form-control" rows="5" placeholder="Add your remarks about this class session..." />
                                </div>
                                <div class="d-flex justify-content-end">
                                    <button type="button" class="btn btn-secondary me-2" @onclick="() => showRemarksEditor = false">Cancel</button>
                                    <button type="submit" class="btn btn-primary">Save</button>
                                </div>
                            </EditForm>
                        }
                        else
                        {
                            @if (string.IsNullOrEmpty(classSession.TeacherRemarks))
                            {
                                <div class="text-center text-muted my-4">
                                    <i class="fa fa-comment-dots fa-3x mb-3"></i>
                                    <p>No remarks available yet.</p>
                                    @if (isTeacher)
                                    {
                                        <button class="btn btn-outline-primary mt-2" @onclick="() => showRemarksEditor = true">
                                            <i class="fa fa-plus"></i> Add Remarks
                                        </button>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="formatted-content">
                                    @((MarkupString)Util.FormatTextWithLinks(classSession.TeacherRemarks))
                                </div>
                            }
                        }
                    </div>
                </div>

                <!-- Homework Section -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Homework</h4>
                        @if (isTeacher && classSession.HomeworkDetails == null)
                        {
                            <button class="btn btn-sm btn-light" @onclick="CreateNewHomework">
                                <i class="fa fa-plus"></i> Add Homework
                            </button>
                        }
                    </div>
                    <div class="card-body">
                        @if (classSession.HomeworkDetails == null)
                        {
                            <p class="text-muted">No homework assigned yet.</p>
                        }
                        else
                        {
                            <div class="list-group">
                                <div class="list-group-item list-group-item-action">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h5 class="mb-1">@classSession.HomeworkDetails.Title</h5>
                                        <div>
                                            @if (isTeacher)
                                            {
                                                <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditHomework(classSession.HomeworkDetails)">
                                                    <i class="fa fa-edit"></i> Edit
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteHomework(classSession.HomeworkDetails)">
                                                    <i class="fa fa-trash"></i> Delete
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-sm btn-outline-success" @onclick="() => SubmitHomework(classSession.HomeworkDetails)">
                                                    <i class="fa fa-paper-plane"></i> Submit
                                                </button>
                                            }
                                        </div>
                                    </div>
                                    <p class="mb-1">Due: @classSession.HomeworkDetails.DueDate.ToString("MMMM d, yyyy")</p>
                                    <small class="text-muted">
                                        @(classSession.HomeworkDetails.Submissions?.Count ?? 0) submission(s)
                                    </small>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Discussion Section -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Class Discussion</h4>
                    </div>
                    <div class="card-body">
                        <DiscussionThreadComponent Thread="null"
                                                   AllThreads="classSession.DiscussionThreads ?? new List<DiscussionThread>()"
                                                   AllowReplies="true"
                                                   CurrentUser="currentStudent?.Person ?? currentTeacher?.Person"
                                                   ClassSessionId="classSession.Id"
                                                   OnThreadUpdated="HandleThreadUpdated"
                                                   OnNewThreadCreated="HandleNewThreadCreated" />
                    </div>
                </div>
            </div>

            <!-- Right Column (4 columns) -->
            <div class="col-md-4">
                <!-- Students List Section (if teacher) -->
                @if (isTeacher)
                {
                    <div class="card mb-4">
                        <div class="card-header bg-info text-white">
                            <h5 class="mb-0">Students in Class</h5>
                        </div>
                        <div class="card-body p-0">
                            @if (learningPathStudents.Any())
                            {
                                <div class="list-group list-group-flush">
                                    @foreach (var student in learningPathStudents)
                                    {
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <div>
                                                <ProfileThumbnailList Person="student.Person" />
                                                @student.Person.FirstName @student.Person.LastName
                                            </div>
                                            <a href="/students/details/@student.Id" class="btn btn-sm btn-outline-primary">
                                                <i class="fa fa-eye"></i>
                                            </a>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="p-3">
                                    <p class="text-muted">No students in this class.</p>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Homework Modal -->
<HomeworkModal IsVisible="showHomeworkModal"
               ExistingHomework="selectedHomework"
               ClassSession="classSession"
               CurrentTeacher="currentTeacher"
               OnSave="HandleHomeworkSaved"
               OnClose="() => showHomeworkModal = false" />

<!-- Homework Submission Modal -->
<HomeworkSubmissionModal IsVisible="showSubmissionModal"
                         Homework="selectedHomework"
                         CurrentStudent="currentStudent"
                         ExistingSubmission="existingSubmission"
                         OnSave="HandleSubmissionSaved"
                         OnClose="() => showSubmissionModal = false" />

@code {
    [Parameter]
    public int Id { get; set; }

    private School school;
    private string selectedPdfUrl;
    private ClassSession classSession;
    private ScheduleEntry scheduleEntry;
    private List<Student> learningPathStudents = new List<Student>();
    private bool isTeacher = true; 
    private Staff currentTeacher; 
    private Student currentStudent; 
    private bool showMaterialsUpload = false;
    private bool showRemarksEditor = false;
    private bool showHomeworkModal = false;
    private bool showSubmissionModal = false;
    private Homework selectedHomework;
    private HomeworkSubmission existingSubmission;
    private bool editingLessonPlan = false;
    private LessonPlanModel lessonPlanModel = new LessonPlanModel();
    private RemarksModel remarksModel = new RemarksModel();

    private class LessonPlanModel
    {
        public string Content { get; set; } = "";
    }

    private class RemarksModel
    {
        public string Remarks { get; set; }
    }

    protected override void OnInitialized()
    {
        school = SchoolDataService.GetSchool();
        classSession = SchoolDataService.GetClassSessionById(Id);

        if (classSession != null)
        {
            remarksModel.Remarks = classSession.TeacherRemarks ?? "";
            lessonPlanModel.Content = classSession.LessonPlan ?? "";
            scheduleEntry = LogicMethods.GetScheduleEntryForClassSession(school, Id);

            currentTeacher = classSession.Teacher;

            if (learningPathStudents.Any())
            {
                currentStudent = learningPathStudents.First();
            }
        }
    }

    private void ToggleMaterialsUpload()
    {
        showMaterialsUpload = !showMaterialsUpload;
    }

    private void HandleMaterialsChanged(List<FileAttachment> materials)
    {
        classSession.StudyMaterials = materials;

        if (string.IsNullOrEmpty(selectedPdfUrl))
        {
            var firstPdf = materials.FirstOrDefault(m => IsPdfFile(m.FileName));
            if (firstPdf != null)
            {
                selectedPdfUrl = firstPdf.FilePath;
            }
        }

        SchoolDataService.UpdateClassSession(classSession);
    }

    private void SaveRemarks()
    {
        classSession.TeacherRemarks = remarksModel.Remarks;
        showRemarksEditor = false;
        SchoolDataService.UpdateClassSession(classSession);
    }

    private void CreateNewHomework()
    {
        selectedHomework = null;
        showHomeworkModal = true;
    }

    private void EditHomework(Homework homework)     
    {
        selectedHomework = homework;
        showHomeworkModal = true;
    }

    private void DeleteHomework(Homework homework)
    {
        if (classSession.HomeworkDetails != null && classSession.HomeworkDetails.Id == homework.Id)
        {
            classSession.HomeworkDetails = null;
        }
        SchoolDataService.DeleteHomework(homework.Id);
        SchoolDataService.UpdateClassSession(classSession);
    }

    private void HandleHomeworkSaved(Homework homework)
    {
        classSession.HomeworkDetails = homework;
        SchoolDataService.UpdateClassSession(classSession);
    }

    private void SubmitHomework(Homework homework)
    {
        selectedHomework = homework;

        existingSubmission = homework.Submissions?.FirstOrDefault(s => s.Student?.Id == currentStudent.Id);

        showSubmissionModal = true;
    }

    private void HandleSubmissionSaved(HomeworkSubmission submission)
    {
        if (selectedHomework.Submissions == null)
        {
            selectedHomework.Submissions = new List<HomeworkSubmission>();
        }

        var existingIndex = selectedHomework.Submissions.FindIndex(s => s.Id == submission.Id);
        if (existingIndex >= 0)
        {
            selectedHomework.Submissions[existingIndex] = submission;
        }
        else
        {
            selectedHomework.Submissions.Add(submission);
        }

        SchoolDataService.UpdateClassSession(classSession);
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo($"/classes");
    }

    private void SelectMaterial(FileAttachment material)
    {
        if (IsPdfFile(material.FileName))
        {
            selectedPdfUrl = material.FilePath;
        }
    }

    private bool IsPdfFile(string fileName)
    {
        return !string.IsNullOrEmpty(fileName) && fileName.ToLower().EndsWith(".pdf");
    }

   

    private async Task SaveLessonPlan()
    {
        classSession.LessonPlan = lessonPlanModel.Content;
        SchoolDataService.UpdateClassSession(classSession);
        editingLessonPlan = false;
    }

    private void EditLessonPlan()
    {
        lessonPlanModel.Content = classSession.LessonPlan ?? "";
        editingLessonPlan = true;
    }

    private void CancelLessonPlanEdit()
    {
        editingLessonPlan = false;
    }

    private async Task HandleThreadUpdated(DiscussionThread updatedThread)
    {
        if (classSession.DiscussionThreads == null)
            classSession.DiscussionThreads = new List<DiscussionThread>();

        var existingThreadIndex = classSession.DiscussionThreads.FindIndex(t => t.Id == updatedThread.Id);
        if (existingThreadIndex >= 0)
        {
            classSession.DiscussionThreads[existingThreadIndex] = updatedThread;
        }

        StateHasChanged();
    }

    private async Task HandleNewThreadCreated(DiscussionThread newThread)
    {
        if (classSession.DiscussionThreads == null)
            classSession.DiscussionThreads = new List<DiscussionThread>();

        if (!classSession.DiscussionThreads.Any(t => t.Id == newThread.Id))
        {
            classSession.DiscussionThreads.Add(newThread);
        }

        StateHasChanged();
    }
}
