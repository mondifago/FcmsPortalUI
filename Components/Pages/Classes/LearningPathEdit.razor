@page "/learningpath/edit/{Id:int}"
@rendermode InteractiveServer
@inject ISchoolDataService SchoolDataService
@inject NavigationManager NavigationManager
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortalUI.Services
@using FcmsPortal
@using FcmsPortalUI.Components.Pages.Shared

<h3>Edit Learning Path</h3>

@if (learningPath == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-8">
            <LearningPathForm LearningPath="learningPath"
                              SubmitButtonText="Update Learning Path"
                              OnSubmit="HandleValidSubmit"
                              OnCancel="NavigateToList" />
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private LearningPath? learningPath;
    private List<Student> originalStudents = new List<Student>();

    protected override void OnInitialized()
    {
        learningPath = SchoolDataService.GetLearningPathById(Id);

        originalStudents = learningPath.Students != null
         ? learningPath.Students.Select(s => s).ToList()
         : new List<Student>();

        if (learningPath == null)
        {
            NavigationManager.NavigateTo("/classes");
            return;
        }

        if (learningPath.Students == null)
            learningPath.Students = new List<Student>();

        if (learningPath.StudentsWithAccess == null)
            learningPath.StudentsWithAccess = new List<Student>();

        if (learningPath.Schedule == null)
            learningPath.Schedule = new List<ScheduleEntry>();

        if (learningPath.AcademicYearStart == default)
            learningPath.AcademicYearStart = new DateTime(DateTime.Now.Year, 9, 1);

        if (learningPath.SemesterStartDate == default)
            learningPath.SemesterStartDate = new DateTime(DateTime.Now.Year, 9, 1);

        if (learningPath.SemesterEndDate == default)
            learningPath.SemesterEndDate = new DateTime(DateTime.Now.Year, 12, 15);

        if (learningPath.ExamsStartDate == default)
            learningPath.ExamsStartDate = new DateTime(DateTime.Now.Year, 12, 1);
    }

    private void HandleValidSubmit(LearningPath submittedLearningPath)
    {
        var removedStudents = originalStudents
      .Where(s => !submittedLearningPath.Students.Any(ns => ns.Id == s.Id))
      .ToList();

        foreach (var student in removedStudents)
        {
            SchoolDataService.SetStudentSchoolFees(student, 0);
            student.Person.IsActive = false;
            SchoolDataService.UpdateStudent(student);
        }

        var newlyAddedStudents = submittedLearningPath.Students
            .Where(s => !(learningPath?.Students ?? new List<Student>()).Any(os => os.Id == s.Id))
            .ToList();

        foreach (var student in newlyAddedStudents)
        {
            SchoolDataService.SetStudentSchoolFees(student, submittedLearningPath.FeePerSemester);
            student.Person.IsActive = true;
            SchoolDataService.UpdateStudent(student);
        }

        SchoolDataService.UpdateLearningPath(submittedLearningPath);
        NavigateToList();
    }

    private void NavigateToList()
    {
        NavigationManager.NavigateTo("/classes");
    }
}