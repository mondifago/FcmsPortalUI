@page "/scheduleEntry/create/{LearningPathId:int}"
@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal
@inject ISchoolDataService SchoolDataService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="container-fluid mt-3">
    <div class="row mb-3">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <h2>Schedule New Class</h2>
                <div>
                    <a href="/learningpaths/details/@LearningPathId" class="btn btn-secondary">
                        <i class="fa fa-arrow-left"></i> Back to Learning Path
                    </a>
                </div>
            </div>
        </div>
    </div>

    @if (learningPath == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <EditForm Model="@scheduleEntry" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <h4 class="mb-3">Schedule Details</h4>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="title" class="form-label">Title<span class="text-danger">*</span></label>
                            <InputText id="title" @bind-Value="scheduleEntry.Title" class="form-control" />
                            <ValidationMessage For="@(() => scheduleEntry.Title)" />
                        </div>
                        <div class="col-md-6">
                            <label for="venue" class="form-label">Venue<span class="text-danger">*</span></label>
                            <InputText id="venue" @bind-Value="scheduleEntry.Venue" class="form-control" />
                            <ValidationMessage For="@(() => scheduleEntry.Venue)" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="date" class="form-label">Date<span class="text-danger">*</span></label>
                            <InputDate id="date" @bind-Value="scheduleEntry.DateTime" class="form-control" readonly="@dateIsLocked" disabled="@dateIsLocked" />
                            <ValidationMessage For="@(() => scheduleEntry.DateTime)" />
                        </div>
                        <div class="col-md-4">
                            <label for="startTime" class="form-label">Start Time<span class="text-danger">*</span></label>
                            <InputText id="startTime" @bind-Value="startTimeString" type="time" class="form-control" />
                        </div>
                        <div class="col-md-4">
                            <label for="duration" class="form-label">Duration (minutes)<span class="text-danger">*</span></label>
                            <InputNumber id="duration" @bind-Value="durationMinutes" class="form-control" />
                        </div>
                    </div>

                    <div class="form-check mb-3">
                        <InputCheckbox id="isRecurring" @bind-Value="scheduleEntry.IsRecurring" class="form-check-input" />
                        <label class="form-check-label" for="isRecurring">Recurring Schedule</label>
                    </div>

                    @if (scheduleEntry.IsRecurring)
                    {
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="recurrencePattern" class="form-label">Recurrence Pattern<span class="text-danger">*</span></label>
                                <InputSelect id="recurrencePattern" @bind-Value="scheduleEntry.RecurrencePattern" class="form-select">
                                    <option value="">-- Select Pattern --</option>
                                    @foreach (var pattern in Enum.GetValues(typeof(RecurrenceType)))
                                    {
                                        <option value="@pattern">@pattern</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-4">
                                <label for="recurrenceInterval" class="form-label">Interval<span class="text-danger">*</span></label>
                                <InputNumber id="recurrenceInterval" @bind-Value="scheduleEntry.RecurrenceInterval" class="form-control" min="1" />
                            </div>
                            <div class="col-md-4">
                                <label for="endDate" class="form-label">End Date<span class="text-danger">*</span></label>
                                <InputDate id="endDate" @bind-Value="scheduleEntry.EndDate" class="form-control" />
                            </div>
                        </div>
                    }

                    <div class="mb-3 mt-4">
                        <button type="button" class="btn btn-info" @onclick="ShowClassSessionModal">
                            <i class="fa fa-plus-circle"></i> Add Class Session
                        </button>
                        @if (scheduleEntry.ClassSession != null)
                        {
                            <div class="alert alert-success mt-2">
                                <i class="fa fa-check-circle me-2"></i>
                                Class session added: <strong>@scheduleEntry.ClassSession.Course - @scheduleEntry.ClassSession.Topic</strong>
                            </div>
                        }
                    </div>

                    <div class="d-flex gap-2 mt-4">
                        <button type="submit" class="btn btn-primary">Create Schedule</button>
                        <a href="/learningpaths/details/@LearningPathId" class="btn btn-secondary">Cancel</a>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

<ClassSessionCreate IsVisible="showClassSessionModal"
                    EducationLevel="learningPath?.EducationLevel ?? EducationLevel.None"
                    ScheduleEntry="scheduleEntry"
                    OnSave="HandleClassSessionCreated"
                    OnClose="CloseClassSessionModal" />

@code {
    [Parameter]
    public int LearningPathId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "date")]
    public string DateParam { get; set; }

    private bool dateIsLocked = false;
    private string startTimeString;
    private LearningPath learningPath;
    private ScheduleEntry scheduleEntry = new ScheduleEntry();
    private int durationMinutes = 60;
    private bool showClassSessionModal = false;

    protected override void OnInitialized()
    {
        learningPath = SchoolDataService.GetLearningPathById(LearningPathId);

        if (learningPath != null)
        {
            if (!string.IsNullOrEmpty(DateParam) && DateTime.TryParse(DateParam, out var parsedDate))
            {
                scheduleEntry.DateTime = parsedDate;
                dateIsLocked = true;
            }
            else
            {
                scheduleEntry.DateTime = DateTime.Today.AddHours(8);
            }
            scheduleEntry.Duration = TimeSpan.FromMinutes(60);
            scheduleEntry.IsRecurring = false;
            scheduleEntry.RecurrenceInterval = 1;
            scheduleEntry.EndDate = DateTime.Today.AddMonths(3);
            startTimeString = scheduleEntry.DateTime.ToString("HH:mm");
        }
    }

    private void ShowClassSessionModal()
    {
        showClassSessionModal = true;
    }

    private void CloseClassSessionModal()
    {
        showClassSessionModal = false;
    }

    private void HandleClassSessionCreated(ClassSession classSession)
    {
        scheduleEntry.ClassSession = classSession;

        if (string.IsNullOrEmpty(scheduleEntry.Title) || scheduleEntry.Title == "New Schedule")
        {
            scheduleEntry.Title = $"{classSession.Course} - {classSession.Topic}";
        }
        StateHasChanged();
    }

    private void HandleSubmit()
    {
        if (TimeOnly.TryParse(startTimeString, out var timeOnly))
        {
            var dateOnly = DateOnly.FromDateTime(scheduleEntry.DateTime);
            scheduleEntry.DateTime = dateOnly.ToDateTime(timeOnly);
        }

        scheduleEntry.Duration = TimeSpan.FromMinutes(durationMinutes);

        if (scheduleEntry.IsRecurring)
        {
            var recurringEntries = LogicMethods.GenerateRecurringSchedules(scheduleEntry);
            foreach (var entry in recurringEntries)
            {
                SchoolDataService.AddScheduleEntry(LearningPathId, entry);
            }
        }
        else
        {
            SchoolDataService.AddScheduleEntry(LearningPathId, scheduleEntry);
        }

        if (dateIsLocked)
        {
            string formattedDate = scheduleEntry.DateTime.ToString("yyyy-MM-dd");
            NavigationManager.NavigateTo($"/learningpath/{LearningPathId}/schedules/{formattedDate}");
        }
        else
        {
            NavigationManager.NavigateTo($"/learningpaths/details/{LearningPathId}");
        }
    }
}