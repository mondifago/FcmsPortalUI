@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Services
@using FcmsPortal
@using FcmsPortalUI.Components.Pages.Shared
@using System.Globalization
@inject ISchoolDataService SchoolDataService

<EditForm Model="LearningPath" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card mb-4">
        <div class="card-header">
            <h5>Basic Information</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="educationLevel" class="form-label">Education Level<span class="text-danger">*</span></label>
                    <InputSelect id="educationLevel" class="form-select" @bind-Value="LearningPath.EducationLevel" @bind-Value:after="async () => await OnEducationLevelChanged.InvokeAsync()">
                        <option value="">-- Select Education Level --</option>
                        @foreach (var level in Enum.GetValues(typeof(EducationLevel)))
                        {
                            <option value="@level">@level</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => LearningPath.EducationLevel)" />
                </div>
                <div class="col-md-6">
                    <label for="classLevel" class="form-label">Class Level<span class="text-danger">*</span></label>
                    <select @bind="LearningPath.ClassLevel" @bind:after="async () => await OnClassLevelChanged.InvokeAsync()" class="form-select">
                        <option value="@ClassLevel.None">-- Select Class Level --</option>
                        @foreach (var level in AvailableClassLevels)
                        {
                            <option value="@level">@level</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => LearningPath.ClassLevel)" />
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="semester" class="form-label">Semester*</label>
                    <InputSelect id="semester" @bind-Value="LearningPath.Semester" class="form-select">
                        <option value="0">-- Select Semester --</option>
                        @foreach (var semester in Enum.GetValues(typeof(Semester)))
                        {
                            <option value="@semester">@semester</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-6">
                    <label for="academicYearStart" class="form-label">Academic Year<span class="text-danger">*</span></label>
                    <select id="academicYearStart" @bind="AcademicYearStartYear" class="form-select">
                        @for (int year = DateTime.Now.Year - 5; year <= DateTime.Now.Year + 5; year++)
                        {
                            <option value="@year">@year-@(year + 1)</option>
                        }
                    </select>
                </div>
            </div>

            <div class="mb-3">
                <label for="feePerSemester" class="form-label">Fee Per Semester (₦)*</label>
                <InputNumber id="feePerSemester" @bind-Value="LearningPath.FeePerSemester" @bind-Value:after="async () => await OnFeePerSemesterChanged.InvokeAsync()" class="form-control" />
                <small class="form-text text-muted">
                    Fee: @LearningPath.FeePerSemester.ToString("C", new CultureInfo("en-NG"))
                </small>
            </div>

            @if (!IsEditing)
            {
                <div class="mb-3">
                    <label for="approvalStatus" class="form-label">Approval Status</label>
                    <InputSelect id="approvalStatus" @bind-Value="LearningPath.ApprovalStatus" class="form-select">
                        @foreach (var status in Enum.GetValues(typeof(PrincipalApprovalStatus)))
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>
                </div>
            }
        </div>
    </div>

    @if (AvailableStudents != null && AvailableStudents.Any())
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5>Students</h5>
                <p class="small text-muted mb-0">
                    @(IsEditing ? "Select students enrolled in this learning path" : "Select students to enroll in this learning path")
                </p>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="d-flex justify-content-between mb-2">
                        <div>
                            <button type="button" class="btn btn-sm btn-outline-primary me-2"
                                    @onclick="SelectAllStudents">
                                Select All
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-secondary"
                                    @onclick="UnselectAllStudents">
                                Unselect All
                            </button>
                        </div>
                        <div>
                            <span class="badge bg-info">@SelectedStudentIds.Count selected</span>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-sm table-striped">
                            <thead>
                                <tr>
                                    <th style="width: 50px;"></th>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Education Level</th>
                                    <th>Class Level</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var student in AvailableStudents)
                                {
                                    <tr>
                                        <td>
                                            <div class="form-check">
                                                <input type="checkbox"
                                                       class="form-check-input"
                                                       checked="@IsStudentSelected(student.Id)"
                                                       @onchange="(e) => ToggleStudentSelection(student.Id, e.Value)" />
                                            </div>
                                        </td>
                                        <td>@student.Id</td>
                                        <td>@student.Person.FirstName @student.Person.LastName</td>
                                        <td>@student.Person.EducationLevel</td>
                                        <td>@student.Person.ClassLevel</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (LearningPath.EducationLevel != 0 && LearningPath.ClassLevel != ClassLevel.None)
    {
        <div class="alert alert-info">
            No students found for the selected Education Level and Class Level.
        </div>
    }

    @if (IsEditing && LearningPath.Schedule != null && LearningPath.Schedule.Any())
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5>Schedule</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Title</th>
                                <th>Date</th>
                                <th>Duration</th>
                                <th>Venue</th>
                                <th>Course</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var schedule in LearningPath.Schedule)
                            {
                                <tr>
                                    <td>@schedule.Id</td>
                                    <td>@schedule.Title</td>
                                    <td>@schedule.DateTime.ToString("g")</td>
                                    <td>@schedule.Duration.ToString(@"hh\:mm")</td>
                                    <td>@schedule.Venue</td>
                                    <td>@(schedule.ClassSession?.Course ?? "N/A")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="text-muted mt-2">
                    <small>Note: To manage schedules, please use the Schedule Management section</small>
                </div>
            </div>
        </div>
    }

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="OnCancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public LearningPath LearningPath { get; set; }

    [Parameter]
    public bool IsEditing { get; set; } = false;

    [Parameter]
    public List<Student> AvailableStudents { get; set; } = new List<Student>();

    [Parameter]
    public List<ClassLevel> AvailableClassLevels { get; set; } = new List<ClassLevel>();

    [Parameter]
    public List<int> SelectedStudentIds { get; set; } = new List<int>();

    [Parameter]
    public string SubmitButtonText { get; set; } = "Save";

    [Parameter]
    public EventCallback<LearningPath> OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnEducationLevelChanged { get; set; }

    [Parameter]
    public EventCallback OnClassLevelChanged { get; set; }

    [Parameter]
    public EventCallback OnFeePerSemesterChanged { get; set; }

    [Parameter]
    public int AcademicYearStartYear { get; set; } = DateTime.Now.Year;

    [Parameter]
    public EventCallback<int> AcademicYearStartYearChanged { get; set; }

    private void HandleValidSubmit()
    {
        // Update the AcademicYearStart before submitting
        LearningPath.AcademicYearStart = new DateTime(
            AcademicYearStartYear,
            LearningPath.AcademicYearStart.Month,
            LearningPath.AcademicYearStart.Day
        );

        OnSubmit.InvokeAsync(LearningPath);
    }

    private bool IsStudentSelected(int studentId)
    {
        return SelectedStudentIds.Contains(studentId);
    }

    private void ToggleStudentSelection(int studentId, object isChecked)
    {
        if (isChecked is bool checkedValue)
        {
            if (checkedValue && !SelectedStudentIds.Contains(studentId))
            {
                SelectedStudentIds.Add(studentId);
            }
            else if (!checkedValue && SelectedStudentIds.Contains(studentId))
            {
                SelectedStudentIds.Remove(studentId);
            }
        }
    }

    private void SelectAllStudents()
    {
        SelectedStudentIds.Clear();
        SelectedStudentIds.AddRange(AvailableStudents.Select(s => s.Id));
        StateHasChanged();
    }

    private void UnselectAllStudents()
    {
        SelectedStudentIds.Clear();
        StateHasChanged();
    }
}