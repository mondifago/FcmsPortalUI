@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Services
@using FcmsPortal
@using FcmsPortalUI.Components.Pages.Shared
@using System.Globalization
@inject ISchoolDataService SchoolDataService

<EditForm Model="LearningPath" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card mb-4">
        <div class="card-header">
            <h5>Basic Information</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="educationLevel" class="form-label">Education Level<span class="text-danger">*</span></label>
                    <InputSelect id="educationLevel" class="form-select" @bind-Value="LearningPath.EducationLevel" @bind-Value:after="OnEducationLevelChanged">
                        <option value="@EducationLevel.None">-- Select Education Level --</option>
                        @foreach (var level in Enum.GetValues(typeof(EducationLevel))
                        .Cast<EducationLevel>()
                        .Where(l => l != EducationLevel.None))
                        {
                            <option value="@level">@level</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => LearningPath.EducationLevel)" />
                </div>
                <div class="col-md-6">
                    <label for="classLevel" class="form-label">Class Level<span class="text-danger">*</span></label>
                    <select @bind="LearningPath.ClassLevel" @bind:after="OnClassLevelChanged" class="form-select">
                        <option value="@ClassLevel.None">-- Select Class Level --</option>
                        @foreach (var level in availableClassLevels)
                        {
                            <option value="@level">@level</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => LearningPath.ClassLevel)" />
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="semester" class="form-label">Semester*</label>
                    <InputSelect id="semester" @bind-Value="LearningPath.Semester" class="form-select">
                        <option value="0">-- Select Semester --</option>
                        @foreach (var semester in Enum.GetValues(typeof(Semester)))
                        {
                            <option value="@semester">@semester</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-6">
                    <label for="academicYearStart" class="form-label">Academic Year<span class="text-danger">*</span></label>
                    <select id="academicYearStart" @bind="academicYearStartYear" @bind:after="() => OnAcademicYearChanged()" class="form-select">
                        @for (int year = DateTime.Now.Year - 5; year <= DateTime.Now.Year + 5; year++)
                        {
                            <option value="@year">@year-@(year + 1)</option>
                        }
                    </select>
                </div>
            </div>

            <div class="mb-3">
                <label for="feePerSemester" class="form-label">Fee Per Semester (₦)*</label>
                <InputNumber id="feePerSemester" @bind-Value="LearningPath.FeePerSemester" @bind-Value:after="OnFeePerSemesterChanged" class="form-control" />
                <small class="form-text text-muted">
                    Fee: @LearningPath.FeePerSemester.ToString("C", new CultureInfo("en-NG"))
                </small>
            </div>

            <div class="mb-3">
                <label for="approvalStatus" class="form-label">Approval Status</label>
                <InputSelect id="approvalStatus" @bind-Value="LearningPath.ApprovalStatus" class="form-select">
                    @foreach (var status in Enum.GetValues(typeof(PrincipalApprovalStatus)))
                    {
                        <option value="@status">@status</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>

    @if (availableStudents != null && availableStudents.Any())
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5>Students</h5>
                <p class="small text-muted mb-0">
                    Select students to enroll in this learning path
                </p>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="d-flex justify-content-between mb-2">
                        <div>
                            <button type="button" class="btn btn-sm btn-outline-primary me-2"
                                    @onclick="SelectAllStudents">
                                Select All
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-secondary"
                                    @onclick="UnselectAllStudents">
                                Unselect All
                            </button>
                        </div>
                        <div>
                            <span class="badge bg-info">@selectedStudentIds.Count selected</span>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-sm table-striped">
                            <thead>
                                <tr>
                                    <th style="width: 50px;"></th>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Education Level</th>
                                    <th>Class Level</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var student in availableStudents)
                                {
                                    <tr>
                                        <td>
                                            <div class="form-check">
                                                <input type="checkbox"
                                                       class="form-check-input"
                                                       checked="@IsStudentSelected(student.Id)"
                                                       @onchange="(e) => ToggleStudentSelection(student.Id, e.Value)" />
                                            </div>
                                        </td>
                                        <td>@student.Id</td>
                                        <td>@student.Person.FirstName @student.Person.LastName</td>
                                        <td>@student.Person.EducationLevel</td>
                                        <td>@student.Person.ClassLevel</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (LearningPath.EducationLevel != EducationLevel.None && LearningPath.ClassLevel != ClassLevel.None)
    {
        <div class="alert alert-info">
            No students found for the selected Education Level and Class Level.
        </div>
    }

    @if (LearningPath.Schedule != null && LearningPath.Schedule.Any())
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5>Schedule</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Title</th>
                                <th>Date</th>
                                <th>Duration</th>
                                <th>Venue</th>
                                <th>Course</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var schedule in LearningPath.Schedule)
                            {
                                <tr>
                                    <td>@schedule.Id</td>
                                    <td>@schedule.Title</td>
                                    <td>@schedule.DateTime.ToString("g")</td>
                                    <td>@schedule.Duration.ToString(@"hh\:mm")</td>
                                    <td>@schedule.Venue</td>
                                    <td>@(schedule.ClassSession?.Course ?? "N/A")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="text-muted mt-2">
                    <small>Note: To manage schedules, please use the Schedule Management section</small>
                </div>
            </div>
        </div>
    }

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="OnCancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public LearningPath LearningPath { get; set; }

    [Parameter]
    public string SubmitButtonText { get; set; } = "Save";

    [Parameter]
    public EventCallback<LearningPath> OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private School school;
    private List<Student> availableStudents = new List<Student>();
    private List<ClassLevel> availableClassLevels = new List<ClassLevel>();
    private List<int> selectedStudentIds = new List<int>();
    private int academicYearStartYear = DateTime.Now.Year;

    protected override void OnInitialized()
    {
        school = SchoolDataService.GetSchool();

        if (LearningPath.Students == null)
            LearningPath.Students = new List<Student>();

        if (LearningPath.StudentsPaymentSuccessful == null)
            LearningPath.StudentsPaymentSuccessful = new List<Student>();

        if (LearningPath.Schedule == null)
            LearningPath.Schedule = new List<ScheduleEntry>();

        if (LearningPath.GradesList == null)
            LearningPath.GradesList = new Dictionary<Student, CourseGrade>();

        if (LearningPath.AcademicYearStart == default)
            LearningPath.AcademicYearStart = new DateTime(DateTime.Now.Year, 9, 1);

        academicYearStartYear = LearningPath.AcademicYearStart.Year;
        availableClassLevels = LogicMethods.GetAvailableClassLevels(LearningPath.EducationLevel);
        UpdateAvailableStudents();
        selectedStudentIds = LearningPath.Students.Select(s => s.Id).ToList();
    }

    private async Task OnEducationLevelChanged()
    {
        LearningPath.ClassLevel = ClassLevel.None;
        availableClassLevels = LogicMethods.GetAvailableClassLevels(LearningPath.EducationLevel);
        UpdateAvailableStudents();
        StateHasChanged();
    }

    private async Task OnClassLevelChanged()
    {
        UpdateAvailableStudents();
        StateHasChanged();
    }

    private void UpdateAvailableStudents()
    {
        if (LearningPath.EducationLevel != EducationLevel.None && LearningPath.ClassLevel != ClassLevel.None)
        {
            availableStudents = LogicMethods.GetStudentsByLevel(school, LearningPath.EducationLevel, LearningPath.ClassLevel);

            var existingIds = LearningPath.Students.Select(s => s.Id).ToList();
            selectedStudentIds = selectedStudentIds
                .Where(id => availableStudents.Any(s => s.Id == id))
                .Union(existingIds.Where(id => availableStudents.Any(s => s.Id == id)))
                .ToList();
        }
        else
        {
            availableStudents.Clear();
            selectedStudentIds.Clear();
        }
    }

    private async Task OnFeePerSemesterChanged()
    {
        // Any fee-related processing can go here
        StateHasChanged();
    }

    private void OnAcademicYearChanged()
    {
        LearningPath.AcademicYearStart = new DateTime(
            academicYearStartYear,
            LearningPath.AcademicYearStart.Month != 0 ? LearningPath.AcademicYearStart.Month : 9,
            LearningPath.AcademicYearStart.Day != 0 ? LearningPath.AcademicYearStart.Day : 1
        );
    }

    private bool IsStudentSelected(int studentId)
    {
        return selectedStudentIds.Contains(studentId);
    }

    private void ToggleStudentSelection(int studentId, object isChecked)
    {
        if (isChecked is bool checkedValue)
        {
            if (checkedValue && !selectedStudentIds.Contains(studentId))
            {
                selectedStudentIds.Add(studentId);
            }
            else if (!checkedValue && selectedStudentIds.Contains(studentId))
            {
                selectedStudentIds.Remove(studentId);
            }
        }
    }

    private void SelectAllStudents()
    {
        selectedStudentIds.Clear();
        selectedStudentIds.AddRange(availableStudents.Select(s => s.Id));
        StateHasChanged();
    }

    private void UnselectAllStudents()
    {
        selectedStudentIds.Clear();
        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        LearningPath.Students = availableStudents
            .Where(s => selectedStudentIds.Contains(s.Id))
            .ToList();

        LearningPath.AcademicYearStart = new DateTime(
            academicYearStartYear,
            LearningPath.AcademicYearStart.Month != 0 ? LearningPath.AcademicYearStart.Month : 9,
            LearningPath.AcademicYearStart.Day != 0 ? LearningPath.AcademicYearStart.Day : 1
        );

        OnSubmit.InvokeAsync(LearningPath);
    }
}