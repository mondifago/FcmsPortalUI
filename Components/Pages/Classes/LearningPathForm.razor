@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortalUI.Services
@using FcmsPortal
@using FcmsPortalUI.Components.Pages.Shared
@using System.Globalization
@inject ISchoolDataService SchoolDataService
@inject ValidationService ValidationService

<EditForm EditContext="@editContext" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card mb-4">
        <div class="card-header">
            <h5>Basic Information</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="educationLevel" class="form-label">Education Level<span class="text-danger">*</span></label>
                    <InputSelect id="educationLevel" class="form-select" @bind-Value="LearningPath.EducationLevel" @bind-Value:after="NotifyEducationLevelChanged">
                        <option value="@EducationLevel.None">-- Select Education Level --</option>
                        @foreach (var level in Enum.GetValues(typeof(EducationLevel))
                                                .Cast<EducationLevel>()
                                                .Where(l => l != EducationLevel.None))
                        {
                            <option value="@level">@level</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => LearningPath.EducationLevel)" />
                </div>
                <div class="col-md-6">
                    <label for="classLevel" class="form-label">Class Level<span class="text-danger">*</span></label>
                    <select @bind="LearningPath.ClassLevel" @bind:after="NotifyClassLevelChanged" class="form-select">
                        <option value="@ClassLevel.None">-- Select Class Level --</option>
                        @foreach (var level in availableClassLevels)
                        {
                            <option value="@level">@level</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => LearningPath.ClassLevel)" />
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="academicYearStart" class="form-label">Academic Year<span class="text-danger">*</span></label>
                    <select id="academicYearStart" @bind="academicYearStartYear" @bind:after="() => OnAcademicYearChanged()" class="form-select">
                        @for (int year = DateTime.Now.Year - 5; year <= DateTime.Now.Year + 5; year++)
                        {
                            <option value="@year">@year-@(year + 1)</option>
                        }
                    </select>
                </div>
                <div class="col-md-6">
                    <label for="semester" class="form-label">Semester<span class="text-danger">*</span></label>
                    <InputSelect id="semester" @bind-Value="LearningPath.Semester" @bind-Value:after="NotifySemesterChanged" class="form-select">
                        @foreach (var semester in Enum.GetValues(typeof(Semester)))
                        {
                            <option value="@semester">@semester</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="semesterStartDate" class="form-label">Semester Start Date<span class="text-danger">*</span></label>
                    <InputDate id="semesterStartDate" @bind-Value="LearningPath.SemesterStartDate" class="form-control" />
                    <ValidationMessage For="@(() => LearningPath.SemesterStartDate)" />
                </div>
                <div class="col-md-4">
                    <label for="semesterEndDate" class="form-label">Semester End Date<span class="text-danger">*</span></label>
                    <InputDate id="semesterEndDate" @bind-Value="LearningPath.SemesterEndDate" class="form-control" />
                    <ValidationMessage For="@(() => LearningPath.SemesterEndDate)" />
                </div>
                <div class="col-md-4">
                    <label for="examsStartDate" class="form-label">Exams Start Date<span class="text-danger">*</span></label>
                    <InputDate id="examsStartDate" @bind-Value="LearningPath.ExamsStartDate" class="form-control" />
                    <ValidationMessage For="@(() => LearningPath.ExamsStartDate)" />
                </div>
            </div>

            <div class="mb-3">
                <label for="feePerSemester" class="form-label">Fee Per Semester (₦)<span class="text-danger">*</span></label>
                <InputNumber id="feePerSemester" @bind-Value="LearningPath.FeePerSemester" @bind-Value:after="OnFeePerSemesterChanged" class="form-control" />
                <small class="form-text text-muted">
                    Fee: @LearningPath.FeePerSemester.ToString("C", new CultureInfo("en-NG"))
                </small>
            </div>

            <div class="mb-3">
                <label for="approvalStatus" class="form-label">Approval Status</label>
                <InputSelect id="approvalStatus" @bind-Value="LearningPath.ApprovalStatus" class="form-select">
                    @foreach (var status in Enum.GetValues(typeof(PrincipalApprovalStatus)))
                    {
                        <option value="@status">@status</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>

    @* Schedule & Sessions Management Section *@
    @if (LearningPath.Schedule != null && LearningPath.Schedule.Any())
    {
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Schedule & Sessions Management</h5>
                @if (TemplateApplied)
                {
                    <div>
                        <span class="badge bg-info me-2">
                            <i class="fa fa-magic"></i> From Template (@TemplateSource)
                        </span>
                        <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="OnClearTemplate">
                            <i class="fa fa-refresh"></i> Start Fresh
                        </button>
                    </div>
                }
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Date</th>
                                <th>Duration</th>
                                <th>Venue</th>
                                <th>Course</th>
                                <th>Topic</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var schedule in LearningPath.Schedule)
                            {
                                <tr>
                                    <td>@schedule.Title</td>
                                    <td>@schedule.DateTime.ToString("g")</td>
                                    <td>@schedule.Duration.ToString(@"hh\:mm")</td>
                                    <td>@schedule.Venue</td>
                                    <td>@(schedule.ClassSession?.Course ?? "N/A")</td>
                                    <td>@(schedule.ClassSession?.Topic ?? "N/A")</td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button type="button" class="btn btn-outline-primary" @onclick="() => EditSchedule(schedule)">
                                                <i class="fa fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-danger" @onclick="() => DeleteSchedule(schedule)">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <button type="button" class="btn btn-success btn-sm mt-2" @onclick="AddNewSchedule">
                    <i class="fa fa-plus"></i> Add Schedule
                </button>
            </div>
        </div>
    }

    @if (LearningPath.Schedule != null && LearningPath.Schedule.Any())
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5>Schedule Overview</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Title</th>
                                <th>Date</th>
                                <th>Duration</th>
                                <th>Venue</th>
                                <th>Course</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var schedule in LearningPath.Schedule)
                            {
                                <tr>
                                    <td>@schedule.Id</td>
                                    <td>@schedule.Title</td>
                                    <td>@schedule.DateTime.ToString("g")</td>
                                    <td>@schedule.Duration.ToString(@"hh\:mm")</td>
                                    <td>@schedule.Venue</td>
                                    <td>@(schedule.ClassSession?.Course ?? "N/A")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="text-muted mt-2">
                    <small>Note: To manage schedules, please use the Schedule Management section above</small>
                </div>
            </div>
        </div>
    }

    @if (availableStudents != null && availableStudents.Any())
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5>Students</h5>
                <p class="small text-muted mb-0">
                    Select students to enroll in this learning path
                </p>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="d-flex justify-content-between mb-2">
                        <div>
                            <button type="button" class="btn btn-sm btn-outline-primary me-2"
                                    @onclick="SelectAllStudents">
                                Select All
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-secondary"
                                    @onclick="UnselectAllStudents">
                                Unselect All
                            </button>
                        </div>
                        <div>
                            <span class="badge bg-info">@selectedStudentIds.Count selected</span>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-sm table-striped">
                            <thead>
                                <tr>
                                    <th style="width: 50px;"></th>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Education Level</th>
                                    <th>Class Level</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var student in availableStudents)
                                {
                                    <tr>
                                        <td>
                                            <div class="form-check">
                                                <input type="checkbox"
                                                       class="form-check-input"
                                                       checked="@IsStudentSelected(student.Id)"
                                                       @onchange="(e) => ToggleStudentSelection(student.Id, (bool?)e.Value ?? false)" />
                                            </div>
                                        </td>
                                        <td>@student.Id</td>
                                        <td>@student.Person.FirstName @student.Person.LastName</td>
                                        <td>@student.Person.EducationLevel</td>
                                        <td>@student.Person.ClassLevel</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (LearningPath.EducationLevel != EducationLevel.None && LearningPath.ClassLevel != ClassLevel.None)
    {
        <div class="alert alert-info">
            No students found for the selected Education Level and Class Level.
        </div>
    }

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="OnCancel">Cancel</button>
    </div>
</EditForm>

<ScheduleEntryCreate IsVisible="showCreateScheduleModal"
                     LearningPathId="@(LearningPath.Id > 0 ? LearningPath.Id : null)"
                     AllowClassSchedule="true"
                     RestrictToClassOnly="true"
                     OnSave="HandleScheduleCreated"
                     OnClose="() => showCreateScheduleModal = false" />

<ScheduleEntryEdit IsVisible="showEditScheduleModal"
                   LearningPathId="@(LearningPath.Id > 0 ? LearningPath.Id : null)"
                   ExistingScheduleEntry="scheduleToEdit"
                   AllowClassSchedule="true"
                   RestrictToClassOnly="true"
                   OnSave="HandleScheduleUpdated"
                   OnClose="() => { showEditScheduleModal = false; scheduleToEdit = null; }" />

<ConfirmDeleteModal IsVisible="showDeleteConfirmation"
                    Title="Confirm Delete Schedule"
                    Message="Are you sure you want to delete this schedule? This action cannot be undone."
                    OnConfirm="ConfirmDeleteSchedule"
                    OnCancel="CancelDeleteSchedule" />

@code {
    [Parameter]
    public LearningPath LearningPath { get; set; } = new LearningPath();

    [Parameter]
    public string SubmitButtonText { get; set; } = "Save";

    [Parameter]
    public EventCallback<LearningPath> OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<EducationLevel> OnEducationLevelChanged { get; set; }

    [Parameter]
    public EventCallback<ClassLevel> OnClassLevelChanged { get; set; }

    [Parameter]
    public EventCallback<Semester> OnSemesterChanged { get; set; }

    [Parameter]
    public bool TemplateApplied { get; set; } = false;

    [Parameter]
    public string TemplateSource { get; set; } = "";

    [Parameter]
    public EventCallback OnClearTemplate { get; set; }

    private List<Student> availableStudents = new List<Student>();
    private List<ClassLevel> availableClassLevels = new List<ClassLevel>();
    private HashSet<int> selectedStudentIds = new HashSet<int>();
    private ScheduleEntry? scheduleToEdit = null;
    private ScheduleEntry? scheduleToDelete = null;
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private int academicYearStartYear = DateTime.Now.Year;
    private bool showCreateScheduleModal = false;
    private bool showEditScheduleModal = false;
    private bool showDeleteConfirmation = false;


    protected override void OnInitialized()
    {

        if (LearningPath.Students != null)
        {
            selectedStudentIds = new HashSet<int>(LearningPath.Students.Select(s => s.Id));
        }

        LoadAvailableStudents();
        LoadAvailableClassLevels();

        academicYearStartYear = LearningPath.AcademicYearStart.Year != 1 ?
            LearningPath.AcademicYearStart.Year : DateTime.Now.Year;

        editContext = new EditContext(LearningPath);
        messageStore = new ValidationMessageStore(editContext);
    }

    private void LoadAvailableStudents()
    {
        if (LearningPath.EducationLevel != EducationLevel.None && LearningPath.ClassLevel != ClassLevel.None)
        {
            availableStudents = SchoolDataService.GetStudentsByLevel(LearningPath.EducationLevel, LearningPath.ClassLevel);
        }
    }

    private void LoadAvailableClassLevels()
    {
        var classLevelMapping = new ClassLevelMapping();
        var mappings = classLevelMapping.GetClassLevelsByEducationLevel();

        if (mappings.TryGetValue(LearningPath.EducationLevel, out var levels))
        {
            availableClassLevels = levels;
        }
        else
        {
            availableClassLevels = new List<ClassLevel>();
        }
    }

    private async Task NotifyEducationLevelChanged()
    {
        await OnEducationLevelChanged.InvokeAsync(LearningPath.EducationLevel);
        OnEducationLevelChangedInternal();
    }

    private async Task NotifyClassLevelChanged()
    {
        await OnClassLevelChanged.InvokeAsync(LearningPath.ClassLevel);
        OnClassLevelChangedInternal();
    }

    private async Task NotifySemesterChanged()
    {
        await OnSemesterChanged.InvokeAsync(LearningPath.Semester);
    }

    private void OnEducationLevelChangedInternal()
    {
        LearningPath.ClassLevel = ClassLevel.None;
        selectedStudentIds.Clear();
        LoadAvailableClassLevels();
        LoadAvailableStudents();
        StateHasChanged();
    }

    private void OnClassLevelChangedInternal()
    {
        selectedStudentIds.Clear();
        LoadAvailableStudents();
        StateHasChanged();
    }

    private void OnAcademicYearChanged()
    {
        LearningPath.AcademicYearStart = new DateTime(
            academicYearStartYear,
            LearningPath.AcademicYearStart.Month != 0 ? LearningPath.AcademicYearStart.Month : 9,
            LearningPath.AcademicYearStart.Day != 0 ? LearningPath.AcademicYearStart.Day : 1
        );
    }

    private void OnFeePerSemesterChanged()
    {
        StateHasChanged();
    }

    private bool IsStudentSelected(int studentId)
    {
        return selectedStudentIds.Contains(studentId);
    }

    private void ToggleStudentSelection(int studentId, object isChecked)
    {
        Util.ToggleItemSelection<Student>(studentId, isChecked, selectedStudentIds);
    }

    private void SelectAllStudents()
    {
        selectedStudentIds = new HashSet<int>(availableStudents.Select(s => s.Id));
    }

    private void UnselectAllStudents()
    {
        selectedStudentIds.Clear();
        StateHasChanged();
    }

    private void EditSchedule(ScheduleEntry schedule)
    {
        scheduleToEdit = schedule;
        showEditScheduleModal = true;
    }

    private void DeleteSchedule(ScheduleEntry schedule)
    {
        scheduleToDelete = schedule;
        showDeleteConfirmation = true;
    }

    private void AddNewSchedule()
    {
        showCreateScheduleModal = true;
    }

    private void HandleScheduleCreated(ScheduleEntry newSchedule)
    {
        if (newSchedule != null)
        {
            if (newSchedule.Id <= 0)
            {
                newSchedule.Id = LearningPath.Schedule.Count > 0
                    ? LearningPath.Schedule.Max(s => s.Id) + 1
                    : 1;
            }

            if (newSchedule.ClassSession != null && newSchedule.ClassSession.Id <= 0)
            {
                var allClassSessionIds = new List<int>();
                foreach (var schedule in LearningPath.Schedule)
                {
                    if (schedule.ClassSession?.Id != null)
                    {
                        allClassSessionIds.Add(schedule.ClassSession.Id);
                    }
                }
                newSchedule.ClassSession.Id = allClassSessionIds.Any()
                    ? allClassSessionIds.Max() + 1
                    : 1;
            }

            LearningPath.Schedule.Add(newSchedule);
            StateHasChanged();
        }
        showCreateScheduleModal = false;
    }

    private void HandleScheduleUpdated(ScheduleEntry updatedSchedule)
    {
        if (updatedSchedule != null && scheduleToEdit != null)
        {
            var index = LearningPath.Schedule.IndexOf(scheduleToEdit);
            if (index >= 0)
            {
                updatedSchedule.Id = scheduleToEdit.Id;

                if (updatedSchedule.ClassSession != null && scheduleToEdit.ClassSession != null)
                {
                    updatedSchedule.ClassSession.Id = scheduleToEdit.ClassSession.Id;
                }

                LearningPath.Schedule[index] = updatedSchedule;
                StateHasChanged();
            }
        }
        showEditScheduleModal = false;
        scheduleToEdit = null;
    }

    private void ConfirmDeleteSchedule()
    {
        if (scheduleToDelete != null)
        {
            LearningPath.Schedule.Remove(scheduleToDelete);
            StateHasChanged();
        }
        showDeleteConfirmation = false;
        scheduleToDelete = null;
    }

    private void CancelDeleteSchedule()
    {
        showDeleteConfirmation = false;
        scheduleToDelete = null;
    }

    private async Task HandleSubmit(EditContext context)
    {
        if (!ValidationService.ValidateLearningPath(context, LearningPath, messageStore!, SchoolDataService))
        {
            return;
        }

        LearningPath.Students = availableStudents
            .Where(s => selectedStudentIds.Contains(s.Id))
            .ToList();

        LearningPath.AcademicYearStart = new DateTime(
            academicYearStartYear,
            LearningPath.AcademicYearStart.Month != 0 ? LearningPath.AcademicYearStart.Month : 9,
            LearningPath.AcademicYearStart.Day != 0 ? LearningPath.AcademicYearStart.Day : 1
        );

        await OnSubmit.InvokeAsync(LearningPath);
    }
}