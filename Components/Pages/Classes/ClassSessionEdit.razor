﻿@using FcmsPortalUI.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal
@inject ISchoolDataService SchoolDataService
@inject ValidationService ValidationService

<div class="modal fade show" style="display: @(IsVisible ? "block" : "none");" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Edit Class Session</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm EditContext="@editContext" OnSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="course" class="form-label">Course<span class="text-danger">*</span></label>
                            <InputSelect id="course" @bind-Value="classSession.Course" class="form-select">
                                <option value="">-- Select Course --</option>
                                @foreach (var course in availableCourses)
                                {
                                    <option value="@course">@course</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-6">
                            <label for="teacher" class="form-label">Teacher<span class="text-danger">*</span></label>
                            <InputSelect id="teacher" @bind-Value="classSession.TeacherId" class="form-select">
                                <option value="0">-- Select Teacher --</option>
                                @foreach (var teacher in availableTeachers)
                                {
                                    <option value="@teacher.Id">@Util.GetFullName(teacher.Person)</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="topic" class="form-label">Topic<span class="text-danger">*</span></label>
                            <InputText id="topic" @bind-Value="classSession.Topic" class="form-control" />
                            <ValidationMessage For="@(() => classSession.Topic)" />
                        </div>
                        <div class="col-md-6">
                            <label for="description" class="form-label">Description</label>
                            <InputText id="description" @bind-Value="classSession.Description" class="form-control" />
                        </div>
                    </div>

                    <div class="d-flex justify-content-end mt-4">
                        <button type="button" class="btn btn-secondary me-2" @onclick="Close">Cancel</button>
                        <button type="submit" class="btn btn-primary">Update Class Session</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EducationLevel EducationLevel { get; set; }

    [Parameter]
    public ScheduleEntry? ScheduleEntry { get; set; }

    [Parameter]
    public ClassSession? ExistingClassSession { get; set; }

    [Parameter]
    public EventCallback<ClassSession> OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private School school = new();
    private ClassSession classSession;
    private List<string> availableCourses = new List<string>();
    private List<Staff> availableTeachers = new List<Staff>();
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    protected override void OnInitialized()
    {
        school = SchoolDataService.GetSchool();
        LoadData();
    }

    protected override void OnParametersSet()
    {
        if (ExistingClassSession != null)
        {
            classSession = ExistingClassSession;
        }
        else
        {
            classSession = new ClassSession();
        }
        editContext = new EditContext(classSession);
        messageStore = new ValidationMessageStore(editContext);
        LoadData();
    }

    private void LoadData()
    {
        availableCourses = CourseDefaults.GetCourseNames(EducationLevel);
        availableTeachers = LogicMethods.GetTeachersByEducationLevel(school, EducationLevel);
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }

    private async Task HandleSubmit()
    {
        if (classSession.TeacherId > 0)
        {
            classSession.Teacher = availableTeachers.FirstOrDefault(t => t.Id == classSession.TeacherId);
        }

        if (!ValidationService.ValidateClassSession(editContext!, classSession, messageStore!))
        {
            return;
        }

        await OnSave.InvokeAsync(classSession);
        await OnClose.InvokeAsync();
    }
}