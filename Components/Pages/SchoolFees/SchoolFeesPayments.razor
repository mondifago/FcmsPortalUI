@page "/schoolfees/{SchoolFeesId:int}/payments"
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Services
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Manage Payments for School Fees #@SchoolFeesId</h3>

@if (schoolFees == null)
{
    <p>Loading...</p>
}
else
{
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Summary</h5>
                    <p class="card-text">Total Amount: <strong>@schoolFees.TotalAmount.ToString("C")</strong></p>
                    <p class="card-text">Total Paid: <strong>@schoolFees.TotalPaid.ToString("C")</strong></p>
                    <p class="card-text">Balance: <strong>@schoolFees.Balance.ToString("C")</strong></p>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <h4>Add New Payment</h4>
            <EditForm Model="@newPayment" OnValidSubmit="AddPayment">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3">
                    <label for="amount">Amount:</label>
                    <InputNumber id="amount" @bind-Value="newPayment.Amount" class="form-control" />
                </div>

                <div class="form-group mb-3">
                    <label for="date">Date:</label>
                    <InputDate id="date" @bind-Value="newPayment.Date" class="form-control" />
                </div>

                <div class="form-group mb-3">
                    <label for="paymentMethod">Payment Method:</label>
                    <InputSelect id="paymentMethod" @bind-Value="newPayment.PaymentMethod" class="form-control">
                        @foreach (var method in Enum.GetValues(typeof(PaymentMethod)))
                        {
                            <option value="@method">@method</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group mb-3">
                    <label for="reference">Reference:</label>
                    <InputNumber id="reference" @bind-Value="newPayment.Reference" class="form-control" />
                </div>

                <button type="submit" class="btn btn-primary">Add Payment</button>
            </EditForm>
        </div>

        <div class="col-md-6">
            <h4>Existing Payments</h4>

            @if (schoolFees.Payments.Count == 0)
            {
                <p>No payments recorded.</p>
            }
            else
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Amount</th>
                            <th>Date</th>
                            <th>Payment Method</th>
                            <th>Reference</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var payment in schoolFees.Payments)
                        {
                            <tr>
                                <td>@payment.Id</td>
                                <td>@payment.Amount.ToString("C")</td>
                                <td>@payment.Date.ToShortDateString()</td>
                                <td>@payment.PaymentMethod</td>
                                <td>@payment.Reference</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="() => RemovePayment(payment.Id)">Remove</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>

    <div class="mt-3">
        <button class="btn btn-secondary" @onclick="ReturnToSchoolFees">Back to School Fees</button>
    </div>
}

@code {
    [Parameter]
    public int SchoolFeesId { get; set; }

    private SchoolFees schoolFees;
    private Payment newPayment = new Payment { Date = DateTime.Today };

    protected override void OnInitialized()
    {
        // In a real application, you would get this from my database
        schoolFees = SchoolFeesService.GetSchoolFees(SchoolFeesId);

        if (schoolFees == null)
        {
            NavigationManager.NavigateTo("/schoolfees");
        }
    }

    private void AddPayment()
    {
        newPayment.Id = PaymentService.GetNextId();
        PaymentService.AddPayment(newPayment);
        schoolFees.Payments.Add(newPayment);
        SchoolFeesService.UpdateSchoolFees(schoolFees);
        newPayment = new Payment { Date = DateTime.Today };
    }

    private void RemovePayment(int paymentId)
    {
        var payment = schoolFees.Payments.FirstOrDefault(p => p.Id == paymentId);
        if (payment != null)
        {
            schoolFees.Payments.Remove(payment);
            SchoolFeesService.UpdateSchoolFees(schoolFees);
            PaymentService.DeletePayment(paymentId);
        }
    }

    private void ReturnToSchoolFees()
    {
        NavigationManager.NavigateTo("/schoolfees");
    }
}