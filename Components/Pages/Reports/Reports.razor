@page "/reports"
@using FcmsPortal.Models
@using FcmsPortal.Services
@using FcmsPortal
@using FcmsPortalUI.Components.Pages.Shared
@inject ISchoolDataService SchoolDataService

<div class="container-fluid mt-3">
    <div class="row mb-3">
        <div class="col">
            <h2>
                <i class="fa fa-chart-bar me-2"></i>Reports
            </h2>
        </div>
    </div>

    <!-- Attendance Reports Section -->
    <div class="card mb-4">
        <div class="card-header bg-info text-white">
            <h4 class="mb-0">
                <i class="fa fa-calendar-check me-2"></i>Attendance Reports
            </h4>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-3">
                    <label for="academicYear" class="form-label">Academic Year:</label>
                    <select class="form-select" id="academicYear" @bind="selectedAcademicYear" @bind:after="OnFiltersChanged">
                        <option value="">Select Academic Year</option>
                        @foreach (var year in availableAcademicYears)
                        {
                            <option value="@year">@year</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="semester" class="form-label">Semester:</label>
                    <select class="form-select" id="semester" @bind="selectedSemester" @bind:after="OnFiltersChanged">
                        <option value="">Select Semester</option>
                        @if (!string.IsNullOrEmpty(selectedAcademicYear))
                        {
                            @foreach (var semester in availableSemesters)
                            {
                                <option value="@semester">@semester</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="attendanceDate" class="form-label">Select Date:</label>
                    <input type="date" class="form-control" id="attendanceDate" @bind="selectedDate" @bind:after="OnDateChanged" />
                </div>

            </div>

            @if (!string.IsNullOrEmpty(selectedAcademicYear) && !string.IsNullOrEmpty(selectedSemester) && filteredLearningPaths.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Learning Path</th>
                                <th>Total Students</th>
                                <th>Days Recorded</th>
                                <th>Avg Attendance</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var learningPath in filteredLearningPaths)
                            {
                                double avgRate = 0;
                                if (learningPath.AttendanceLog.Any() && learningPath.Students.Any())
                                {
                                    var totalPossible = learningPath.Students.Count * learningPath.AttendanceLog.Count;
                                    var totalPresent = learningPath.AttendanceLog.Sum(log => log.PresentStudents?.Count ?? 0);
                                    avgRate = totalPossible > 0 ? (double)totalPresent / totalPossible * 100 : 0;
                                }

                                <tr>
                                    <td>@Util.GetLearningPathName(learningPath)</td>
                                    <td>@learningPath.Students.Count</td>
                                    <td>@learningPath.AttendanceLog.Count</td>
                                    <td>@avgRate.ToString("F1")%</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewDailyAttendance(learningPath.Id)">
                                                <i class="fa fa-calendar-day me-1"></i> Daily View
                                            </button>
                                            <button class="btn btn-sm btn-outline-success" @onclick="() => ViewSemesterAttendance(learningPath.Id)">
                                                <i class="fa fa-chart-line me-1"></i> Semester View
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                @if (!string.IsNullOrEmpty(selectedAcademicYear) && !string.IsNullOrEmpty(selectedSemester))
                {
                    <div class="text-center py-4">
                        <i class="fa fa-calendar-times fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No attendance records found</h5>
                        <p class="text-muted">
                            @if (selectedDate == default)
                            {
                                <span>Please select a date to view attendance records.</span>
                            }
                            else
                            {
                                <span>No attendance records found for @selectedDate.ToString("MMMM dd, yyyy") in @selectedAcademicYear @selectedSemester semester.</span>
                            }
                        </p>
                    </div>
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="fa fa-filter fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">Select filters to view attendance</h5>
                        <p class="text-muted">Please select Academic Year and Semester to continue.</p>
                    </div>
                }
            }



        </div>
    </div>
</div>
<DailyAttendanceViewModal IsVisible="showDailyAttendanceModal"
                          SelectedDate="selectedDate"
                          AttendanceData="dailyAttendanceData"
                          OnClose="CloseDailyAttendanceModal" />


<SemesterAttendanceViewModal IsVisible="showSemesterAttendanceModal"
                             LearningPath="selectedLearningPath"
                             AttendanceReport="semesterAttendanceReport"
                             OnClose="CloseSemesterAttendanceModal" />
@code {
    private School school;
    private DateTime selectedDate = DateTime.Today;
    private string selectedAcademicYear = "";
    private string selectedSemester = "";
    private List<string> availableAcademicYears = new();
    private List<string> availableSemesters = new();
    private List<LearningPath> filteredLearningPaths = new();

    private bool showDailyAttendanceModal = false;
    private bool showSemesterAttendanceModal = false;
    private DailyAttendanceLogEntry dailyAttendanceData = new();
    private SemesterAttendanceReport semesterAttendanceReport = new();
    private LearningPath selectedLearningPath;

    protected override void OnInitialized()
    {
        school = SchoolDataService.GetSchool();
        LoadAvailableAcademicYears();
        InitializeWithCurrentData();
    }

    private void InitializeWithCurrentData()
    {
        if (availableAcademicYears.Any())
        {
            selectedAcademicYear = availableAcademicYears.First();
            LoadAvailableSemesters();

            if (availableSemesters.Any())
            {
                selectedSemester = availableSemesters.Last();
                selectedDate = DateTime.Today;
                LoadFilteredLearningPaths();
            }
        }
    }

    private void LoadAvailableAcademicYears()
    {
        availableAcademicYears = school.LearningPath
            .Select(lp => lp.AcademicYear)
            .Distinct()
            .OrderByDescending(year => year)
            .ToList();
    }

    private void OnFiltersChanged()
    {
        if (!string.IsNullOrEmpty(selectedAcademicYear))
        {
            LoadAvailableSemesters();
        }

        if (!string.IsNullOrEmpty(selectedAcademicYear) && !string.IsNullOrEmpty(selectedSemester))
        {
            LoadFilteredLearningPaths();
        }
    }

    private void LoadAvailableSemesters()
    {
        availableSemesters = school.LearningPath
            .Where(lp => lp.AcademicYear == selectedAcademicYear)
            .Select(lp => lp.Semester.ToString())
            .Distinct()
            .OrderBy(semester => semester)
            .ToList();
    }

    private void OnDateChanged()
    {
        if (!string.IsNullOrEmpty(selectedAcademicYear) && !string.IsNullOrEmpty(selectedSemester))
        {
            LoadFilteredLearningPaths();
        }
    }

    private void LoadFilteredLearningPaths()
    {
        filteredLearningPaths = school.LearningPath
            .Where(lp => lp.AcademicYear == selectedAcademicYear &&
                         lp.Semester.ToString() == selectedSemester)
            .ToList();
    }

    private void ViewDailyAttendance(int learningPathId)
    {
        selectedLearningPath = SchoolDataService.GetLearningPathById(learningPathId);
        if (selectedLearningPath != null)
        {
            var learningPaths = new List<LearningPath> { selectedLearningPath };
            dailyAttendanceData = LogicMethods.GetDailyAttendanceEntry(selectedLearningPath, selectedDate);
            showDailyAttendanceModal = true;
        }
    }

    private void ViewSemesterAttendance(int learningPathId)
    {
        selectedLearningPath = SchoolDataService.GetLearningPathById(learningPathId);
        if (selectedLearningPath != null)
        {
            semesterAttendanceReport = SchoolDataService.GenerateAttendanceReport(learningPathId);
            showSemesterAttendanceModal = true;
        }
    }

    private void CloseDailyAttendanceModal()
    {
        showDailyAttendanceModal = false;
        dailyAttendanceData = null;
        selectedLearningPath = null;
    }

    private void CloseSemesterAttendanceModal()
    {
        showSemesterAttendanceModal = false;
        semesterAttendanceReport = new();
        selectedLearningPath = null;
    }
}