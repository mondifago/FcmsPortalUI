@page "/curriculum"
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortalUI.Services
@using FcmsPortal 
@inject ISchoolDataService SchoolDataService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>School Curriculum</PageTitle>

<div class="container-fluid mt-3">
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <h1>School Curriculum</h1>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-3">
        <div class="col-md-4">
            <label class="form-label">Education Level</label>
            <InputSelect class="form-select" @bind-Value="selectedEducationLevel" @bind-Value:after="OnEducationLevelChanged">
                <option value="@EducationLevel.None">-- Select Education Level --</option>
                @foreach (var level in Enum.GetValues(typeof(EducationLevel)).Cast<EducationLevel>().Where(l => l != EducationLevel.None))
                {
                    <option value="@level">@level</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-4">
            <label class="form-label">Class Level</label>
            <select class="form-select" @bind="selectedClassLevel" @bind:after="OnClassLevelChanged" disabled="@(selectedEducationLevel == EducationLevel.None)">
                <option value="@ClassLevel.None">-- Select Class Level --</option>
                @foreach (var level in availableClassLevels)
                {
                    <option value="@level">@level</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label class="form-label">Semester</label>
            <select class="form-select" @bind="selectedSemester" @bind:after="OnSemesterChanged" disabled="@(selectedClassLevel == ClassLevel.None)">
                <option value="">-- Select Semester (optional) --</option>
                @foreach (var semester in Enum.GetValues(typeof(Semester)).Cast<Semester>())
                {
                    <option value="@semester">@semester</option>
                }
            </select>
        </div>
    </div>

<!-- Curriculum Display -->
@if (filteredCurriculum.Any())
{
    <div class="curriculum-print">
        <div class="row mb-4">
            <div class="col-6">
                <h5>Academic Year: @filteredCurriculum.First().AcademicYear</h5>
                <h5>Semester: @(selectedSemester?.ToString() ?? "All Semesters")</h5>
            </div>
            <div class="col-6 text-end">
                <h5>Education Level: @selectedEducationLevel</h5>
                <h5>Class Level: @selectedClassLevel</h5>
            </div>
        </div>
        
        <hr />
        
        @foreach (var curriculum in filteredCurriculum)
        {
            @foreach (var semester in curriculum.Semesters)
            {
                @if (!selectedSemester.HasValue || semester.Semester == selectedSemester)
                {
                    <h5 class="text-primary mb-3">@semester.Semester Semester</h5>
                    
                    @foreach (var session in semester.ClassSessions)
                    {
                        <div class="curriculum-session mb-5">
                            <div class="row">
                                <div class="col-8">
                                    <p class="fw-bold mb-1">Course: @session.Course</p>
                                    <p class="fw-bold mb-1">Topic: @session.Topic</p>
                                    <p class="mb-1">Description: @session.Description</p>
                                </div>
                                    @{
                                        var schedule = GetScheduleForSession(session.Id);
                                        var duration = schedule?.Duration.TotalMinutes.ToString("0") ?? "N/A";
                                    }
                                <div class="col-4 text-end">
                                    <p class="fw-bold">Class Duration: @duration min</p>
                                </div>
                            </div>
                            
                            <div class="mt-3">
                                <p class="fw-bold">Lesson Plan</p>
                                <div class="lesson-plan-box">
                                    @if (string.IsNullOrEmpty(session.LessonPlan))
                                    {
                                        <p class="text-muted text-center py-5">No lesson plan available</p>
                                    }
                                    else
                                    {
                                        @((MarkupString)session.LessonPlan)
                                    }
                                </div>
                            </div>
                            
                            <hr class="mt-4" />
                        </div>
                    }
                }
            }
        }
    </div>
    
    <div class="d-print-none mt-4">
        <button class="btn btn-primary" @onclick="PrintCurriculum">
            <i class="fa fa-print me-2"></i> Print Curriculum
        </button>
    </div>
}
else if (selectedClassLevel != ClassLevel.None)
{
    <div class="alert alert-info">
        <i class="fa fa-info-circle me-2"></i> No curriculum found for the selected combination.
    </div>
}
</div>


@code {
    private EducationLevel selectedEducationLevel = EducationLevel.None;
    private ClassLevel selectedClassLevel = ClassLevel.None;
    private Semester? selectedSemester = null;
    private List<ClassLevel> availableClassLevels = new();
    private List<FcmsPortal.Models.Curriculum> allCurriculum = new();
    private List<FcmsPortal.Models.Curriculum> filteredCurriculum = new();
    private List<ScheduleEntry> allSchedules = new();

    protected override void OnInitialized()
    {
        allSchedules = SchoolDataService.GetAllSchedules();
        allCurriculum = SchoolDataService.GetFullCurriculum();
        availableClassLevels = LogicMethods.GetAvailableClassLevels(selectedEducationLevel);
    }

    private ScheduleEntry? GetScheduleForSession(int sessionId)
    {
        return allSchedules.FirstOrDefault(s => s.ClassSession?.Id == sessionId);
    }

    private async Task OnEducationLevelChanged()
    {
        selectedClassLevel = ClassLevel.None;
        selectedSemester = null;

        availableClassLevels = LogicMethods.GetAvailableClassLevels(selectedEducationLevel);
        filteredCurriculum.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private void OnClassLevelChanged()
    {
        selectedSemester = null;
        TryFilterCurriculum();
    }

    private void OnSemesterChanged()
    {
        TryFilterCurriculum();
    }

    private void TryFilterCurriculum()
    {
        if (selectedEducationLevel != EducationLevel.None && selectedClassLevel != ClassLevel.None)
        {
            filteredCurriculum = SchoolDataService.FilterCurriculum(
                allCurriculum,
                selectedEducationLevel,
                selectedClassLevel,
                selectedSemester
            );
        }
        else
        {
            filteredCurriculum.Clear();
        }
    }

    private async Task PrintCurriculum()
    {
        await JSRuntime.InvokeVoidAsync("window.print");
    }
}
