@page "/testimonial/{studentId:int}"
@using FcmsPortal.Models
@using FcmsPortalUI.Services
@using FcmsPortal.Enums
@using FcmsPortal.Constants
@using FcmsPortalUI.Components.Pages.Shared
@inject ISchoolDataService SchoolDataService
@inject IJSRuntime JSRuntime

<PageTitle>Student Testimonial</PageTitle>

<div class="container-fluid">
    @if (student != null && guardian != null)
    {
        <div id="testimonial-content">
            <div class="card">
                <div class="card-header text-center bg-primary text-white">
                    <h3 class="mb-0">Student Testimonial</h3>
                    <p class="mb-0">@SchoolDataService.GetSchool().Name</p>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 text-center mb-4">
                            <div class="card-body text-center">
                                <ProfileThumbnailDetail Person="student.Person" />
                            </div>

                        </div>

                        <!-- Student Information -->
                        <div class="col-md-9">
                            <div class="row">
                                <div class="col-md-6">
                                    <h5 class="text-primary mb-3">Student Information</h5>
                                    <p><strong>Full Name:</strong> @Util.GetFullName(student.Person)</p>
                                    <p><strong>Date of Birth:</strong> @student.Person.DateOfBirth.ToString("MMMM d, yyyy")</p>
                                    <p><strong>State of Origin:</strong> @student.Person.StateOfOrigin</p>
                                    <p><strong>LGA of Origin:</strong> @student.Person.LgaOfOrigin</p>
                                    <p><strong>Age at Graduation:</strong> @student.Person.Age years</p>

                                </div>
                                <div class="col-md-6">
                                    <h5 class="text-primary mb-3">Academic Details</h5>
                                    <p><strong>Enrollment Date:</strong> @student.Person.DateOfEnrollment.ToString("MMMM d, yyyy")</p>
                                    <p><strong>Enrollment Class Level:</strong> @GetEnrollmentClassLevel()</p>
                                    <p><strong>Enrollment Duration:</strong> @CalculateEnrollmentDuration()</p>
                                    <p><strong>Graduation Class:</strong> @student.Person.ClassLevel</p>
                                    <p><strong>Graduation Academic Year:</strong> @GetGraduationAcademicYear()</p>
                                    <p><strong>Graduation Date:</strong> @GetGraduationDate()</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <hr />

                    <!-- Guardian Information -->
                    <div class="row">
                        <div class="col-12">
                            <h5 class="text-primary mb-3">Guardian Information</h5>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Guardian Name:</strong> @Util.GetFullName(guardian.Person)</p>
                            <p><strong>Relationship:</strong> @guardian.RelationshipToStudent</p>
                            <p><strong>Occupation:</strong> @guardian.Occupation</p>
                            <p><strong>Email:</strong> @guardian.Person.Email</p>
                            <p><strong>Phone Number:</strong> @guardian.Person.PhoneNumber</p>
                        </div>
                        <div class="col-md-6">
                            <!-- Replace the guardian address section -->
                            @if (guardian.Person.Address != null)
                            {
                                <p>
                                    <strong>Guardian Address:</strong><br />
                                    @guardian.Person.Address.Street, @guardian.Person.Address.City<br />
                                    @guardian.Person.Address.State, @guardian.Person.Address.Country
                                    @if (!string.IsNullOrEmpty(guardian.Person.Address.PostalCode))
                                    {
                                        <br />
                                        @guardian.Person.Address.PostalCode
                                    }
                                </p>
                            }
                        </div>
                    </div>

                    <hr />

                    <!-- Principal Remark -->
                    <div class="row">
                        <div class="col-12">
                            <h5 class="text-primary mb-3">Principal Remark</h5>
                            <div class="form-group">
                                <textarea class="form-control" rows="5" @bind="principalRemark"
                                          placeholder="Principal's remark..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-center d-print-none">
                    <button class="btn btn-primary" @onclick="PrintTestimonial">
                        <i class="fa fa-print"></i> Print Testimonial
                    </button>
                    <a href="/archive" class="btn btn-secondary ms-2">
                        <i class="fa fa-arrow-left"></i> Back to Archive
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body text-center">
                <i class="fa fa-user-times fa-3x text-muted mb-3"></i>
                <h4>Student Not Found</h4>
                <p class="text-muted">The requested student could not be found in the archive.</p>
                <a href="/archive" class="btn btn-primary">
                    <i class="fa fa-arrow-left"></i> Back to Archive
                </a>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int StudentId { get; set; }

    private Student? student;
    private Guardian? guardian;
    private string principalRemark = "";

    protected override void OnInitialized()
    {
        LoadStudentData();
    }

    private void LoadStudentData()
    {
        var archivedStudents = SchoolDataService.GetArchivedStudents();
        student = archivedStudents.FirstOrDefault(s => s.Id == StudentId);

        if (student != null)
        {
            guardian = SchoolDataService.GetGuardianById(student.GuardianId);
        }
    }

    private string GetEnrollmentClassLevel()
    {
        if (student == null) return "N/A";

        var earliestLearningPath = SchoolDataService.GetAllLearningPaths()
            .Where(lp => lp.Students.Any(s => s.Id == student.Id))
            .OrderBy(lp => lp.AcademicYearStart)
            .ThenBy(lp => lp.Semester)
            .FirstOrDefault();

        return earliestLearningPath?.ClassLevel.ToString() ?? "N/A";
    }

    private string CalculateEnrollmentDuration()
    {
        if (student?.ArchivedDate.HasValue == true)
        {
            var duration = student.ArchivedDate.Value - student.Person.DateOfEnrollment;
            var years = Math.Round((double)duration.Days / FcmsConstants.DAYS_IN_YEAR, 1);

            return $"{years} years";
        }
        return "N/A";
    }

    private string GetGraduationAcademicYear()
    {
        if (student == null) return "N/A";

        var graduationLearningPath = SchoolDataService.GetAllLearningPaths()
            .FirstOrDefault(lp =>
                lp.EducationLevel == EducationLevel.SeniorCollege &&
                lp.ClassLevel == ClassLevel.SC_3 &&
                lp.Semester == Semester.Third &&
                lp.Students.Any(s => s.Id == student.Id));

        return graduationLearningPath?.AcademicYear ?? "N/A";
    }


    private string GetGraduationDate()
    {
        return student?.ArchivedDate?.ToString("MMMM d, yyyy") ?? "N/A";
    }

    private async Task PrintTestimonial()
    {
        await JSRuntime.InvokeVoidAsync("window.print");
    }
}