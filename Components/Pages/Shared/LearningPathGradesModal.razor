@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Constants
@using FcmsPortal.Services
@using FcmsPortal
@using FcmsPortalUI.Services
@using System.ComponentModel.DataAnnotations
@inject ISchoolDataService SchoolDataService

<div class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    Grade Management - @Util.GetLearningPathName(LearningPath)
                </h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Course Grade Weight Configuration Section -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="fa fa-cog"></i> Course Grade Weight Configuration</h6>
                    </div>
                    <div class="card-body">
                        <EditForm Model="configModel" OnValidSubmit="SaveCourseConfiguration">
                            <DataAnnotationsValidator />

                            <div class="row">
                                <div class="col-md-3">
                                    <label class="form-label">Select Course</label>
                                    <select class="form-select" @bind="selectedCourse" @bind:after="OnCourseSelectionChanged">
                                        <option value="">-- Select Course --</option>
                                        @foreach (var course in allCourses)
                                        {
                                            <option value="@course">@course</option>
                                        }
                                    </select>

                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Homework Weight (%)</label>
                                    <InputNumber @bind-Value="configModel.HomeworkWeightPercentage" 
                                               class="form-control" min="0" max="100" />
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Quiz Weight (%)</label>
                                    <InputNumber @bind-Value="configModel.QuizWeightPercentage" 
                                               class="form-control" min="0" max="100" />
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Exam Weight (%)</label>
                                    <InputNumber @bind-Value="configModel.FinalExamWeightPercentage" 
                                               class="form-control" min="0" max="100" />
                                </div>
                            </div>

                            <div class="row mt-3">
                                <div class="col-md-6">
                                    <div class="alert @(GetTotal() == 100 ? "alert-success" : "alert-warning")">
                                        <strong>Total: @GetTotal().ToString("F1")%</strong>
                                        @if (GetTotal() != 100)
                                        {
                                            <span> - Must equal 100%</span>
                                        }
                                    </div>
                                </div>
                                <div class="col-md-6 text-end">
                                    <button type="submit" class="btn btn-success" disabled="@(!IsConfigurationValid())">
                                        <i class="fa fa-save"></i> Save Configuration
                                    </button>
                                </div>
                            </div>

                            <ValidationSummary />
                        </EditForm>
                    </div>
                </div>

                <!-- Grade Recording Section -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="fa fa-clipboard-list"></i> Record Grades</h6>
                    </div>
                    <div class="card-body">
                        @if (!GetConfiguredCourses().Any())
                        {
                            <div class="alert alert-info">
                                <i class="fa fa-info-circle"></i>
                                Configure at least one course above to start recording grades.
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Course</th>
                                            <th>Grade Weights</th>
                                            <th>Grade Counts</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var config in GetConfiguredCourses())
                                        {
                                            <tr>
                                                <td>
                                                    <strong>@config.Course</strong>
                                                </td>
                                                <td>
                                                    <small class="text-muted">
                                                        HW: @config.HomeworkWeightPercentage% |
                                                        Quiz: @config.QuizWeightPercentage% |
                                                        Exam: @config.FinalExamWeightPercentage%
                                                    </small>
                                                </td>
                                                <td>
                                                    <small class="text-muted">
                                                        @GetGradeCountsText(config.Course)
                                                    </small>
                                                </td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-primary" @onclick="() => ShowRecordGradeModal(config.Course)">
                                                            <i class="fa fa-plus"></i> Add Grade
                                                        </button>
                                                        <button class="btn btn-info" @onclick="() => ViewCourseGrades(config.Course)">
                                                            <i class="fa fa-eye"></i> View All
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>

                <!-- Current Grades Overview -->
                @if (GetConfiguredCourses().Any())
                {
                    <div class="card mt-4">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fa fa-chart-bar"></i> Current Standings</h6>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Student</th>
                                            @foreach (var config in GetConfiguredCourses())
                                            {
                                                <th class="text-center">@config.Course</th>
                                            }
                                            <th class="text-center">Overall</th>
                                            <th class="text-center">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var student in LearningPath.Students.OrderBy(s => s.Person.LastName))
                                        {
                                            <tr>
                                                <td><strong>@student.Person.FirstName @student.Person.LastName</strong></td>
                                                @foreach (var config in GetConfiguredCourses())
                                                {
                                                    var courseGrade = GetStudentCourseGrade(student, config.Course);
                                                    <td class="text-center">
                                                        @if (courseGrade != null)
                                                        {
                                                            <span class="badge bg-@GetGradeColorClass(courseGrade.TotalGrade)">
                                                                @courseGrade.TotalGrade.ToString("F1")%
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                }
                                                <td class="text-center">
                                                    <strong class="text-primary">
                                                        @LogicMethods.CalculateSemesterOverallGrade(student, LearningPath).ToString("F1")%
                                                    </strong>
                                                </td>
                                                <td class="text-center">
                                                    <button class="btn btn-sm btn-primary" @onclick="() => ShowStudentGradeDetails(student)">
                                                         Details
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

<RecordGradeModal IsVisible="showRecordGradeModal"
                  LearningPath="LearningPath"
                  Course="@selectedCourse"
                  OnSave="HandleGradeSaved"
                  OnClose="() => showRecordGradeModal = false" />

<StudentGradeDetailsModal IsVisible="showStudentDetailsModal"
                          Student="selectedStudent"
                          LearningPath="LearningPath"
                          OnClose="CloseStudentDetailsModal" />

<CourseGradeDetailsModal IsVisible="showCourseGradeDetailsModal"
                    LearningPath="LearningPath"
                    Course="@selectedCourse"
                    OnClose="() => { showCourseGradeDetailsModal = false; LearningPath = SchoolDataService.GetLearningPathById(LearningPath.Id); StateHasChanged(); }" />

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public LearningPath LearningPath { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private List<string> allCourses = new();
    private CourseGradingConfiguration configModel = new();
    private string selectedCourse = "";
    private bool showRecordGradeModal = false;
    private bool showStudentDetailsModal = false;
    private bool showCourseGradeDetailsModal = false;
    private Student selectedStudent = null;
  

    protected override void OnParametersSet()
    {
        if (IsVisible && LearningPath != null)
        {
            allCourses = CourseDefaults.GetCourseNames(LearningPath.EducationLevel);
            LoadExistingConfiguration();
        }
    }

    private void LoadExistingConfiguration()
    {
        configModel = new CourseGradingConfiguration();
    }

    private void OnCourseSelectionChanged()
    {
        LoadCourseWeights(selectedCourse);
        StateHasChanged();
    }


    private void LoadCourseWeights(string course)
    {
        if (string.IsNullOrEmpty(course)) return;

        var existingConfig = SchoolDataService.GetCourseGradingConfiguration(LearningPath.Id, course);
        if (existingConfig != null)
        {
            configModel.HomeworkWeightPercentage = existingConfig.HomeworkWeightPercentage;
            configModel.QuizWeightPercentage = existingConfig.QuizWeightPercentage;
            configModel.FinalExamWeightPercentage = existingConfig.FinalExamWeightPercentage;
        }
        else
        {
            configModel.HomeworkWeightPercentage = 0;
            configModel.QuizWeightPercentage = 40;
            configModel.FinalExamWeightPercentage = 60;
        }
    }

    private double GetTotal()
    {
        return configModel.HomeworkWeightPercentage + configModel.QuizWeightPercentage + configModel.FinalExamWeightPercentage;
    }

    private bool IsConfigurationValid()
    {
        return !string.IsNullOrEmpty(selectedCourse) &&
               Math.Abs(GetTotal() - FcmsConstants.TOTAL_SCORE) < 0.01;
    }

    private void SaveCourseConfiguration()
    {
        if (!IsConfigurationValid()) return;

        configModel.Course = selectedCourse;
        configModel.LearningPathId = LearningPath.Id;
        SchoolDataService.SaveCourseGradingConfiguration(configModel);
        
        configModel = new CourseGradingConfiguration();
        selectedCourse = "";
        StateHasChanged();
    }

    private List<CourseGradingConfiguration> GetConfiguredCourses()
    {
        return SchoolDataService.GetAllCourseGradingConfigurations(LearningPath.Id);
    }

    private void ShowRecordGradeModal(string course)
    {
        selectedCourse = course;
        showRecordGradeModal = true;
        StateHasChanged();
    }

    private void ViewCourseGrades(string course)
    {
        selectedCourse = course;
        showCourseGradeDetailsModal = true;
        StateHasChanged();
    }

    private void HandleGradeSaved()
    {
        showRecordGradeModal = false;
        LearningPath = SchoolDataService.GetLearningPathById(LearningPath.Id);
        StateHasChanged();
    }

    private string GetGradeCountsText(string course)
    {
        var allTestGrades = LearningPath.Students
            .SelectMany(s => s.CourseGrades
                .Where(cg => cg.Course == course && cg.LearningPathId == LearningPath.Id)
                .SelectMany(cg => cg.TestGrades))
            .ToList();

        var homeworkCount = allTestGrades
            .Where(tg => tg.GradeType == GradeType.Homework)
            .GroupBy(tg => tg.Date.Date)
            .Count();

        var quizCount = allTestGrades
            .Where(tg => tg.GradeType == GradeType.Quiz)
            .GroupBy(tg => tg.Date.Date)
            .Count();

        var examCount = allTestGrades
            .Where(tg => tg.GradeType == GradeType.FinalExam)
            .GroupBy(tg => tg.Date.Date)
            .Count();

        return $"HW: {homeworkCount} | Quiz: {quizCount} | Exam: {examCount}";
    }

    private CourseGrade GetStudentCourseGrade(Student student, string course)
    {
        return student.CourseGrades.FirstOrDefault(cg => 
            cg.Course == course && cg.LearningPathId == LearningPath.Id);
    }

    private string GetGradeColorClass(double totalGrade)
    {
        return totalGrade >= FcmsConstants.A_GRADE_MIN ? "success" : 
               totalGrade >= FcmsConstants.B_GRADE_MIN ? "warning" : "danger";
    }

    private void ShowStudentGradeDetails(Student student)
    {
        selectedStudent = student;
        showStudentDetailsModal = true;
        StateHasChanged();
    }

    private void CloseStudentDetailsModal()
    {
        showStudentDetailsModal = false;
        selectedStudent = null;
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }
}