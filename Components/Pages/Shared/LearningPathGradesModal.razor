@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Constants
@using FcmsPortal.Services
@using FcmsPortalUI.Services
@using System.ComponentModel.DataAnnotations
@inject ISchoolDataService SchoolDataService

<div class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    Grade Management - @Util.GetLearningPathName(LearningPath)
                </h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="fa fa-cog"></i> Course Grade Weight Configuration</h6>
                    </div>
                    <div class="card-body">
                        <EditForm Model="configModel" OnValidSubmit="SaveCourseConfiguration">
                            <DataAnnotationsValidator />

                            <div class="row">
                                <div class="col-md-3">
                                    <label class="form-label">Select Course</label>
                                    <select class="form-select" @bind="selectedCourse">
                                        <option value="">-- Select Course --</option>
                                        @foreach (var course in allCourses)
                                        {
                                            <option value="@course">@course</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">Homework %</label>
                                    <InputNumber class="form-control" @bind-Value="configModel.HomeworkWeightPercentage" />
                                    <ValidationMessage For="@(() => configModel.HomeworkWeightPercentage)" />
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">Quiz %</label>
                                    <InputNumber class="form-control" @bind-Value="configModel.QuizWeightPercentage" />
                                    <ValidationMessage For="@(() => configModel.QuizWeightPercentage)" />
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">Exam %</label>
                                    <InputNumber class="form-control" @bind-Value="configModel.FinalExamWeightPercentage" />
                                    <ValidationMessage For="@(() => configModel.FinalExamWeightPercentage)" />
                                </div>
                                <div class="col-md-1">
                                    <label class="form-label">Total</label>
                                    <input class="form-control" value="@GetTotal()" readonly />
                                </div>
                                <div class="col-md-2 d-flex align-items-end">
                                    <button type="submit" class="btn btn-warning w-100" disabled="@(!IsConfigurationValid())">
                                        <i class="fa fa-save"></i> Done
                                    </button>
                                </div>
                            </div>

                            @if (GetTotal() != 100 && !string.IsNullOrEmpty(selectedCourse))
                            {
                                <div class="alert alert-warning mt-2 mb-0">
                                    <small><i class="fa fa-exclamation-triangle"></i> Total must equal @FcmsConstants.TOTAL_SCORE%</small>
                                </div>
                            }
                        </EditForm>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="fa fa-list"></i> Configured Courses & Grade Recording</h6>
                    </div>
                    <div class="card-body">
                        @if (!GetConfiguredCourses().Any())
                        {
                            <div class="alert alert-info">
                                <i class="fa fa-info-circle"></i> No courses configured yet. Configure at least one course above to start recording grades.
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Course</th>
                                            <th>Grade Weights</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var config in GetConfiguredCourses())
                                        {
                                            <tr>
                                                <td>
                                                    <strong>@config.Course</strong>
                                                </td>
                                                <td>
                                                    <small class="text-muted">
                                                        HW: @config.HomeworkWeightPercentage% |
                                                        Quiz: @config.QuizWeightPercentage% |
                                                        Exam: @config.FinalExamWeightPercentage%
                                                    </small>
                                                </td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-primary" @onclick="() => ShowRecordGradeModal(config.Course)">
                                                            <i class="fa fa-plus"></i> Add Grade
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

<!-- Child Modal -->
<RecordGradeModal IsVisible="showRecordGradeModal"
                  LearningPath="LearningPath"
                  Course="selectedCourse"
                  OnSave="HandleGradeSaved"
                  OnClose="() => showRecordGradeModal = false" />

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public LearningPath LearningPath { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private List<string> allCourses = new();
    private CourseGradingConfiguration configModel = new();
    private string selectedCourse = "";
    private bool showRecordGradeModal = false;

    protected override void OnParametersSet()
    {
        if (IsVisible && LearningPath != null)
        {
            allCourses = CourseDefaults.GetCourseNames(LearningPath.EducationLevel);
            LoadExistingConfiguration();
        }
    }

    private void LoadExistingConfiguration()
    {
        var currentSelection = selectedCourse;
        configModel = new CourseGradingConfiguration();

        if (!string.IsNullOrEmpty(currentSelection) && allCourses.Contains(currentSelection))
        {
            selectedCourse = currentSelection;
            LoadCourseWeights(currentSelection);
        }
    }

    private void LoadCourseWeights(string course)
    {
        var existingConfig = SchoolDataService.GetCourseGradingConfiguration(LearningPath.Id, course);
        if (existingConfig != null)
        {
            configModel.HomeworkWeightPercentage = existingConfig.HomeworkWeightPercentage;
            configModel.QuizWeightPercentage = existingConfig.QuizWeightPercentage;
            configModel.FinalExamWeightPercentage = existingConfig.FinalExamWeightPercentage;
        }
    }

    private double GetTotal()
    {
        return configModel.HomeworkWeightPercentage + configModel.QuizWeightPercentage + configModel.FinalExamWeightPercentage;
    }

    private bool IsConfigurationValid()
    {
        return !string.IsNullOrEmpty(selectedCourse) &&
               Math.Abs(GetTotal() - FcmsConstants.TOTAL_SCORE) < 0.01;
    }

    private void SaveCourseConfiguration()
    {
        if (!IsConfigurationValid()) return;

        configModel.Course = selectedCourse;
        configModel.LearningPathId = LearningPath.Id;

        SchoolDataService.SaveCourseGradingConfiguration(configModel);

        selectedCourse = "";
        configModel = new CourseGradingConfiguration();
        StateHasChanged();
    }

    private List<CourseGradingConfiguration> GetConfiguredCourses()
    {
        return SchoolDataService.GetAllCourseGradingConfigurations(LearningPath.Id);
    }

    private void ShowRecordGradeModal(string course)
    {
        selectedCourse = course;
        showRecordGradeModal = true;
    }

    private void HandleGradeSaved()
    {
        showRecordGradeModal = false;
        StateHasChanged();
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }
}