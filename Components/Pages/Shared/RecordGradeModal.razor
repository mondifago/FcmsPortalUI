@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Constants
@using FcmsPortal
@using System.ComponentModel.DataAnnotations
@inject ISchoolDataService SchoolDataService

<div class="modal fade show" style="display: @(IsVisible ? "block" : "none");" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Record Grades - @Course</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (LearningPath == null || string.IsNullOrEmpty(Course))
                {
                    <p class="text-muted">No learning path or course provided.</p>
                }
                else
                {
                    <EditForm Model="@this" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <!-- Assessment Details -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label for="gradeType" class="form-label">Grade Type</label>
                                <InputSelect id="gradeType" @bind-Value="selectedGradeType" class="form-select">
                                    @foreach (var gradeType in Enum.GetValues<GradeType>())
                                    {
                                        <option value="@gradeType">@gradeType</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-6">
                                <label for="maxScore" class="form-label">Maximum Score</label>
                                <InputNumber id="maxScore" @bind-Value="maxScore" 
                                           class="form-control" placeholder="@FcmsConstants.TOTAL_SCORE" 
                                           @onchange="UpdateMaxScores" />
                            </div>
                        </div>

                        <!-- Student Scores -->
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width: 40%;">Student</th>
                                        <th style="width: 20%;">Raw Score</th>
                                        <th style="width: 20%;">Percentage</th>
                                        <th style="width: 20%;">Grade</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 0; i < studentTestGrades.Count; i++)
                                    {
                                        var testGrade = studentTestGrades[i];
                                        var student = LearningPath.Students.OrderBy(s => s.Person.LastName).ToList()[i];
                                        <tr>
                                            <td>
                                                <strong>@student.Person.FirstName @student.Person.LastName</strong>
                                            </td>
                                            <td>
                                                <InputNumber class="form-control" 
                                                           @bind-Value="testGrade.Score" 
                                                           @onchange="@(() => CalculatePercentage(testGrade))"
                                                           placeholder="0" />
                                            </td>
                                            <td>
                                                <span class="@GetScoreColorClass(GetPercentage(testGrade))">
                                                    @GetPercentage(testGrade).ToString("F1")%
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge bg-@GetGradeColorClass(GetPercentage(testGrade))">
                                                    @Util.GetGradeCode(GetPercentage(testGrade))
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Statistics -->
                        @if (GetValidScoreCount() > 0)
                        {
                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <div class="card bg-light">
                                        <div class="card-body py-2">
                                            <small class="text-muted">Assessment Statistics:</small>
                                            <div class="d-flex justify-content-around">
                                                <span><strong>Submissions:</strong> @GetValidScoreCount()/@studentTestGrades.Count</span>
                                                <span><strong>Highest:</strong> @GetHighestScore().ToString("F1")%</span>
                                                <span><strong>Lowest:</strong> @GetLowestScore().ToString("F1")%</span>
                                                <span><strong>Average:</strong> @GetAverageScore().ToString("F1")%</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="Close">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@(!IsFormValid())">
                                <i class="fa fa-save"></i> Save Grades
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public LearningPath LearningPath { get; set; }
    [Parameter] public string Course { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private GradeType selectedGradeType = GradeType.Quiz;
    private List<TestGrade> studentTestGrades = new();
    
    [Range(1, 1000, ErrorMessage = "Maximum score must be greater than 0")]
    private double maxScore = FcmsConstants.TOTAL_SCORE;

    protected override void OnParametersSet()
    {
        if (IsVisible && LearningPath != null && !string.IsNullOrEmpty(Course))
        {
            LoadData();
        }
    }

    private void LoadData()
    {
        maxScore = FcmsConstants.TOTAL_SCORE;
        var currentTeacher = GetCurrentTeacher();
    
        studentTestGrades.Clear();
    
        foreach (var student in LearningPath.Students.OrderBy(s => s.Person.LastName))
        {
            var courseGrade = student.CourseGrades.FirstOrDefault(cg => 
                cg.Course == Course && cg.LearningPathId == LearningPath.Id);
        
            if (courseGrade == null)
            {
                courseGrade = new CourseGrade
                {
                    Course = Course,
                    StudentId = student.Id,
                    LearningPathId = LearningPath.Id,
                    TestGrades = new List<TestGrade>()
                };
                student.CourseGrades.Add(courseGrade);
            }

            var testGrade = new TestGrade
            {
                Course = Course,
                GradeType = selectedGradeType,
                Teacher = currentTeacher,
                Date = DateTime.Now,
                Semester = LearningPath.Semester,
                Score = 0
            };
        
            studentTestGrades.Add(testGrade);
        }
    }

    private Student GetStudentForTestGrade(TestGrade testGrade)
    {
        var index = studentTestGrades.IndexOf(testGrade);
        return LearningPath.Students.OrderBy(s => s.Person.LastName).ToList()[index];
    }

    private void UpdateMaxScores()
    {
        StateHasChanged();
    }

    private void CalculatePercentage(TestGrade testGrade)
    {
        StateHasChanged();
    }

    private double GetPercentage(TestGrade testGrade)
    {
        return maxScore > 0 ? 
            Math.Round((testGrade.Score / maxScore) * FcmsConstants.TOTAL_SCORE, FcmsConstants.GRADE_ROUNDING_DIGIT) : 0;
    }

    private string GetScoreColorClass(double percentage)
    {
        return percentage >= FcmsConstants.A_GRADE_MIN ? "text-success" : 
               percentage >= FcmsConstants.B_GRADE_MIN ? "text-warning" : "text-danger";
    }

    private string GetGradeColorClass(double percentage)
    {
        return percentage >= FcmsConstants.A_GRADE_MIN ? "success" : 
               percentage >= FcmsConstants.B_GRADE_MIN ? "warning" : "danger";
    }

    private double GetHighestScore()
    {
        var validScores = studentTestGrades.Where(tg => tg.Score > 0).Select(tg => GetPercentage(tg));
        return validScores.Any() ? validScores.Max() : 0;
    }

    private double GetLowestScore()
    {
        var validScores = studentTestGrades.Where(tg => tg.Score > 0).Select(tg => GetPercentage(tg));
        return validScores.Any() ? validScores.Min() : 0;
    }

    private double GetAverageScore()
    {
        var validScores = studentTestGrades.Where(tg => tg.Score > 0).Select(tg => GetPercentage(tg));
        return validScores.Any() ? Math.Round(validScores.Average(), FcmsConstants.GRADE_ROUNDING_DIGIT) : 0;
    }

    private int GetValidScoreCount()
    {
        return studentTestGrades.Count(tg => tg.Score > 0);
    }

    private bool IsFormValid()
    {
        return maxScore > 0;
    }

    private async Task HandleSubmit()
    {
        if (!IsFormValid()) return;

        for (int i = 0; i < studentTestGrades.Count; i++)
        {
            var testGrade = studentTestGrades[i];
            var student = LearningPath.Students.OrderBy(s => s.Person.LastName).ToList()[i];
            var finalScore = GetPercentage(testGrade);

            LogicMethods.AddTestGrade(
                student,
                Course,
                finalScore,
                selectedGradeType,
                testGrade.Teacher,
                LearningPath.Semester,
                ""
            );
        }

        await OnSave.InvokeAsync();
        Close();
    }

    private Staff GetCurrentTeacher()
    {
        return SchoolDataService.GetSchool().Staff.FirstOrDefault(s => s.JobRole == JobRole.Teacher);
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }
}