@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Constants
@using FcmsPortal
@using System.ComponentModel.DataAnnotations
@inject ISchoolDataService SchoolDataService

<div class="modal fade show" style="display: @(IsVisible ? "block" : "none");" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Record Grades - @Course</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (LearningPath == null || string.IsNullOrEmpty(Course))
                {
                    <p class="text-muted">No learning path or course provided.</p>
                }
                else
                {
                    <EditForm Model="@this" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label for="gradeType" class="form-label">Grade Type</label>
                                <InputSelect id="gradeType" @bind-Value="selectedGradeType" class="form-select">
                                    @foreach (var gradeType in Enum.GetValues<GradeType>())
                                    {
                                        <option value="@gradeType">@gradeType</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-6">
                                <label for="maxScore" class="form-label">Maximum Score</label>
                                <InputNumber id="maxScore" @bind-Value="maxScore"
                                             class="form-control" placeholder="@FcmsConstants.TOTAL_SCORE"
                                             @onchange="UpdateMaxScores" />
                            </div>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th>Student</th>
                                        <th>Score (/@maxScore)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 0; i < studentTestGrades.Count; i++)
                                    {
                                        var testGrade = studentTestGrades[i];
                                        var student = GetStudentForTestGrade(testGrade);
                                        var percentage = GetPercentage(testGrade);

                                        <tr>
                                            <td>
                                                <strong>@Util.GetFullName(student.Person)</strong>
                                            </td>
                                            <td>
                                                <InputNumber @bind-Value="testGrade.Score"
                                                             class="form-control"
                                                             @onchange="() => CalculatePercentage(testGrade)"
                                                             min="0" max="@maxScore" step="0.1" />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="d-flex justify-content-end mt-4">
                            <button type="button" class="btn btn-secondary me-2" @onclick="Close">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@(!IsFormValid())">
                                Save Grades
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public LearningPath LearningPath { get; set; }
    [Parameter] public string Course { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private GradeType selectedGradeType = GradeType.Quiz;
    private List<TestGrade> studentTestGrades = new();

    [Range(1, 1000, ErrorMessage = "Maximum score must be greater than 0")]
    private double maxScore = FcmsConstants.TOTAL_SCORE;

    protected override void OnParametersSet()
    {
        if (IsVisible && LearningPath != null && !string.IsNullOrEmpty(Course))
        {
            LoadData();
        }
    }

    private void LoadData()
    {
        maxScore = FcmsConstants.TOTAL_SCORE;
        var currentTeacher = GetCurrentTeacher();

        studentTestGrades.Clear();

        foreach (var student in LearningPath.Students.OrderBy(s => s.Person.LastName))
        {
            var testGrade = new TestGrade
            {
                GradeType = selectedGradeType,
                Teacher = currentTeacher,
                Date = DateTime.Now,
                Score = 0,
                TeacherRemark = ""
            };

            studentTestGrades.Add(testGrade);
        }
    }

    private Student GetStudentForTestGrade(TestGrade testGrade)
    {
        var index = studentTestGrades.IndexOf(testGrade);
        return LearningPath.Students.OrderBy(s => s.Person.LastName).ToList()[index];
    }

    private void UpdateMaxScores()
    {
        StateHasChanged();
    }

    private void CalculatePercentage(TestGrade testGrade)
    {
        StateHasChanged();
    }

    private double GetPercentage(TestGrade testGrade)
    {
        return maxScore > 0 ?
            Math.Round((testGrade.Score / maxScore) * FcmsConstants.TOTAL_SCORE, FcmsConstants.GRADE_ROUNDING_DIGIT) : 0;
    }

    

    private bool IsFormValid()
    {
        return maxScore > 0;
    }

    private async Task HandleSubmit()
    {
        if (!IsFormValid()) return;

        for (int i = 0; i < studentTestGrades.Count; i++)
        {
            var testGrade = studentTestGrades[i];
            var student = LearningPath.Students.OrderBy(s => s.Person.LastName).ToList()[i];
            var finalScore = GetPercentage(testGrade);

            if (testGrade.Score > 0)
            {
                LogicMethods.AddTestGrade(
                    student,
                    Course,
                    finalScore,
                    selectedGradeType,
                    testGrade.Teacher,
                    testGrade.TeacherRemark,
                    LearningPath
                );
            }
        }

        foreach (var student in LearningPath.Students)
        {
            var courseGrade = student.CourseGrades.FirstOrDefault(cg =>
                cg.Course == Course && cg.LearningPathId == LearningPath.Id);

            if (courseGrade != null && courseGrade.TestGrades.Any())
            {
                SchoolDataService.SaveCourseGrade(courseGrade);
            }
        }

        await OnSave.InvokeAsync();
        Close();
    }

    private Staff GetCurrentTeacher()
    {
        return SchoolDataService.GetSchool().Staff.FirstOrDefault(s => s.JobRole == JobRole.Teacher);
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }
}