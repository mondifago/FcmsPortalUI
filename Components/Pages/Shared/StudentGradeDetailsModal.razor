@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Constants
@using FcmsPortalUI.Services
@using FcmsPortal
@inject ISchoolDataService SchoolDataService

<div class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title d-flex align-items-center">
                    @if (Student?.Person != null)
                    {
                        <ProfileThumbnailList Person="Student.Person" />
                    }
                    <span>@(Student?.Person != null ? Util.GetFullName(Student.Person) : "Student") - Grade Report</span>
                </h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (Student != null && LearningPath != null)
                {
                    <!-- Student Overview -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fa fa-info-circle"></i> Student Overview</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Student ID:</strong> @Student.Id</p>
                                    <p><strong>Learning Path:</strong> @Util.GetLearningPathName(LearningPath)</p>
                                    <p><strong>Semester:</strong> @LearningPath.Semester</p>
                                </div>
                                <div class="col-md-6">
                                    <div class="text-center">
                                        <h4 class="text-primary">Semester Overall Grade</h4>
                                        <h2 class="text-success">@GetSemesterOverallGrade().ToString("F2")%</h2>
                                        @{
                                            var rank = GetStudentRank();
                                            if (rank > 0)
                                            {
                                                <span class="fs-4 fw-bold @Util.GetRankColorClass(rank)">
                                                    @Util.GetOrdinalNumber(rank)
                                                </span>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Course-by-Course Breakdown -->
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fa fa-books"></i> Course Breakdown</h6>
                        </div>
                        <div class="card-body">
                            @foreach (var course in GetStudentCourses())
                            {
                                var courseGrade = GetCourseGrade(course);
                                var config = GetCourseConfig(course);

                                <div class="card mb-3">
                                    <div class="card-header">
                                        <div class="row align-items-center">
                                            <div class="col">
                                                <h6 class="mb-0">@course</h6>
                                            </div>
                                            <div class="col-auto">
                                                <span class="badge bg-@Util.GetGradeColorClass(courseGrade?.TotalGrade ?? 0) fs-6">
                                                    @(courseGrade?.TotalGrade.ToString("F1") ?? "0.0")%
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        @if (courseGrade != null && courseGrade.TestGrades.Any())
                                        {
                                            <div class="row">
                                                <!-- Homework Section -->
                                                <div class="col-md-4">
                                                    <div class="card">
                                                        <div class="card-body text-center">
                                                            <h6 class="card-title text-muted">Homework</h6>
                                                            <h4 class="text-primary">@GetGradeAverage(courseGrade, GradeType.Homework)</h4>
                                                            <small class="text-muted">@GetGradeCount(courseGrade, GradeType.Homework) assignments</small>
                                                            @if (config != null)
                                                            {
                                                                <small class="text-success"><strong>Achieved: @GetWeightedContribution(courseGrade, GradeType.Homework, config.HomeworkWeightPercentage).ToString("F1")%</strong></small>
                                                                <small class="text-muted">Weight: @config.HomeworkWeightPercentage%</small>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Quiz Section -->
                                                <div class="col-md-4">
                                                    <div class="card">
                                                        <div class="card-body text-center">
                                                            <h6 class="card-title text-muted">Quiz</h6>
                                                            <h4 class="text-warning">@GetGradeAverage(courseGrade, GradeType.Quiz)</h4>
                                                            <small class="text-muted">@GetGradeCount(courseGrade, GradeType.Quiz) quizzes</small>
                                                            @if (config != null)
                                                            {
                                                                <small class="text-success"><strong>Achieved: @GetWeightedContribution(courseGrade, GradeType.Quiz, config.QuizWeightPercentage).ToString("F1")%</strong></small>
                                                                <small class="text-muted">Weight: @config.QuizWeightPercentage%</small>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Exam Section -->
                                                <div class="col-md-4">
                                                    <div class="card">
                                                        <div class="card-body text-center">
                                                            <h6 class="card-title text-muted">Exam</h6>
                                                            <h4 class="text-danger">@GetGradeAverage(courseGrade, GradeType.FinalExam)</h4>
                                                            <small class="text-muted">@GetGradeCount(courseGrade, GradeType.FinalExam) exams</small>
                                                            @if (config != null)
                                                            {
                                                                <small class="text-success"><strong>Achieved: @GetWeightedContribution(courseGrade, GradeType.FinalExam, config.FinalExamWeightPercentage).ToString("F1")%</strong></small>
                                                                <small class="text-muted">Weight: @config.FinalExamWeightPercentage%</small>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Individual Grade Details -->
                                            <div class="mt-3">
                                                <h6>Grade Details</h6>
                                                <div class="table-responsive">
                                                    <table class="table table-sm table-striped">
                                                        <thead>
                                                            <tr>
                                                                <th>Date</th>
                                                                <th>Type</th>
                                                                <th>Score</th>
                                                                <th>Teacher</th>
                                                                <th>Remarks</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var grade in courseGrade.TestGrades.OrderByDescending(g => g.Date))
                                                            {
                                                                <tr>
                                                                    <td>@grade.Date.ToString("MMM dd, yyyy")</td>
                                                                    <td>
                                                                        <span class="badge bg-secondary">
                                                                            @Util.GetGradeTypeName(grade.GradeType)
                                                                        </span>
                                                                    </td>
                                                                    <td>
                                                                        <span class="fw-bold @Util.GetGradeColorClass(grade.Score, useTextPrefix: true)">
                                                                            @grade.Score.ToString("F1")%
                                                                        </span>
                                                                    </td>
                                                                    <td>@grade.Teacher?.Person.FirstName @grade.Teacher?.Person.LastName</td>
                                                                    <td>@grade.TeacherRemark</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-info">
                                                <i class="fa fa-info-circle"></i>
                                                No grades recorded for this course yet.
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Summary Statistics -->
                    <div class="card mt-4">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fa fa-chart-bar"></i> Performance Summary</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="text-center">
                                        <h6 class="text-muted">Total Courses</h6>
                                        <h4>@GetStudentCourses().Count</h4>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center">
                                        <h6 class="text-muted">Position in Class</h6>
                                        <h4>@(GetStudentRank() > 0 ? Util.GetOrdinalNumber(GetStudentRank()) : "N/A")</h4>
                                        <h6 class="text-muted">out of @GetTotalStudentsInClass()</h6>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center">
                                        <h6 class="text-muted">Highest Course</h6>
                                        <h4 class="text-success">@GetHighestCourseGrade().ToString("F1")%</h4>
                                        <small class="text-muted">@GetHighestCourseName()</small>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center">
                                        <h6 class="text-muted">Lowest Course</h6>
                                        <h4 class="text-danger">@GetLowestCourseGrade().ToString("F1")%</h4>
                                        <small class="text-muted">@GetLowestCourseName()</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success">
                    <i class="fa fa-print"></i> Print Report
                </button>
                <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Student Student { get; set; } = new Student();
    [Parameter] public LearningPath LearningPath { get; set; } = new LearningPath();
    [Parameter] public EventCallback OnClose { get; set; }

    private List<string> GetStudentCourses()
    {
        return CourseDefaults.GetCourseNames(LearningPath.EducationLevel);
    }

    private CourseGrade? GetCourseGrade(string course)
    {
        return Student?.CourseGrades.FirstOrDefault(cg =>
            cg.Course == course && cg.LearningPathId == LearningPath?.Id);
    }

    private CourseGradingConfiguration? GetCourseConfig(string course)
    {
        return SchoolDataService.GetCourseGradingConfiguration(LearningPath?.Id ?? 0, course);
    }

    private string GetGradeAverage(CourseGrade courseGrade, GradeType gradeType)
    {
        var grades = courseGrade.TestGrades.Where(g => g.GradeType == gradeType).ToList();
        return grades.Any() ? grades.Average(g => g.Score).ToString("F1") : "N/A";
    }

    private int GetGradeCount(CourseGrade courseGrade, GradeType gradeType)
    {
        return courseGrade.TestGrades.Count(g => g.GradeType == gradeType);
    }

    private double GetSemesterOverallGrade()
    {
        return LogicMethods.CalculateSemesterOverallGrade(Student, LearningPath);
    }

    private int GetTotalGradeCount()
    {
        return Student?.CourseGrades
            .Where(cg => cg.LearningPathId == LearningPath?.Id)
            .Sum(cg => cg.TestGrades.Count) ?? 0;
    }

    private double GetHighestCourseGrade()
    {
        var (_, grade) = LogicMethods.GetHighestCourseGrade(Student, LearningPath.Id);
        return grade;
    }

    private double GetLowestCourseGrade()
    {
        var (_, grade) = LogicMethods.GetLowestCourseGrade(Student, LearningPath.Id);
        return grade;
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }

    private double GetWeightedContribution(CourseGrade courseGrade, GradeType gradeType, double weightPercentage)
    {
        return LogicMethods.CalculateWeightedContribution(courseGrade, gradeType, weightPercentage);
    }

    private int GetTotalStudentsInClass()
    {
        return LearningPath?.Students.Count ?? 0;
    }

    private string GetHighestCourseName()
    {
        var (courseName, _) = LogicMethods.GetHighestCourseGrade(Student, LearningPath.Id);
        return courseName;
    }

    private string GetLowestCourseName()
    {
        var (courseName, _) = LogicMethods.GetLowestCourseGrade(Student, LearningPath.Id);
        return courseName;
    }

    private int GetStudentRank()
    {
        if (LearningPath == null || Student == null) return 0;

        var rankedStudents = LogicMethods.RankStudentsBySemesterGrade(LearningPath);
        var position = rankedStudents.FindIndex(s => s.Student.Id == Student.Id) + 1;

        return position > 0 ? position : 0;
    }
}