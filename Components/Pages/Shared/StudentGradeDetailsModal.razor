@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal
@using FcmsPortalUI
@inject ISchoolDataService SchoolDataService

<div class="modal fade show" style="display: @(IsVisible ? "block" : "none");" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title">
                    Grade Details - @Student?.Person?.FirstName @Student?.Person?.LastName (@Course)
                </h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (Student == null || string.IsNullOrEmpty(Course))
                {
                    <p class="text-muted">No student or course provided.</p>
                }
                else
                {
                    <!-- Grade Summary Cards -->
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <div class="card text-center">
                                <div class="card-body">
                                    <h5 class="card-title text-muted">Homework Average</h5>
                                    <h3 class="text-primary">@GetGradeAverage(GradeType.Homework)</h3>
                                    <small class="text-muted">@GetGradeCount(GradeType.Homework) assessments</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card text-center">
                                <div class="card-body">
                                    <h5 class="card-title text-muted">Quiz Average</h5>
                                    <h3 class="text-warning">@GetGradeAverage(GradeType.Quiz)</h3>
                                    <small class="text-muted">@GetGradeCount(GradeType.Quiz) assessments</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card text-center">
                                <div class="card-body">
                                    <h5 class="card-title text-muted">Exam Average</h5>
                                    <h3 class="text-danger">@GetGradeAverage(GradeType.FinalExam)</h3>
                                    <small class="text-muted">@GetGradeCount(GradeType.FinalExam) assessments</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card text-center border-success">
                                <div class="card-body">
                                    <h5 class="card-title text-muted">Course Total</h5>
                                    <h3 class="text-success">@GetCourseTotal().ToString("F2")</h3>
                                    <span class="badge bg-@GetGradeColorClass(GetCourseTotal())">
                                        @Util.GetGradeCode(GetCourseTotal())
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Weight Breakdown -->
                    <div class="row mb-4">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">Grade Calculation Breakdown</h6>
                                </div>
                                <div class="card-body">
                                    @if (GetCourseConfig() != null)
                                    {
                                        var config = GetCourseConfig();
                                        var homeworkContribution = GetGradeAverageAsDouble(GradeType.Homework) * config.HomeworkWeightPercentage / 100;
                                        var quizContribution = GetGradeAverageAsDouble(GradeType.Quiz) * config.QuizWeightPercentage / 100;
                                        var examContribution = GetGradeAverageAsDouble(GradeType.FinalExam) * config.FinalExamWeightPercentage / 100;

                                        <div class="row">
                                            <div class="col-md-4">
                                                <small class="text-muted">Homework Contribution:</small><br>
                                                <strong>@GetGradeAverageAsDouble(GradeType.Homework).ToString("F1") × @config.HomeworkWeightPercentage% = @homeworkContribution.ToString("F2") points</strong>
                                            </div>
                                            <div class="col-md-4">
                                                <small class="text-muted">Quiz Contribution:</small><br>
                                                <strong>@GetGradeAverageAsDouble(GradeType.Quiz).ToString("F1") × @config.QuizWeightPercentage% = @quizContribution.ToString("F2") points</strong>
                                            </div>
                                            <div class="col-md-4">
                                                <small class="text-muted">Exam Contribution:</small><br>
                                                <strong>@GetGradeAverageAsDouble(GradeType.FinalExam).ToString("F1") × @config.FinalExamWeightPercentage% = @examContribution.ToString("F2") points</strong>
                                            </div>
                                        </div>
                                        <hr>
                                        <div class="text-center">
                                            <strong>Total: @homeworkContribution.ToString("F2") + @quizContribution.ToString("F2") + @examContribution.ToString("F2") = @GetCourseTotal().ToString("F2") points</strong>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-warning">
                                            <i class="fa fa-exclamation-triangle"></i> Grade configuration not found for this course.
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Detailed Grade History -->
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Grade History</h6>
                        </div>
                        <div class="card-body">
                            @if (!GetAllGrades().Any())
                            {
                                <div class="alert alert-info">
                                    <i class="fa fa-info-circle"></i> No grades recorded for this student in @Course yet.
                                </div>
                            }
                            else
                            {
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Date</th>
                                                <th>Type</th>
                                                <th>Score</th>
                                                <th>Teacher</th>
                                                <th>Remarks</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var grade in GetAllGrades().OrderByDescending(g => g.Date))
                                            {
                                                <tr>
                                                    <td>@grade.Date.ToString("MMM dd, yyyy")</td>
                                                    <td>
                                                        <span class="badge bg-@GetGradeTypeBadgeClass(grade.GradeType)">
                                                            @grade.GradeType
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <strong class="@GetScoreColorClass(grade.Score)">
                                                            @grade.Score.ToString("F1")
                                                        </strong>
                                                    </td>
                                                    <td>@grade.Teacher?.Person?.FirstName @grade.Teacher?.Person?.LastName</td>
                                                    <td>
                                                        @if (!string.IsNullOrWhiteSpace(grade.TeacherRemark))
                                                        {
                                                            <small class="text-muted">@grade.TeacherRemark</small>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">No remarks</span>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                                <!-- Grade Trend Chart Placeholder -->
                                <div class="mt-4">
                                    <h6>Performance Trend</h6>
                                    <div class="alert alert-light">
                                        <i class="fa fa-chart-line"></i> 
                                        <strong>Grade Trend:</strong> 
                                        @GetGradeTrend()
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Student Student { get; set; }
    [Parameter] public string Course { get; set; }
    [Parameter] public LearningPath LearningPath { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private CourseGrade GetStudentCourseGrade()
    {
        return Student?.CourseGrades.FirstOrDefault(cg => 
            cg.Course == Course && cg.LearningPathId == LearningPath?.Id);
    }

    private List<TestGrade> GetAllGrades()
    {
        return GetStudentCourseGrade()?.TestGrades ?? new List<TestGrade>();
    }

    private List<TestGrade> GetGradesByType(GradeType gradeType)
    {
        return GetAllGrades().Where(g => g.GradeType == gradeType).ToList();
    }

    private string GetGradeAverage(GradeType gradeType)
    {
        var grades = GetGradesByType(gradeType);
        return grades.Any() ? grades.Average(g => g.Score).ToString("F1") : "N/A";
    }

    private double GetGradeAverageAsDouble(GradeType gradeType)
    {
        var grades = GetGradesByType(gradeType);
        return grades.Any() ? grades.Average(g => g.Score) : 0;
    }

    private int GetGradeCount(GradeType gradeType)
    {
        return GetGradesByType(gradeType).Count;
    }

    private double GetCourseTotal()
    {
        return LearningPath != null ? LogicMethods.ComputeTotalGrade(Student, Course, LearningPath) : 0;
    }

    private CourseGradingConfiguration GetCourseConfig()
    {
        return LearningPath != null ? SchoolDataService.GetCourseGradingConfiguration(LearningPath.Id, Course) : null;
    }

    private string GetGradeColorClass(double grade)
    {
        return grade >= 70 ? "success" : grade >= 60 ? "warning" : "danger";
    }

    private string GetScoreColorClass(double score)
    {
        return score >= 70 ? "text-success" : score >= 60 ? "text-warning" : "text-danger";
    }

    private string GetGradeTypeBadgeClass(GradeType gradeType)
    {
        return gradeType switch
        {
            GradeType.Homework => "primary",
            GradeType.Quiz => "warning",
            GradeType.FinalExam => "danger",
            _ => "secondary"
        };
    }

    private string GetGradeTrend()
    {
        var allGrades = GetAllGrades().OrderBy(g => g.Date).ToList();
        if (allGrades.Count < 2) return "Insufficient data for trend analysis";

        var firstHalf = allGrades.Take(allGrades.Count / 2).Average(g => g.Score);
        var secondHalf = allGrades.Skip(allGrades.Count / 2).Average(g => g.Score);

        var difference = secondHalf - firstHalf;
        
        if (Math.Abs(difference) < 5)
            return $"Stable performance (±{Math.Abs(difference):F1} points)";
        else if (difference > 0)
            return $"Improving trend (+{difference:F1} points)";
        else
            return $"Declining trend ({difference:F1} points)";
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }
}