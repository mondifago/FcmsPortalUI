@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Constants
@using FcmsPortal.Services
@using FcmsPortal
@using FcmsPortalUI.Services
@inject ISchoolDataService SchoolDataService

<div class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fa fa-user-graduate"></i>
                    Grade Report - @Student?.Person.FirstName @Student?.Person.LastName
                </h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (Student != null && LearningPath != null)
                {
                    <!-- Student Overview -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fa fa-info-circle"></i> Student Overview</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Student ID:</strong> @Student.Id</p>
                                    <p><strong>Learning Path:</strong> @Util.GetLearningPathName(LearningPath)</p>
                                    <p><strong>Semester:</strong> @LearningPath.Semester</p>
                                </div>
                                <div class="col-md-6">
                                    <div class="text-center">
                                        <h4 class="text-primary">Semester Overall Grade</h4>
                                        <h2 class="text-success">@GetSemesterOverallGrade().ToString("F2")%</h2>
                                        <span class="badge bg-@GetOverallGradeColorClass() fs-6">
                                            @Util.GetGradeCode(GetSemesterOverallGrade())
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Course-by-Course Breakdown -->
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fa fa-books"></i> Course Breakdown</h6>
                        </div>
                        <div class="card-body">
                            @foreach (var course in GetStudentCourses())
                            {
                                var courseGrade = GetCourseGrade(course);
                                var config = GetCourseConfig(course);

                                <div class="card mb-3">
                                    <div class="card-header">
                                        <div class="row align-items-center">
                                            <div class="col">
                                                <h6 class="mb-0">@course</h6>
                                            </div>
                                            <div class="col-auto">
                                                <span class="badge bg-@GetCourseGradeColorClass(courseGrade?.TotalGrade ?? 0) fs-6">
                                                    @(courseGrade?.TotalGrade.ToString("F1") ?? "0.0")%
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        @if (courseGrade != null && courseGrade.TestGrades.Any())
                                        {
                                            <div class="row">
                                                <!-- Homework Section -->
                                                <div class="col-md-4">
                                                    <div class="card">
                                                        <div class="card-body text-center">
                                                            <h6 class="card-title text-muted">Homework</h6>
                                                            <h4 class="text-primary">@GetGradeAverage(courseGrade, GradeType.Homework)</h4>
                                                            <small class="text-muted">@GetGradeCount(courseGrade, GradeType.Homework) assignments</small>
                                                            @if (config != null)
                                                            {
                                                                <small class="text-success"><strong>Achieved: @GetWeightedContribution(courseGrade, GradeType.Homework, config.HomeworkWeightPercentage)%</strong></small>
                                                                <small class="text-muted">Weight: @config.HomeworkWeightPercentage%</small>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Quiz Section -->
                                                <div class="col-md-4">
                                                    <div class="card">
                                                        <div class="card-body text-center">
                                                            <h6 class="card-title text-muted">Quiz</h6>
                                                            <h4 class="text-warning">@GetGradeAverage(courseGrade, GradeType.Quiz)</h4>
                                                            <small class="text-muted">@GetGradeCount(courseGrade, GradeType.Quiz) quizzes</small>
                                                            @if (config != null)
                                                            {
                                                                <small class="text-success"><strong>Achieved: @GetWeightedContribution(courseGrade, GradeType.Quiz, config.QuizWeightPercentage)%</strong></small>
                                                                <small class="text-muted">Weight: @config.QuizWeightPercentage%</small>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Exam Section -->
                                                <div class="col-md-4">
                                                    <div class="card">
                                                        <div class="card-body text-center">
                                                            <h6 class="card-title text-muted">Exam</h6>
                                                            <h4 class="text-danger">@GetGradeAverage(courseGrade, GradeType.FinalExam)</h4>
                                                            <small class="text-muted">@GetGradeCount(courseGrade, GradeType.FinalExam) exams</small>
                                                            @if (config != null)
                                                            {
                                                                <small class="text-success"><strong>Achieved: @GetWeightedContribution(courseGrade, GradeType.FinalExam, config.FinalExamWeightPercentage)%</strong></small>
                                                                <small class="text-muted">Weight: @config.FinalExamWeightPercentage%</small>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Individual Grade Details -->
                                            <div class="mt-3">
                                                <h6>Grade Details</h6>
                                                <div class="table-responsive">
                                                    <table class="table table-sm table-striped">
                                                        <thead>
                                                            <tr>
                                                                <th>Date</th>
                                                                <th>Type</th>
                                                                <th>Score</th>
                                                                <th>Teacher</th>
                                                                <th>Remarks</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var grade in courseGrade.TestGrades.OrderByDescending(g => g.Date))
                                                            {
                                                                <tr>
                                                                    <td>@grade.Date.ToString("MMM dd, yyyy")</td>
                                                                    <td>
                                                                        <span class="badge bg-secondary">
                                                                            @GetGradeTypeName(grade.GradeType)
                                                                        </span>
                                                                    </td>
                                                                    <td>
                                                                        <span class="fw-bold text-@GetScoreColorClass(grade.Score)">
                                                                            @grade.Score.ToString("F1")%
                                                                        </span>
                                                                    </td>
                                                                    <td>@grade.Teacher?.Person.FirstName @grade.Teacher?.Person.LastName</td>
                                                                    <td>@grade.TeacherRemark</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-info">
                                                <i class="fa fa-info-circle"></i>
                                                No grades recorded for this course yet.
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Summary Statistics -->
                    <div class="card mt-4">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fa fa-chart-bar"></i> Performance Summary</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="text-center">
                                        <h6 class="text-muted">Total Courses</h6>
                                        <h4>@GetStudentCourses().Count</h4>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center">
                                        <h6 class="text-muted">Total Students</h6>
                                        <h4>@GetTotalStudentsInClass()</h4>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center">
                                        <h6 class="text-muted">Class Position</h6>
                                        <h4 class="text-info">@GetStudentPosition()</h4>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center">
                                        <h6 class="text-muted">Highest Course</h6>
                                        <h4 class="text-success">@GetHighestCourseGrade().ToString("F1")%</h4>
                                        <small class="text-muted">@GetHighestCourseName()</small>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-md-3"></div>
                                <div class="col-md-3"></div>
                                <div class="col-md-3"></div>
                                <div class="col-md-3">
                                    <div class="text-center">
                                        <h6 class="text-muted">Lowest Course</h6>
                                        <h4 class="text-danger">@GetLowestCourseGrade().ToString("F1")%</h4>
                                        <small class="text-muted">@GetLowestCourseName()</small>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success">
                    <i class="fa fa-print"></i> Print Report
                </button>
                <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Student Student { get; set; }
    [Parameter] public LearningPath LearningPath { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private List<string> GetStudentCourses()
    {
        if (Student == null || LearningPath == null) return new List<string>();

        var configuredCourses = SchoolDataService.GetAllCourseGradingConfigurations(LearningPath.Id);
        return configuredCourses.Select(c => c.Course).ToList();
    }

    private CourseGrade GetCourseGrade(string course)
    {
        return Student?.CourseGrades.FirstOrDefault(cg =>
            cg.Course == course && cg.LearningPathId == LearningPath?.Id);
    }

    private CourseGradingConfiguration GetCourseConfig(string course)
    {
        return SchoolDataService.GetCourseGradingConfiguration(LearningPath?.Id ?? 0, course);
    }

    private string GetGradeAverage(CourseGrade courseGrade, GradeType gradeType)
    {
        var grades = courseGrade.TestGrades.Where(g => g.GradeType == gradeType).ToList();
        return grades.Any() ? grades.Average(g => g.Score).ToString("F1") : "N/A";
    }

    private int GetGradeCount(CourseGrade courseGrade, GradeType gradeType)
    {
        return courseGrade.TestGrades.Count(g => g.GradeType == gradeType);
    }

    private double GetSemesterOverallGrade()
    {
        return LearningPath != null ? LogicMethods.CalculateSemesterOverallGrade(Student, LearningPath) : 0;
    }

    private string GetOverallGradeColorClass()
    {
        var grade = GetSemesterOverallGrade();
        return grade >= FcmsConstants.A_GRADE_MIN ? "success" :
               grade >= FcmsConstants.B_GRADE_MIN ? "warning" : "danger";
    }

    private string GetCourseGradeColorClass(double grade)
    {
        return grade >= FcmsConstants.A_GRADE_MIN ? "success" :
               grade >= FcmsConstants.B_GRADE_MIN ? "warning" : "danger";
    }

    private string GetScoreColorClass(double score)
    {
        return score >= 70 ? "success" : score >= 60 ? "warning" : "danger";
    }

    private string GetGradeTypeName(GradeType gradeType)
    {
        return gradeType switch
        {
            GradeType.Homework => "HW",
            GradeType.Quiz => "Quiz",
            GradeType.FinalExam => "Exam",
            _ => gradeType.ToString()
        };
    }

    private int GetTotalGradeCount()
    {
        return Student?.CourseGrades
            .Where(cg => cg.LearningPathId == LearningPath?.Id)
            .Sum(cg => cg.TestGrades.Count) ?? 0;
    }

    private double GetHighestCourseGrade()
    {
        var grades = Student?.CourseGrades
            .Where(cg => cg.LearningPathId == LearningPath?.Id && cg.TotalGrade > 0)
            .Select(cg => cg.TotalGrade) ?? Enumerable.Empty<double>();

        return grades.Any() ? grades.Max() : 0;
    }

    private double GetLowestCourseGrade()
    {
        var grades = Student?.CourseGrades
            .Where(cg => cg.LearningPathId == LearningPath?.Id && cg.TotalGrade > 0)
            .Select(cg => cg.TotalGrade) ?? Enumerable.Empty<double>();

        return grades.Any() ? grades.Min() : 0;
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }

    private string GetWeightedContribution(CourseGrade courseGrade, GradeType gradeType, double weightPercentage)
    {
        var grades = courseGrade.TestGrades.Where(g => g.GradeType == gradeType).ToList();
        if (!grades.Any()) return "0.0";

        var average = grades.Average(g => g.Score);
        var contribution = (average / 100) * weightPercentage;
        return contribution.ToString("F1");
    }

    private int GetTotalStudentsInClass()
    {
        return LearningPath?.Students.Count ?? 0;
    }

    private string GetStudentPosition()
    {
        if (LearningPath == null || Student == null) return "N/A";

        var rankedStudents = LogicMethods.RankStudentsBySemesterGrade(LearningPath);
        var position = rankedStudents.FindIndex(s => s.Student.Id == Student.Id) + 1;

        return position > 0 ? GetOrdinalNumber(position) : "N/A";
    }

    private string GetOrdinalNumber(int number)
    {
        return number switch
        {
            1 => "1st",
            2 => "2nd",
            3 => "3rd",
            _ => $"{number}th"
        };
    }

    private string GetHighestCourseName()
    {
        var courseGrades = Student?.CourseGrades
            .Where(cg => cg.LearningPathId == LearningPath?.Id && cg.TotalGrade > 0)
            .ToList();

        if (courseGrades == null || !courseGrades.Any()) return "N/A";

        var highest = courseGrades.OrderByDescending(cg => cg.TotalGrade).First();
        return highest.Course;
    }

    private string GetLowestCourseName()
    {
        var courseGrades = Student?.CourseGrades
            .Where(cg => cg.LearningPathId == LearningPath?.Id && cg.TotalGrade > 0)
            .ToList();

        if (courseGrades == null || !courseGrades.Any()) return "N/A";

        var lowest = courseGrades.OrderBy(cg => cg.TotalGrade).First();
        return lowest.Course;
    }
}