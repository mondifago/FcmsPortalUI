@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal
@using System.ComponentModel.DataAnnotations
@using FcmsPortalUI.Components.Pages.Shared
@inject ISchoolDataService SchoolDataService
@rendermode InteractiveServer

<div class="modal fade show" style="display: @(IsVisible ? "block" : "none");" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">@(IsEditing ? "Edit" : "Create") Homework</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@homework" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="title" class="form-label">Title<span class="text-danger">*</span></label>
                            <InputText id="title" @bind-Value="homework.Title" class="form-control" />
                            <ValidationMessage For="@(() => homework.Title)" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="assignedDate" class="form-label">Assigned Date<span class="text-danger">*</span></label>
                            <InputDate id="assignedDate" @bind-Value="homework.AssignedDate" class="form-control" />
                            <ValidationMessage For="@(() => homework.AssignedDate)" />
                        </div>
                        <div class="col-md-6">
                            <label for="dueDate" class="form-label">Due Date<span class="text-danger">*</span></label>
                            <InputDate id="dueDate" @bind-Value="homework.DueDate" class="form-control" />
                            <ValidationMessage For="@(() => homework.DueDate)" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="question" class="form-label">Homework Question</label>
                            <InputTextArea id="question"
                                           @bind-Value="homework.Question"
                                           class="form-control"
                                           style="resize: both; min-height: 150px;" />
                            <ValidationMessage For="@(() => homework.Question)" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Attachments</label>
                        @if (showAttachments)
                        {
                            <FileAttachmentManager Title="Homework Attachments"
                                                   Category="@($"Homework-{homework.Id}")"
                                                   ReferenceId="homework.Id"
                                                   AllowUpload="true"
                                                   AllowDelete="true"
                                                   AllowMultiple="true"
                                                   OnAttachmentsChanged="HandleAttachmentsChanged" />
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <p class="mb-0">Save the homework first to add attachments.</p>
                            </div>
                        }
                    </div>

                    @if (IsEditing && homework.Submissions != null && homework.Submissions.Any())
                    {
                        <div class="mb-3">
                            <label class="form-label">Submissions</label>
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Student</th>
                                            <th>Submission Date</th>
                                            <th>Graded</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var submission in homework.Submissions)
                                        {
                                            <tr>
                                                <td>@(submission.Student?.Person?.FirstName) @(submission.Student?.Person?.LastName)</td>
                                                <td>@submission.SubmissionDate.ToString("MMM d, yyyy h:mm tt")</td>
                                                <td>
                                                    @if (submission.IsGraded)
                                                    {
                                                        <span class="badge bg-success">Graded</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-warning">Pending</span>
                                                    }
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-sm btn-primary" @onclick="() => ViewSubmission(submission)">
                                                        <i class="fa fa-eye"></i> View
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }

                    <div class="d-flex justify-content-end mt-4">
                        <button type="button" class="btn btn-secondary me-2" @onclick="Close">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            @(IsEditing ? "Update" : "Create") Homework
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@if (showSubmissionModal && selectedSubmission != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-info text-white">
                    <h5 class="modal-title">Homework Submission</h5>
                    <button type="button" class="btn-close" @onclick="CloseSubmissionModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <dl>
                                <dt>Student</dt>
                                <dd>@selectedSubmission.Student.Person.FirstName @selectedSubmission.Student.Person.LastName</dd>

                                <dt>Submission Date</dt>
                                <dd>@selectedSubmission.SubmissionDate.ToString("MMM d, yyyy h:mm tt")</dd>
                            </dl>
                        </div>
                        <div class="col-md-6 text-end">
                            @if (selectedSubmission.IsGraded)
                            {
                                <span class="badge bg-success">Graded</span>
                                @if (selectedSubmission.HomeworkGrade != null)
                                {
                                    <p class="mt-2">Score: @selectedSubmission.HomeworkGrade.Score</p>
                                }
                            }
                            else
                            {
                                <span class="badge bg-warning">Not Graded</span>
                            }
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Answer</label>
                        <div class="card">
                            <div class="card-body">
                                @((MarkupString)FormatAnswer(selectedSubmission.Answer))
                            </div>
                        </div>
                    </div>

                    <hr />

                    @if (!selectedSubmission.IsGraded)
                    {
                        <div class="mb-3">
                            <label class="form-label">Grade Submission</label>
                            <EditForm Model="@gradeModel" OnValidSubmit="SubmitGrade">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="score">Score</label>
                                            <InputNumber id="score" @bind-Value="gradeModel.Score" class="form-control" min="0" max="100" />
                                        </div>
                                    </div>
                                    <div class="col-md-8">
                                        <div class="form-group">
                                            <label for="feedback">Feedback</label>
                                            <InputTextArea id="feedback" @bind-Value="gradeModel.Feedback" class="form-control" rows="3" />
                                        </div>
                                    </div>
                                </div>
                                <div class="mt-3 text-end">
                                    <button type="submit" class="btn btn-primary">Submit Grade</button>
                                </div>
                            </EditForm>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="form-label">Teacher Feedback</label>
                            <div class="card">
                                <div class="card-body">
                                    <p>@selectedSubmission.FeedbackComment</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseSubmissionModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public Homework? ExistingHomework { get; set; }

    [Parameter]
    public ClassSession ClassSession { get; set; }

    [Parameter]
    public Staff CurrentTeacher { get; set; }

    [Parameter]
    public EventCallback<Homework> OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private Homework homework = new Homework();
    private bool IsEditing => ExistingHomework != null;
    private bool showAttachments => IsEditing && homework.Id > 0;
    private bool showSubmissionModal = false;
    private HomeworkSubmission selectedSubmission;

    private class GradeModel
    {
        [Range(0, 100, ErrorMessage = "Score must be between 0 and 100")]
        public double Score { get; set; }
        public string Feedback { get; set; } = "";
    }

    private GradeModel gradeModel = new GradeModel();

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            if (IsEditing)
            {
                // Clone the existing homework to avoid modifying the original directly
                homework = new Homework
                    {
                        Id = ExistingHomework.Id,
                        Title = ExistingHomework.Title,
                        AssignedDate = ExistingHomework.AssignedDate,
                        DueDate = ExistingHomework.DueDate,
                        ClassSessionId = ExistingHomework.ClassSessionId,
                        ClassSession = ExistingHomework.ClassSession,
                        Question = ExistingHomework.Question,
                        Attachments = ExistingHomework.Attachments,
                        Submissions = ExistingHomework.Submissions
                    };
            }
            else
            {
                // Create a new homework
                homework = new Homework
                    {
                        AssignedDate = DateTime.Today,
                        DueDate = DateTime.Today.AddDays(7),
                        ClassSessionId = ClassSession?.Id ?? 0,
                        ClassSession = ClassSession,
                        Question = "",
                        Attachments = new List<FileAttachment>(),
                        Submissions = new List<HomeworkSubmission>()
                    };
            }
        }
    }

    private void HandleAttachmentsChanged(List<FileAttachment> attachments)
    {
        homework.Attachments = attachments;
    }

    private void ViewSubmission(HomeworkSubmission submission)
    {
        selectedSubmission = submission;
        showSubmissionModal = true;
        gradeModel = new GradeModel();
    }

    private void CloseSubmissionModal()
    {
        showSubmissionModal = false;
        selectedSubmission = null;
    }

    private string FormatAnswer(string answer)
    {
        if (string.IsNullOrEmpty(answer))
            return "<em>No answer provided</em>";

        // Replace newlines with HTML breaks for proper display
        return answer.Replace(Environment.NewLine, "<br>").Replace("\n", "<br>");
    }

    private async Task SubmitGrade()
    {
        if (selectedSubmission != null && !selectedSubmission.IsGraded)
        {
            // Create new homework grade
            var homeworkGrade = new TestGrade
                {
                    Course = ClassSession.Course,
                    Score = gradeModel.Score,
                    GradeType = GradeType.Homework,
                    WeightPercentage = 100, // Default weight for homework
                    Teacher = CurrentTeacher,
                    Semester = Semester.First, // You might want to get this from the current semester
                    Date = DateTime.Now,
                    TeacherRemark = gradeModel.Feedback
                };

            // Update submission
            selectedSubmission.HomeworkGrade = homeworkGrade;
            selectedSubmission.IsGraded = true;
            selectedSubmission.FeedbackComment = gradeModel.Feedback;

            // Add the grade to the student's course grades using the LogicMethods
            LogicMethods.SubmitHomeworkGradeToStudent(selectedSubmission.Student, selectedSubmission);

            // Update the submission in the database
            // This would require a method in ISchoolDataService
            // await SchoolDataService.UpdateHomeworkSubmission(selectedSubmission);

            CloseSubmissionModal();
        }
    }

    private async Task HandleSubmit()
    {
        // Ensure we have at least one question
         homework.Question = "Please answer this question.";
        
        if (!IsEditing)
        {
            // Generate a new ID for the homework
            // In a real app, this would be handled by the database
            // Here we're simulating it
            int nextId = 1;
            if (ClassSession.HomeworkDetails != null && ClassSession.HomeworkDetails.Any())
            {
                nextId = ClassSession.HomeworkDetails.Max(h => h.Id) + 1;
            }
            homework.Id = nextId;
        }

        await OnSave.InvokeAsync(homework);
        Close();
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }
}