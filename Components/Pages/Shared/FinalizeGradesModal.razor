@using FcmsPortal.Models
@using FcmsPortal.Services
@using FcmsPortal.Enums
@using FcmsPortal
@inject ISchoolDataService SchoolDataService

<div class="modal fade @(IsVisible ? "show" : "")" style="display: @(IsVisible ? "block" : "none");" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fa fa-graduation-cap"></i> Finalize Grades - @LearningPath?.EducationLevel @LearningPath?.ClassLevel
                </h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (LearningPath != null)
                {
                    <h6 class="text-muted mb-3">@LearningPath.AcademicYear @LearningPath.Semester Semester</h6>



                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Student Name</th>
                                    @if (LearningPath.Semester == Semester.Third)
                                    {
                                        <th class="text-center">1st Semester</th>
                                        <th class="text-center">2nd Semester</th>
                                        <th class="text-center">3rd Semester</th>
                                        <th class="text-center bg-info text-white">Promotion Grade</th>
                                    }
                                    else
                                    {
                                        <th class="text-center">Overall Semester Grade</th>
                                    }
                                    <th class="text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var student in LearningPath.Students.OrderBy(s => s.Person.LastName))
                                {
                                    <tr>
                                        <td>@student.Person.LastName, @student.Person.FirstName</td>
                                        @if (LearningPath.Semester == Semester.Third)
                                        {
                                            var allSemesterGrades = LogicMethods.GetStudentAllSemesterGrades(student, school, LearningPath.EducationLevel, LearningPath.ClassLevel);

                                            @for (int i = 0; i < 3; i++)
                                            {
                                                <td class="text-center">
                                                    @if (i < allSemesterGrades.Count)
                                                    {
                                                        <span class="badge bg-@Util.GetGradeColorClass(allSemesterGrades[i])">
                                                            @allSemesterGrades[i].ToString("F1")%
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                            }

                                            <td class="text-center bg-info bg-opacity-10">
                                                <strong>
                                                    @{
                                                        var allLearningPaths = school.LearningPaths
                                                        .Where(lp => lp.EducationLevel == LearningPath.EducationLevel &&
                                                        lp.ClassLevel == LearningPath.ClassLevel &&
                                                        lp.AcademicYear == LearningPath.AcademicYear)
                                                        .ToList();

                                                        var promotionGrade = LogicMethods.CalculatePromotionGrade(student, allLearningPaths);
                                                    }
                                                    @promotionGrade.ToString("F1")%
                                                </strong>
                                            </td>
                                        }
                                        else
                                        {
                                            <td class="text-center">
                                                <strong class="text-primary">
                                                    @LogicMethods.CalculateSemesterOverallGrade(student, LearningPath).ToString("F1")%
                                                </strong>
                                            </td>
                                        }
                                        <td class="text-center">
                                            <button class="btn btn-sm btn-info me-1"
                                                    @onclick="() => GenerateGradeReport(student)">
                                                <i class="fa fa-file-pdf"></i> Report
                                            </button>

                                            @if (LearningPath.Semester == Semester.Third)
                                            {
                                                <button class="btn btn-sm @(LogicMethods.IsLastClassInEducationLevel(LearningPath.EducationLevel, LearningPath.ClassLevel) ? "btn-success" : "btn-warning")"
                                                        @onclick="() => ProcessStudentPromotion(student)">
                                                    <i class="fa @(LogicMethods.IsLastClassInEducationLevel(LearningPath.EducationLevel, LearningPath.ClassLevel) ? "fa-graduation-cap" : "fa-arrow-up")"></i>
                                                    @Util.GetPromotionButtonText(LearningPath.EducationLevel, LearningPath.ClassLevel)
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Close">
                    <i class="fa fa-times"></i> Close
                </button>

                <button type="button" class="btn btn-primary" @onclick="FinalizeAllGrades">
                    <i class="fa fa-check-circle"></i> Finalize All Grades
                </button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

<StudentReportCardModal IsVisible="showReportCardModal"
                        Student="selectedStudentForReport"
                        LearningPath="LearningPath"
                        TeacherRemarks="@(teacherRemarks.GetValueOrDefault(selectedStudentForReport?.Id ?? 0, ""))"
                        PrincipalRemarks="@(principalRemarks.GetValueOrDefault(selectedStudentForReport?.Id ?? 0, ""))"
                        TeacherRemarksChanged="@((remarks) => UpdateTeacherRemarks(selectedStudentForReport.Id, remarks))"
                        PrincipalRemarksChanged="@((remarks) => UpdatePrincipalRemarks(selectedStudentForReport.Id, remarks))"
                        OnClose="() => showReportCardModal = false" />

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public LearningPath LearningPath { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    private Dictionary<int, string> teacherRemarks = new();
    private Dictionary<int, string> principalRemarks = new();

    private School school;
    private bool showReportCardModal = false;
    private Student selectedStudentForReport;

    protected override void OnInitialized()
    {
        school = SchoolDataService.GetSchool();
    }

    private void FinalizeAllGrades()
    {
        LogicMethods.FinalizeSemesterGrades(LearningPath);
        SchoolDataService.UpdateLearningPath(LearningPath);
        StateHasChanged();
    }

    private void GenerateGradeReport(Student student)
    {
        selectedStudentForReport = student;
        showReportCardModal = true;
    }

    private void UpdateTeacherRemarks(int studentId, string remarks)
    {
        teacherRemarks[studentId] = remarks;
    }

    private void UpdatePrincipalRemarks(int studentId, string remarks)
    {
        principalRemarks[studentId] = remarks;
    }

    private void ProcessStudentPromotion(Student student)
    {
        if (LogicMethods.ShouldArchiveStudent(student.Person.EducationLevel, student.Person.ClassLevel))
        {
            ArchiveStudent(student);
        }
        else
        {
            PromoteStudent(student);
        }
    }

    private void PromoteStudent(Student student)
    {
        var (nextEducationLevel, nextClassLevel) = LogicMethods.GetNextEducationLevelAndClass(
            student.Person.EducationLevel, student.Person.ClassLevel);

        if (nextEducationLevel.HasValue && nextClassLevel.HasValue)
        {
            student.Person.EducationLevel = nextEducationLevel.Value;
            student.Person.ClassLevel = nextClassLevel.Value;
        }
        else
        {
            var nextClass = LogicMethods.GetNextClassLevel(
                student.Person.EducationLevel, student.Person.ClassLevel);

            if (nextClass.HasValue)
            {
                student.Person.ClassLevel = nextClass.Value;
            }
        }

        LearningPath.Students.Remove(student);
        SchoolDataService.UpdateStudent(student);
        SchoolDataService.UpdateLearningPath(LearningPath);
        LearningPath = SchoolDataService.GetLearningPathById(LearningPath.Id);
        StateHasChanged();
    }

    private void ArchiveStudent(Student student)
    {
        LearningPath.Students.Remove(student);
        SchoolDataService.ArchiveStudent(student);
        SchoolDataService.UpdateLearningPath(LearningPath);
        LearningPath = SchoolDataService.GetLearningPathById(LearningPath.Id);
        StateHasChanged();
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }
}