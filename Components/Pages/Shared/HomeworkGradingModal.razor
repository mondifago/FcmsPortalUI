@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Constants
@using FcmsPortal
@inject ISchoolDataService SchoolDataService

<div class="modal fade show" style="display: @(IsVisible ? "block" : "none");" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">@(IsEditing ? "Update" : "Grade") Homework Submission</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (Submission == null)
                {
                    <p class="text-muted">No submission to grade.</p>
                }
                else
                {
                    <!-- Student Information -->
                    <div class="row mb-4">
                        <div class="col-md-8">
                            <h6>Student: @Submission.Student?.Person?.FirstName @Submission.Student?.Person?.LastName</h6>
                            <p class="text-muted mb-0">
                                Submitted: @Submission.SubmissionDate.ToString("MMM d, yyyy h:mm tt")
                                @if (Submission.Homework != null && Submission.SubmissionDate > Submission.Homework.DueDate)
                                {
                                    <span class="badge bg-warning ms-2">Late Submission</span>
                                }
                            </p>
                        </div>
                        <div class="col-md-4 text-end">
                            @if (Submission.IsGraded)
                            {
                                <span class="badge bg-success">Already Graded</span>
                            }
                            else
                            {
                                <span class="badge bg-warning">Pending Grade</span>
                            }
                        </div>
                    </div>

                    <!-- Student's Answer -->
                    <div class="mb-4">
                        <h6>Student's Answer</h6>
                        <div class="card">
                            <div class="card-body">
                                @((MarkupString)Util.FormatTextWithLinks(Submission.Answer))
                            </div>
                        </div>
                    </div>

                    <!-- Grading Form -->
                    <EditForm Model="@testGrade" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="maxScore" class="form-label">Maximum Score</label>
                                <InputNumber id="maxScore" @bind-Value="maxScore"
                                             class="form-control" placeholder="@FcmsConstants.TOTAL_SCORE" />
                            </div>
                            <div class="col-md-6">
                                <label for="score" class="form-label">Score (/@maxScore) <span class="text-danger">*</span></label>
                                <InputNumber id="score" @bind-Value="testGrade.Score"
                                             class="form-control" placeholder="@($"0-{maxScore}")"
                                             min="0" max="@maxScore" step="0.1" />
                                <ValidationMessage For="@(() => testGrade.Score)" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-12">
                                <label for="feedback" class="form-label">Feedback</label>
                                <InputTextArea id="feedback" @bind-Value="testGrade.TeacherRemark" class="form-control" rows="3"
                                               placeholder="Optional feedback for the student..." />
                                <ValidationMessage For="@(() => testGrade.TeacherRemark)" />
                            </div>
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="Close">Cancel</button>
                            <button type="submit" class="btn btn-warning" disabled="@(!IsFormValid())">
                                @(IsEditing ? "Update Grade" : "Submit Grade")
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
        [Parameter]
        public bool IsVisible { get; set; }

        [Parameter]
        public HomeworkSubmission Submission { get; set; } = new HomeworkSubmission();

        [Parameter]
        public Staff CurrentTeacher { get; set; } = new Staff();

        [Parameter]
        public EventCallback<HomeworkSubmission> OnSave { get; set; }

        [Parameter]
        public EventCallback OnClose { get; set; }

    private TestGrade testGrade = new TestGrade();
    private double maxScore = FcmsConstants.TOTAL_SCORE;
    private bool IsEditing => Submission?.IsGraded == true;

    protected override void OnParametersSet()
    {
        if (IsVisible && Submission != null)
        {
            maxScore = FcmsConstants.TOTAL_SCORE;

            if (IsEditing && Submission.HomeworkGrade != null)
            {
                testGrade.TeacherRemark = Submission.FeedbackComment ?? "";
                testGrade.Teacher = CurrentTeacher;
                testGrade.GradeType = GradeType.Homework;
                testGrade.Date = DateTime.Now;
                testGrade.Score = (Submission.HomeworkGrade.Score / FcmsConstants.TOTAL_SCORE) * maxScore;
            }
            else
            {
                testGrade = new TestGrade
                {
                    Teacher = CurrentTeacher,
                    Date = DateTime.Now,
                    GradeType = GradeType.Homework,
                    Score = 0,
                    TeacherRemark = ""
                };
            }
        }
    }

    private bool IsFormValid()
    {
        return maxScore > 0 && testGrade.Score >= 0 && testGrade.Score <= maxScore;
    }

    private async Task HandleSubmit()
    {
        if (!IsFormValid() || Submission == null || Submission.Student == null ||
            Submission.Homework?.ClassSession == null)
            return;

        var finalScore = (testGrade.Score / maxScore) * FcmsConstants.TOTAL_SCORE;
        var finalScoreRounded = Math.Round(finalScore, FcmsConstants.GRADE_ROUNDING_DIGIT);

        var course = Submission.Homework?.ClassSession?.Course;
        if (!string.IsNullOrEmpty(course))
        {
            var learningPath = Submission.Homework?.ClassSession?.Id != null
                ? SchoolDataService.GetLearningPathByClassSessionId(Submission.Homework.ClassSession.Id)
                : null;

            if (learningPath != null)
            {
                var savedGrade = await SchoolDataService.AddHomeworkSubmissionGradeAsync(
                    Submission.Student.Id,
                    course,
                    finalScoreRounded,
                    CurrentTeacher.Id,
                    testGrade.TeacherRemark,
                    learningPath.Id
                );

                Submission.HomeworkGrade = savedGrade;
                Submission.IsGraded = true;
                Submission.FeedbackComment = savedGrade.TeacherRemark;
            }
        }

        await OnSave.InvokeAsync(Submission);
        Close();
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }
}