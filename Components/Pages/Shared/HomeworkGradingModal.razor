@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal
@using System.ComponentModel.DataAnnotations
@inject ISchoolDataService SchoolDataService

<div class="modal fade show" style="display: @(IsVisible ? "block" : "none");" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">@(IsEditing ? "Update" : "Grade") Homework Submission</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (Submission == null)
                {
                    <p class="text-muted">No submission to grade.</p>
                }
                else
                {
                    <!-- Student Information -->
                    <div class="row mb-4">
                        <div class="col-md-8">
                            <h6>Student: @Submission.Student?.Person?.FirstName @Submission.Student?.Person?.LastName</h6>
                            <p class="text-muted mb-0">
                                Submitted: @Submission.SubmissionDate.ToString("MMM d, yyyy h:mm tt")
                                @if (Submission.Homework != null && Submission.SubmissionDate > Submission.Homework.DueDate)
                                {
                                    <span class="badge bg-warning ms-2">Late Submission</span>
                                }
                            </p>
                        </div>
                        <div class="col-md-4 text-end">
                            @if (Submission.IsGraded)
                            {
                                <span class="badge bg-success">Already Graded</span>
                            }
                            else
                            {
                                <span class="badge bg-warning">Pending Grade</span>
                            }
                        </div>
                    </div>

                    <!-- Student's Answer -->
                    <div class="mb-4">
                        <h6>Student's Answer</h6>
                        <div class="card">
                            <div class="card-body">
                                @((MarkupString)Util.FormatTextWithLinks(Submission.Answer))
                            </div>
                        </div>
                    </div>

                    <!-- Grading Form -->
                    <EditForm Model="@gradeModel" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="score" class="form-label">Score <span class="text-danger">*</span></label>
                                <InputNumber id="score" @bind-Value="gradeModel.Score" class="form-control" placeholder="0-100" />
                                <ValidationMessage For="@(() => gradeModel.Score)" />
                            </div>
                            <div class="col-md-8">
                                <label for="feedback" class="form-label">Feedback</label>
                                <InputTextArea id="feedback" @bind-Value="gradeModel.TeacherRemark" class="form-control" rows="3" 
                                               placeholder="Optional feedback for the student..." />
                                <ValidationMessage For="@(() => gradeModel.TeacherRemark)" />
                            </div>
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="Close">Cancel</button>
                            <button type="submit" class="btn btn-warning">
                                @(IsEditing ? "Update Grade" : "Submit Grade")
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public HomeworkSubmission Submission { get; set; }

    [Parameter]
    public Staff CurrentTeacher { get; set; }

    [Parameter]
    public EventCallback<HomeworkSubmission> OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private TestGrade gradeModel = new TestGrade();
    private bool IsEditing => Submission?.IsGraded == true;

    public class TestGrade
    {
        [Required]
        [Range(0, 100, ErrorMessage = "Score must be between 0 and 100")]
        public double Score { get; set; }

        public string TeacherRemark { get; set; } = "";

        public string Course { get; set; } = "";
    }

    protected override void OnParametersSet()
    {
        if (IsVisible && Submission != null)
        {
            if (IsEditing && Submission.HomeworkGrade != null)
            {
                gradeModel = new TestGrade
                {
                    Score = Submission.HomeworkGrade.Score,
                    TeacherRemark = Submission.FeedbackComment ?? "",
                    Course = Submission.Homework?.ClassSession?.Course ?? ""
                };
            }
            else
            {
                gradeModel = new TestGrade
                {
                    Score = 0,
                    TeacherRemark = "",
                    Course = Submission.Homework?.ClassSession?.Course ?? ""
                };
            }
        }
    }

     private async Task HandleSubmit()
        {
            if (Submission == null) return;

            var homeworkGrade = new FcmsPortal.Models.TestGrade 
            {
                Course = Submission.Homework?.ClassSession?.Course ?? gradeModel.Course,
                Score = gradeModel.Score,
                GradeType = GradeType.Homework,
                Teacher = CurrentTeacher, 
                Date = DateTime.Now,
                TeacherRemark = gradeModel.TeacherRemark
            };

            Submission.HomeworkGrade = homeworkGrade; 
            Submission.IsGraded = true;
            Submission.FeedbackComment = gradeModel.TeacherRemark;

            var courseGrade = Submission.Student.CourseGrades.FirstOrDefault(cg => cg.Course == homeworkGrade.Course);
            if (courseGrade == null)
            {
                courseGrade = new CourseGrade { Course = homeworkGrade.Course };
                Submission.Student.CourseGrades.Add(courseGrade);
            }
            courseGrade.TestGrades.Add(homeworkGrade);

            await OnSave.InvokeAsync(Submission);
            Close();
        }

    private void Close()
    {
        OnClose.InvokeAsync();
    }
}