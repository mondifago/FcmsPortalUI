@page "/discussion"
@using FcmsPortal.Models
@using FcmsPortal
@using FcmsPortal.Services
@using FcmsPortalUI.Services
@inject ISchoolDataService SchoolDataService
@inject NavigationManager NavigationManager
<!--
<PageTitle>Discussion Forums</PageTitle>

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h3>
                <i class="fas fa-comments me-2"></i>Discussion Forums
                <small class="text-muted">Class Discussions</small>
            </h3>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            @if (isLoading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <DiscussionThreadComponent Thread="currentThread"
                                           AllThreads="discussionThreads"
                                           AllowReplies="true"
                                           CurrentUser="currentUser"
                                           OnThreadUpdated="HandleThreadUpdated"
                                           OnNewThreadCreated="HandleNewThreadCreated" />
            }
        </div>
    </div>
</div> -->

@code {
    /*private List<DiscussionThread> discussionThreads;
    private DiscussionThread currentThread;
    private Person currentUser;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var students = SchoolDataService.GetStudents();
        if (students.Any())
        {
            // Use the first student as the current user for this demo
            currentUser = students.First().Person;
        }
        else
        {
            // Fallback to a default user if no students exist
            currentUser = new Person
                {
                    Id = 999,
                    FirstName = "Demo",
                    LastName = "User"
                };
        }
        await LoadAllThreads();
        isLoading = false;
    }

    private async Task LoadAllThreads()
    {
        //this would fetch threads from a database
        discussionThreads = new List<DiscussionThread>();

        var firstThread = await SchoolDataService.GetDiscussionThread(1);
        if (firstThread != null)
        {
            discussionThreads.Add(firstThread);
            currentThread = firstThread;
        }

        var secondThread = await SchoolDataService.GetDiscussionThread(2);
        if (secondThread != null)
        {
            discussionThreads.Add(secondThread);
        }

        var thirdThread = await SchoolDataService.GetDiscussionThread(3);
        if (thirdThread != null)
        {
            discussionThreads.Add(thirdThread);
        }

        var fourthThread = await SchoolDataService.GetDiscussionThread(4);
        if (fourthThread != null)
        {
            discussionThreads.Add(fourthThread);
        }
    }

    private async Task HandleThreadUpdated(DiscussionThread updatedThread)
    {
        var existingThreadIndex = discussionThreads.FindIndex(t => t.Id == updatedThread.Id);
        if (existingThreadIndex >= 0)
        {
            discussionThreads[existingThreadIndex] = updatedThread;
        }
    }

    private async Task HandleNewThreadCreated(DiscussionThread newThread)
    {
        discussionThreads.Add(newThread);
        discussionThreads = new List<DiscussionThread>(discussionThreads.OrderByDescending(t => t.CreatedAt));
    }*/
}