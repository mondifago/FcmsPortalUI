@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal
@using System.Globalization

<div class="card mb-4">
    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <h4 class="mb-0">@Title</h4>
        <div>
            <button class="btn btn-sm btn-light me-2" @onclick="PreviousMonth">
                <i class="fa fa-chevron-left"></i>
            </button>
            <span class="text-white">@CurrentDate.ToString("MMMM yyyy")</span>
            <button class="btn btn-sm btn-light ms-2" @onclick="NextMonth">
                <i class="fa fa-chevron-right"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-bordered calendar-table">
                <thead>
                    <tr>
                        <th>Sun</th>
                        <th>Mon</th>
                        <th>Tue</th>
                        <th>Wed</th>
                        <th>Thu</th>
                        <th>Fri</th>
                        <th>Sat</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int week = 0; week < 6; week++)
                    {
                        <tr style="height: 100px;">
                            @for (int day = 0; day < 7; day++)
                            {
                                int displayDay = week * 7 + day - FirstDayOfMonth + 1;
                                bool isCurrentMonth = displayDay > 0 && displayDay <= DaysInMonth;
                                var date = new DateTime(CurrentDate.Year, CurrentDate.Month, isCurrentMonth ? displayDay : 1);
                                var sessionsOnDay = isCurrentMonth ? GetSchedulesForDate(date) : new List<ScheduleEntry>();

                                <td class="@(!isCurrentMonth ? "bg-light" : "") @(IsToday(date) ? "bg-info-subtle" : "")"
                                    @onclick="() => OnDateSelected.InvokeAsync(date)">
                                    @if (isCurrentMonth)
                                    {
                                        <div class="d-flex justify-content-end">
                                            <span class="badge bg-secondary">@displayDay</span>
                                        </div>
                                        @if (sessionsOnDay.Any())
                                        {
                                            <div class="calendar-events">
                                                @{
                                                    var classSessions = sessionsOnDay.Where(s => s.ClassSession != null).ToList();
                                                    var events = sessionsOnDay.Where(s => !string.IsNullOrEmpty(s.Event)).ToList();
                                                    var meetings = sessionsOnDay.Where(s => !string.IsNullOrEmpty(s.Meeting)).ToList();
                                                }

                                                @if (classSessions.Any())
                                                {
                                                    <div class="calendar-event mb-1" @onclick:stopPropagation
                                                         @onclick="() => HandleScheduleTypeClicked(date, ScheduleType.ClassSession)">
                                                        <div class="card bg-info text-white px-1 py-0 small-badge">
                                                            <small>
                                                                @classSessions.Count Classes
                                                            </small>
                                                        </div>
                                                    </div>
                                                }

                                                @if (events.Any())
                                                {
                                                    <div class="calendar-event mb-1" @onclick:stopPropagation
                                                         @onclick="() => HandleScheduleTypeClicked(date, ScheduleType.Event)">
                                                        <div class="card bg-success text-white px-1 py-0 small-badge">
                                                            <small>
                                                                @events.Count Events
                                                            </small>
                                                        </div>
                                                    </div>
                                                }

                                                @if (meetings.Any())
                                                {
                                                    <div class="calendar-event" @onclick:stopPropagation
                                                         @onclick="() => HandleScheduleTypeClicked(date, ScheduleType.Meeting)">
                                                        <div class="card bg-warning text-white px-1 py-0 small-badge">
                                                            <small>
                                                                @meetings.Count Meetings
                                                            </small>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "Calendar";
    [Parameter] public DateTime CurrentDate { get; set; } = DateTime.Now;
    [Parameter] public EventCallback<DateTime> CurrentDateChanged { get; set; }
    [Parameter] public EventCallback<DateTime> OnDateSelected { get; set; }
    [Parameter] public Func<DateTime, List<ScheduleEntry>> GetSchedulesForDate { get; set; } = _ => new List<ScheduleEntry>();
    [Parameter] public string ScheduleTypeLabel { get; set; } = "Event";
    [Parameter] public string ScheduleTypesLabel { get; set; } = "Events";
    [Parameter] public EventCallback<(DateTime date, ScheduleType? type)> OnScheduleTypeClicked { get; set; }

    private int DaysInMonth => DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month);
    private int FirstDayOfMonth => (int)new DateTime(CurrentDate.Year, CurrentDate.Month, 1).DayOfWeek;

    private void PreviousMonth()
    {
        CurrentDate = CurrentDate.AddMonths(-1);
        CurrentDateChanged.InvokeAsync(CurrentDate);
    }

    private void NextMonth()
    {
        CurrentDate = CurrentDate.AddMonths(1);
        CurrentDateChanged.InvokeAsync(CurrentDate);
    }

    private bool IsToday(DateTime date)
    {
        var today = DateTime.Today;
        return date.Year == today.Year && date.Month == today.Month && date.Day == today.Day;
    }

    private void HandleScheduleTypeClicked(DateTime date, ScheduleType type)
    {
        OnScheduleTypeClicked.InvokeAsync((date, type));
    }
}