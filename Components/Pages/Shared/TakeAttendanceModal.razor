@using FcmsPortal.Models

<div class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fa fa-check-square me-2"></i>
                    Take Attendance
                </h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (Students != null && Students.Any())
                {
                    <div class="row mb-3">
                        <div class="col">
                            <h6 class="text-muted">
                                Date: @DateTime.Now.ToString("dddd, MMMM dd, yyyy")
                            </h6>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col">
                            <button type="button" class="btn btn-success btn-sm me-2" @onclick="MarkAllPresent">
                                Mark All Present
                            </button>
                            <button type="button" class="btn btn-warning btn-sm" @onclick="MarkAllAbsent">
                                Mark All Absent
                            </button>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th style="width: 60px;">Present</th>
                                    <th>Student Name</th>
                                </tr>
                            </thead>
                            <tbody>
                               @foreach (var student in Students)
                                    {
                                        <tr class="@(IsStudentSelected(student.Id) ? "table-success" : "")">
                                            <td>
                                                <div class="form-check">
                                                    <input class="form-check-input" 
                                                           type="checkbox" 
                                                           checked="@IsStudentSelected(student.Id)"
                                                           @onchange="(e) => ToggleStudentSelection(student.Id, e.Value)"
                                                           id="student-@student.Id">
                                                </div>
                                            </td>
                                            <td>
                                                <label class="form-check-label fw-medium" for="student-@student.Id">
                                                    @Util.GetFullName(student.Person)
                                                </label>
                                            </td>
                                        </tr>
                                    }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-4">
                        <p class="text-muted">No students found.</p>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Close">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SubmitAttendance">
                    <i class="fa fa-save me-2"></i>
                    Submit Attendance
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public List<Student> Students { get; set; }
    [Parameter] public EventCallback OnAttendanceSubmitted { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

   private HashSet<int> selectedStudentIds = new();

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            selectedStudentIds.Clear();
            StateHasChanged();
        }
    }

   private bool IsStudentSelected(int studentId)
    {
        return selectedStudentIds.Contains(studentId);
    }

    private void ToggleStudentSelection(int studentId, object isChecked)
    {
        Util.ToggleItemSelection<Student>(studentId, isChecked, selectedStudentIds);
    }

    private void MarkAllPresent()
    {
        selectedStudentIds = new HashSet<int>(Students.Select(s => s.Id));
    }

    private void MarkAllAbsent()
    {
        selectedStudentIds.Clear();
    }

    private async Task SubmitAttendance()
    {
        await OnAttendanceSubmitted.InvokeAsync();
        await Close();
    }

    private async Task Close()
    {
        selectedStudentIds.Clear();
        await OnClose.InvokeAsync();
    }
}