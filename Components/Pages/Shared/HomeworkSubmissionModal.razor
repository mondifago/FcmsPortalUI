@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortalUI
@using System.ComponentModel.DataAnnotations
@inject ISchoolDataService SchoolDataService

<div class="modal fade show" style="display: @(IsVisible ? "block" : "none");" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    @if (IsViewingGradedSubmission)
                    {
                        <span>My Homework Submission</span>
                    }
                    else
                    {
                        <span>@(IsEditing ? "Update" : "Submit") Homework</span>
                    }
                </h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (Homework == null)
                {
                    <p class="text-muted">Error: Homework not found.</p>
                }
                else if (IsViewingGradedSubmission)
                {
                    <!-- Read-only view for graded submissions -->
                    <div class="alert alert-info">
                        <h4 class="alert-heading">Homework Graded</h4>
                        <p class="mb-0">This homework has been graded and cannot be modified.</p>
                    </div>
                    
                    <h4 class="mt-4">@Homework.Title</h4>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Due Date</label>
                        <p>@Homework.DueDate.ToString("MMMM d, yyyy")</p>
                    </div>
                    
                    <div class="mb-4">
                        <label class="form-label fw-bold">Questions</label>
                        <div class="card">
                            <div class="card-body">
                                @if (!string.IsNullOrWhiteSpace(Homework.Question))
                                {
                                    @((MarkupString)Util.FormatTextWithLinks(Homework.Question))
                                }
                                else
                                {
                                    <p class="text-muted mb-0">No questions provided.</p>
                                }
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <label class="form-label fw-bold">Your Answer</label>
                        <div class="card">
                            <div class="card-body">
                                @((MarkupString)Util.FormatTextWithLinks(ExistingSubmission?.Answer ?? ""))
                            </div>
                        </div>
                    </div>
                    
                    @if (ExistingSubmission?.HomeworkGrade != null)
                    {
                        <div class="mb-4">
                            <label class="form-label fw-bold">Grade & Feedback</label>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <p class="mb-2">Score: <span class="fw-bold text-success">@ExistingSubmission.HomeworkGrade.Score</span></p>
                                    @if (!string.IsNullOrEmpty(ExistingSubmission.FeedbackComment))
                                    {
                                        <p class="mb-0">Feedback: @ExistingSubmission.FeedbackComment</p>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <!-- Editable submission form -->
                    <EditForm Model="@submission" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <h4 class="mb-3">@Homework.Title</h4>
                        
                        <div class="mb-3">
                            <label class="form-label">Due Date</label>
                            <p class="form-control-static">
                                @Homework.DueDate.ToString("MMM d, yyyy")
                                @if (IsPastDue)
                                {
                                    <span class="badge bg-danger ms-2">Past Due</span>
                                }
                            </p>
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Questions</label>
                            <div class="card">
                                <div class="card-body">
                                    @if (!string.IsNullOrWhiteSpace(Homework.Question))
                                    {
                                        @((MarkupString)Util.FormatTextWithLinks(Homework.Question))
                                    }
                                    else
                                    {
                                        <p class="text-muted mb-0">No questions provided.</p>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label for="answer" class="form-label">Your Answer <span class="text-danger">*</span></label>
                            <InputTextArea id="answer" @bind-Value="submission.Answer" class="form-control" rows="10" 
                                           placeholder="Type your answer here..." />
                            <ValidationMessage For="@(() => submission.Answer)" />
                        </div>

                        <div class="d-flex justify-content-end mt-4">
                            <button type="button" class="btn btn-secondary me-2" @onclick="Close">Cancel</button>
                            <button type="submit" class="btn btn-success">
                                @(IsEditing ? "Update" : "Submit") Homework
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public Homework Homework { get; set; }

    [Parameter]
    public Student CurrentStudent { get; set; }

    [Parameter]
    public HomeworkSubmission ExistingSubmission { get; set; }

    [Parameter]
    public EventCallback<HomeworkSubmission> OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private HomeworkSubmission submission = new HomeworkSubmission();
    private bool IsEditing => ExistingSubmission != null && !ExistingSubmission.IsGraded;
    private bool IsViewingGradedSubmission => ExistingSubmission != null && ExistingSubmission.IsGraded;
    private bool IsPastDue => Homework?.DueDate < DateTime.Now;

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            if (ExistingSubmission != null)
            {
                submission = new HomeworkSubmission
                {
                    Id = ExistingSubmission.Id,
                    Student = ExistingSubmission.Student,
                    Answer = ExistingSubmission.Answer ?? "",
                    SubmissionDate = ExistingSubmission.SubmissionDate,
                    IsGraded = ExistingSubmission.IsGraded,
                    FeedbackComment = ExistingSubmission.FeedbackComment,
                    HomeworkGrade = ExistingSubmission.HomeworkGrade,
                    Homework = ExistingSubmission.Homework
                };
            }
            else
            {
                submission = new HomeworkSubmission
                {
                    Student = CurrentStudent,
                    SubmissionDate = DateTime.Now,
                    Answer = "",
                    IsGraded = false,
                    Homework = Homework
                };
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(submission.Answer))
        {
            return; 
        }

        HomeworkSubmission result;
    
        if (IsEditing && ExistingSubmission != null && ExistingSubmission.Id > 0)
        {
            ExistingSubmission.Answer = submission.Answer;
            SchoolDataService.UpdateHomeworkSubmission(ExistingSubmission);
            result = ExistingSubmission;
        }
        else
        {
            result = SchoolDataService.SubmitHomework(Homework.Id, CurrentStudent, submission.Answer);
        }

        await OnSave.InvokeAsync(result);
        Close();
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }
}