@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal
@using System.ComponentModel.DataAnnotations
@inject ISchoolDataService SchoolDataService

<div class="modal fade show" style="display: @(IsVisible ? "block" : "none");" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">Configure Grade Weights</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (LearningPath == null)
                {
                    <p class="text-muted">No learning path provided.</p>
                }
                else
                {
                    <div class="alert alert-info">
                        <strong>Instructions:</strong> Set the weight percentage for Homework, Quiz, and Final Exam for each course. 
                        The total must equal 100% for each course.
                    </div>

                    <EditForm Model="@configurationModel" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width: 25%;">Course</th>
                                        <th style="width: 20%;">Homework %</th>
                                        <th style="width: 20%;">Quiz %</th>
                                        <th style="width: 20%;">Final Exam %</th>
                                        <th style="width: 15%;">Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var course in allCourses)
                                    {
                                        var config = configurationModel.CourseConfigs.FirstOrDefault(c => c.Course == course);
                                        if (config == null)
                                        {
                                            config = new CourseConfigModel { Course = course };
                                            configurationModel.CourseConfigs.Add(config);
                                        }

                                        <tr class="@(GetRowClass(config))">
                                            <td>
                                                <strong>@course</strong>
                                            </td>
                                            <td>
                                                <InputNumber @bind-Value="config.HomeworkWeight" 
                                                           class="form-control form-control-sm" 
                                                           @oninput="() => CalculateTotal(config)" />
                                            </td>
                                            <td>
                                                <InputNumber @bind-Value="config.QuizWeight" 
                                                           class="form-control form-control-sm" 
                                                           @oninput="() => CalculateTotal(config)" />
                                            </td>
                                            <td>
                                                <InputNumber @bind-Value="config.ExamWeight" 
                                                           class="form-control form-control-sm" 
                                                           @oninput="() => CalculateTotal(config)" />
                                            </td>
                                            <td>
                                                <span class="fw-bold @(config.Total == 100 ? "text-success" : "text-danger")">
                                                    @config.Total%
                                                </span>
                                                @if (config.Total != 100)
                                                {
                                                    <i class="fa fa-exclamation-triangle text-warning ms-1"></i>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        @if (!AreAllConfigurationsValid())
                        {
                            <div class="alert alert-danger">
                                <i class="fa fa-exclamation-triangle"></i>
                                <strong>Error:</strong> All course weight percentages must total exactly 100%.
                            </div>
                        }

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-outline-secondary" @onclick="SetDefaultWeights">
                                <i class="fa fa-magic"></i> Set Default Weights (20% HW, 20% Quiz, 60% Exam)
                            </button>
                            
                            <div>
                                <button type="button" class="btn btn-secondary me-2" @onclick="Close">Cancel</button>
                                <button type="submit" class="btn btn-warning" disabled="@(!AreAllConfigurationsValid())">
                                    <i class="fa fa-save"></i> Save Configuration
                                </button>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public LearningPath LearningPath { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private ConfigurationModel configurationModel = new();
    private List<string> allCourses = new();

    public class ConfigurationModel
    {
        public List<CourseConfigModel> CourseConfigs { get; set; } = new();
    }

    public class CourseConfigModel
    {
        public string Course { get; set; } = "";
        
        [Range(0, 100, ErrorMessage = "Weight must be between 0 and 100")]
        public double HomeworkWeight { get; set; } = 20;
        
        [Range(0, 100, ErrorMessage = "Weight must be between 0 and 100")]
        public double QuizWeight { get; set; } = 20;
        
        [Range(0, 100, ErrorMessage = "Weight must be between 0 and 100")]
        public double ExamWeight { get; set; } = 60;

        public double Total => HomeworkWeight + QuizWeight + ExamWeight;
    }

    protected override void OnParametersSet()
    {
        if (IsVisible && LearningPath != null)
        {
            LoadData();
        }
    }

    private void LoadData()
    {
        allCourses = CourseDefaults.GetCourseNames(LearningPath.EducationLevel);
        configurationModel.CourseConfigs.Clear();

        foreach (var course in allCourses)
        {
            var existingConfig = SchoolDataService.GetCourseGradingConfiguration(LearningPath.Id, course);
            
            configurationModel.CourseConfigs.Add(new CourseConfigModel
            {
                Course = course,
                HomeworkWeight = existingConfig?.HomeworkWeightPercentage ?? 20,
                QuizWeight = existingConfig?.QuizWeightPercentage ?? 20,
                ExamWeight = existingConfig?.FinalExamWeightPercentage ?? 60
            });
        }
    }

    private void CalculateTotal(CourseConfigModel config)
    {
        // Total is calculated automatically in the property
        StateHasChanged();
    }

    private string GetRowClass(CourseConfigModel config)
    {
        return config.Total == 100 ? "table-success" : "table-warning";
    }

    private bool AreAllConfigurationsValid()
    {
        return configurationModel.CourseConfigs.All(c => Math.Abs(c.Total - 100) < 0.01);
    }

    private void SetDefaultWeights()
    {
        foreach (var config in configurationModel.CourseConfigs)
        {
            config.HomeworkWeight = 20;
            config.QuizWeight = 20;
            config.ExamWeight = 60;
        }
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (!AreAllConfigurationsValid()) return;

        foreach (var config in configurationModel.CourseConfigs)
        {
            var gradeConfig = new CourseGradingConfiguration
            {
                Course = config.Course,
                LearningPathId = LearningPath.Id,
                HomeworkWeightPercentage = config.HomeworkWeight,
                QuizWeightPercentage = config.QuizWeight,
                FinalExamWeightPercentage = config.ExamWeight
            };

            SchoolDataService.SaveCourseGradingConfiguration(gradeConfig);
        }

        await OnSave.InvokeAsync();
        Close();
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }
}
