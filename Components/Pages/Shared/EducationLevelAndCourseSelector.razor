@using FcmsPortal.Enums
@using FcmsPortal.Models
@using FcmsPortal.Services
@inject ISchoolDataService SchoolDataService
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-6 mb-3">
        <label for="educationLevel" class="form-label">Education Level</label>
        <InputSelect id="educationLevel" class="form-select" @bind-Value="EducationLevel" @bind-Value:after="HandleEducationLevelChange">
            <option value="">-- Select Education Level --</option>
            @foreach (var level in Enum.GetValues(typeof(EducationLevel)))
            {
                <option value="@level">@level</option>
            }
        </InputSelect>
    </div>
    <div class="col-md-6 mb-3">
        <label for="areaOfSpecialization" class="form-label">Area of Specialization</label>
        <InputSelect id="areaOfSpecialization" class="form-select" @bind-Value="AreaOfSpecialization">
            <option value="">-- Select Area of Specialization --</option>
            @foreach (var course in availableCourses)
            {
                <option value="@course">@course</option>
            }
        </InputSelect>
    </div>
</div>

@code {
    [Parameter]
    public EducationLevel EducationLevel { get; set; }

    [Parameter]
    public EventCallback<EducationLevel> EducationLevelChanged { get; set; }

    [Parameter]
    public string AreaOfSpecialization { get; set; } = "";

    [Parameter]
    public EventCallback<string> AreaOfSpecializationChanged { get; set; }

    private List<string> availableCourses { get; set; } = new();

    protected override void OnInitialized()
    {
        availableCourses = CourseDefaults.GetCourseNames(EducationLevel);
    }

    private void HandleEducationLevelChange()
    {
        var selectedLevel = EducationLevel;
        availableCourses = CourseDefaults.GetCourseNames(selectedLevel);
        AreaOfSpecialization = "";
        StateHasChanged();
    }
}