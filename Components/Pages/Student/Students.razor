@page "/students"
@inject ISchoolDataService SchoolDataService
@inject NavigationManager NavigationManager
@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortalUI.Services
@using FcmsPortalUI.Components.Pages.Shared
@rendermode InteractiveServer

<PageTitle>Students</PageTitle>

<div class="container">
    <h1>Students Management</h1>

    <div class="mb-3">
        <button @onclick="ShowGuardianSelectionModal" class="btn btn-primary">
            <i class="fa fa-plus"></i> Add New Student
        </button>
    </div>

    @if (students == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!students.Any())
    {
        <div class="alert alert-info">
            No students found. Add a new student to get started.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Profile</th>
                        <th>Name</th>
                        <th>Age</th>
                        <th>Education Level</th>
                        <th>Class Level</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var student in students)
                    {
                        <tr>
                            <td>@student.Id</td>
                            <td>
                                @if (!string.IsNullOrEmpty(student.Person.ProfilePictureUrl))
                                {
                                    <ProfileThumbnailList Person="student.Person" />                               
                                }
                                
                            </td>
                            <td>@Util.GetFullName(student.Person)</td>
                            <td>@student.Person.Age</td>
                            <td>@student.Person.EducationLevel</td>
                            <td>@student.Person.ClassLevel</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a href="/students/details/@student.Id" class="btn btn-info btn-sm">
                                        <i class="fa fa-eye"></i> View
                                    </a>
                                    <a href="/students/edit/@student.Id" class="btn btn-warning btn-sm">
                                        <i class="fa fa-pencil"></i> Edit
                                    </a>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteStudent(student.Id)">
                                        <i class="fa fa-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <ConfirmDeleteModal IsVisible="showDeleteConfirmation"
                        Title="Confirm Delete"
                        Message="Are you sure you want to delete this Student?"
                        OnConfirm="ConfirmDelete"
                        OnCancel="CancelDelete" />

    <GuardianSelectionModal IsVisible="showGuardianSelectionModal"
                            OnGuardianSelected="HandleGuardianSelected"
                            OnClose="CloseGuardianSelectionModal" />

</div>

@code {
    private IEnumerable<Student> students;
    private int studentIdToDelete;
    private bool showDeleteConfirmation = false;
    private bool showGuardianSelectionModal = false;

    protected override async Task OnInitializedAsync()
    {
        students = SchoolDataService.GetStudents();
       
    }

    private void ShowGuardianSelectionModal()
    {
        showGuardianSelectionModal = true;
    }

    private void CloseGuardianSelectionModal()
    {
        showGuardianSelectionModal = false;
    }

    private void HandleGuardianSelected(Guardian selectedGuardian)
    {
        // Navigate to student creation with selected guardian
        NavigationManager.NavigateTo($"/students/create?guardianId={selectedGuardian.Id}");
    }


    private void DeleteStudent(int id)
    {
        studentIdToDelete = id;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
    }

    private void ConfirmDelete()
    {
        var guardianToUpdate = SchoolDataService.GetGuardianByStudentId(studentIdToDelete);
        var result = SchoolDataService.DeleteStudent(studentIdToDelete);

        if (result)
        {
            // If the student was associated with a guardian, remove the student from their wards
            if (guardianToUpdate != null)
            {
                var studentToRemove = guardianToUpdate.Wards.FirstOrDefault(s => s.Id == studentIdToDelete);

                if (studentToRemove != null)
                {
                    guardianToUpdate.Wards.Remove(studentToRemove);
                }
            }

            students = SchoolDataService.GetStudents();
            showDeleteConfirmation = false;
            StateHasChanged();
        }
    }
}