@inject ISchoolDataService SchoolDataService
@inject ValidationService ValidationService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms
@using FcmsPortalUI.Components.Pages.Shared
@using FcmsPortalUI.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Services
@using FcmsPortal
@rendermode InteractiveServer

<EditForm EditContext="@editContext" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-12 mb-4 text-center">
                    <ProfileThumbnailForm ImageUrl="@profilePictureUrl"
                                          ImageUrlChanged="HandleProfilePictureChanged"
                                          Category="StudentProfilePictures" />
                </div>
            </div>

            <h4 class="mb-3">Personal Information</h4>
            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="firstName" class="form-label">First Name<span class="text-danger">*</span></label>
                    <InputText id="firstName" class="form-control" @bind-Value="Student.Person.FirstName" />
                    <ValidationMessage For="@(() => Student.Person.FirstName)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="middleName" class="form-label">Middle Name</label>
                    <InputText id="middleName" class="form-control" @bind-Value="Student.Person.MiddleName" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="lastName" class="form-label">Last Name<span class="text-danger">*</span></label>
                    <InputText id="lastName" class="form-control" @bind-Value="Student.Person.LastName" />
                    <ValidationMessage For="@(() => Student.Person.LastName)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="gender" class="form-label">Gender</label>
                    <InputSelect id="gender" class="form-select" @bind-Value="Student.Person.Sex">
                        <option value="">-- Select Gender --</option>
                        @foreach (var gender in Enum.GetValues(typeof(Gender)).Cast<Gender>().Where(g => g != Gender.None))
                        {
                            <option value="@gender">@gender</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Student.Person.Sex)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="dateOfBirth" class="form-label">Date of Birth<span class="text-danger">*</span></label>
                    <InputDate id="dateOfBirth" class="form-control" @bind-Value="Student.Person.DateOfBirth" />
                    <ValidationMessage For="@(() => Student.Person.DateOfBirth)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="positionAmongSiblings" class="form-label">Position Among Siblings</label>
                    <InputText id="positionAmongSiblings" class="form-control" @bind-Value="Student.PositionAmongSiblings" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="stateOfOrigin" class="form-label">State of Origin<span class="text-danger">*</span></label>
                    <InputText id="stateOfOrigin" class="form-control" @bind-Value="Student.Person.StateOfOrigin" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="lgaOfOrigin" class="form-label">LGA of Origin<span class="text-danger">*</span></label>
                    <InputText id="lgaOfOrigin" class="form-control" @bind-Value="Student.Person.LgaOfOrigin" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="lastSchoolAttended" class="form-label">Last School Attended</label>
                    <InputText id="lastSchoolAttended" class="form-control" @bind-Value="Student.LastSchoolAttended" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="email" class="form-label">Email<span class="text-danger">*</span></label>
                    <InputText id="email" class="form-control" @bind-Value="Student.Person.Email" />
                    <ValidationMessage For="@(() => Student.Person.Email)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="phoneNumber" class="form-label">Phone Number<span class="text-danger">*</span></label>
                    <InputText id="phoneNumber" class="form-control" @bind-Value="Student.Person.PhoneNumber" />
                    <ValidationMessage For="@(() => Student.Person.PhoneNumber)" />
                </div>
            </div>

            <h4 class="mb-3">Academic Information</h4>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="educationLevel" class="form-label">Education Level<span class="text-danger">*</span></label>
                    <InputSelect id="educationLevel" class="form-select" @bind-Value="Student.Person.EducationLevel" @bind-Value:after="OnEducationLevelChanged">
                        <option value="@EducationLevel.None">-- Select Education Level --</option>
                        @foreach (var level in Enum.GetValues(typeof(EducationLevel)))
                        {
                            <option value="@level">@level</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Student.Person.EducationLevel)" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="classLevel" class="form-label">Class Level<span class="text-danger">*</span></label>
                    <select id="classLevel" @bind="Student.Person.ClassLevel" class="form-select">
                        <option value="@ClassLevel.None">-- Select Class Level --</option>
                        @foreach (var level in availableClassLevels)
                        {
                            <option value="@level">@level</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => Student.Person.ClassLevel)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="dateOfEnrollment" class="form-label">Date of Enrollment</label>
                    <InputDate id="dateOfEnrollment" class="form-control" @bind-Value="Student.Person.DateOfEnrollment" />
                    <ValidationMessage For="@(() => Student.Person.DateOfEnrollment)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="guardian" class="form-label">Guardian<span class="text-danger">*</span></label>
                    <InputSelect id="guardian" class="form-select" @bind-Value="Student.GuardianId">
                        <option value="0">-- Select Guardian --</option>
                        @foreach (var guardian in guardians)
                        {
                            <option value="@guardian.Id">@guardian.Person.FirstName @guardian.Person.LastName</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="emergencyContact" class="form-label">Emergency Contact<span class="text-danger">*</span></label>
                    <InputText id="emergencyContact" class="form-control" @bind-Value="Student.Person.EmergencyContact" />
                </div>
            </div>

            <div class="mb-3">
                <div class="form-check form-switch">
                    <InputCheckbox id="isActive" class="form-check-input" @bind-Value="Student.Person.IsActive" />
                    <label class="form-check-label" for="isActive">Active Status</label>
                </div>
            </div>

            <h4 class="mb-3">Address Information<span class="text-danger">*</span></h4>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="street" class="form-label">Street<span class="text-danger">*</span></label>
                    <InputText id="street" class="form-control" @bind-Value="Student.Person.Address.Street" />
                    <ValidationMessage For="@(() => Student.Person.Address.Street)" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="city" class="form-label">City<span class="text-danger">*</span></label>
                    <InputText id="city" class="form-control" @bind-Value="Student.Person.Address.City" />
                    <ValidationMessage For="@(() => Student.Person.Address.City)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="state" class="form-label">State<span class="text-danger">*</span></label>
                    <InputText id="state" class="form-control" @bind-Value="Student.Person.Address.State" />
                    <ValidationMessage For="@(() => Student.Person.Address.State)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="postalCode" class="form-label">Postal Code</label>
                    <InputText id="postalCode" class="form-control" @bind-Value="Student.Person.Address.PostalCode"
                               placeholder="This could also be postal address, e.g., P.O. Box 250" />
                    <ValidationMessage For="@(() => Student.Person.Address.PostalCode)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="country" class="form-label">Country<span class="text-danger">*</span></label>
                    <InputText id="country" class="form-control" @bind-Value="Student.Person.Address.Country" />
                    <ValidationMessage For="@(() => Student.Person.Address.Country)" />
                </div>
            </div>

            <div class="d-flex gap-2 mt-4">
                <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public Student Student { get; set; } = new()
    {
        Person = new Person()
        {
            IsActive = true
        }
    };

    [Parameter]
    public string SubmitButtonText { get; set; } = "Save";

    [Parameter, EditorRequired]
    public EventCallback<Student> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnCancel { get; set; }

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private string profilePictureUrl = "";
    private string oldProfilePictureUrl = "";
    private List<Guardian> guardians = new();
    private FcmsPortal.Models.School? school;
    private List<ClassLevel> availableClassLevels = new List<ClassLevel>();

    protected override void OnInitialized()
    {
        school = SchoolDataService.GetSchool();
        guardians = FcmsPortal.LogicMethods.GetAllGuardians(school);

        if (Student.Person.DateOfEnrollment == default)
            Student.Person.DateOfEnrollment = DateTime.Today;

        if (Student.Person.DateOfBirth == default)
            Student.Person.DateOfBirth = DateTime.Today;

        if (Student.Person.Address == null)
            Student.Person.Address = new Address();

        profilePictureUrl = Student.Person.ProfilePictureUrl ?? "";
        oldProfilePictureUrl = profilePictureUrl;
        availableClassLevels = LogicMethods.GetAvailableClassLevels(Student.Person.EducationLevel);

        editContext = new EditContext(Student);
        messageStore = new ValidationMessageStore(editContext);
    }

    private void OnEducationLevelChanged()
    {
        Student.Person.ClassLevel = ClassLevel.None;
        availableClassLevels = LogicMethods.GetAvailableClassLevels(Student.Person.EducationLevel);
        StateHasChanged();
    }

    private async Task HandleProfilePictureChanged(string newImageUrl)
    {
        if (!string.IsNullOrEmpty(oldProfilePictureUrl) &&
            !oldProfilePictureUrl.StartsWith("data:") &&
            oldProfilePictureUrl != newImageUrl)
        {
            try
            {
                var oldAttachment = new FileAttachment
                {
                    FilePath = oldProfilePictureUrl
                };
                await SchoolDataService.DeleteFileAsync(oldAttachment);
            }
            catch
            {
                // Log error but don't stop the process
            }
        }

        profilePictureUrl = newImageUrl;
        oldProfilePictureUrl = newImageUrl;
        StateHasChanged();
    }

    private async Task HandleSubmit(EditContext context)
    {
        if (!ValidationService.ValidateStudent(context, Student, messageStore!))
        {
            return;
        }

        Student.Person.ProfilePictureUrl = profilePictureUrl;
        await OnSubmit.InvokeAsync(Student);
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
}