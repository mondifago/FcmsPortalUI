@using FcmsPortal.Models
@using FcmsPortal.Enums
@using Microsoft.AspNetCore.Components.Forms
@using FcmsPortalUI.Components.Pages.Shared
@using FcmsPortalUI.Services
@using FcmsPortal.Services
@inject NavigationManager NavigationManager
@inject ISchoolDataService SchoolDataService

<EditForm Model="@Staff" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-12 mb-4 text-center">
                    <ProfileThumbnailForm ImageUrl="@profilePictureUrl"
                                          ImageUrlChanged="HandleProfilePictureChanged" />
                </div>
            </div>

            <h4 class="mb-3">Personal Information</h4>
            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="firstName" class="form-label">First Name<span class="text-danger">*</span></label>
                    <InputText id="firstName" class="form-control" @bind-Value="Staff.Person.FirstName" />
                    <ValidationMessage For="@(() => Staff.Person.FirstName)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="middleName" class="form-label">Middle Name</label>
                    <InputText id="middleName" class="form-control" @bind-Value="Staff.Person.MiddleName" />
                    <ValidationMessage For="@(() => Staff.Person.MiddleName)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="lastName" class="form-label">Last Name<span class="text-danger">*</span></label>
                    <InputText id="lastName" class="form-control" @bind-Value="Staff.Person.LastName" />
                    <ValidationMessage For="@(() => Staff.Person.LastName)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="gender" class="form-label">Gender</label>
                    <InputSelect id="gender" class="form-select" @bind-Value="Staff.Person.Sex">
                        <option value="">-- Select Gender --</option>
                        @foreach (var gender in Enum.GetValues(typeof(Gender)))
                        {
                            <option value="@gender">@gender</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-4 mb-3">
                    <label for="dateOfBirth" class="form-label">Date of Birth<span class="text-danger">*</span></label>
                    <InputDate id="dateOfBirth" class="form-control" @bind-Value="Staff.Person.DateOfBirth" />
                    <ValidationMessage For="@(() => Staff.Person.DateOfBirth)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="email" class="form-label">Email<span class="text-danger">*</span></label>
                    <InputText id="email" class="form-control" @bind-Value="Staff.Person.Email" />
                    <ValidationMessage For="@(() => Staff.Person.Email)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="stateOfOrigin" class="form-label">State of Origin<span class="text-danger">*</span></label>
                    <InputText id="stateOfOrigin" class="form-control" @bind-Value="Staff.Person.StateOfOrigin" />
                    <ValidationMessage For="@(() => Staff.Person.StateOfOrigin)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="lgaOfOrigin" class="form-label">LGA of Origin<span class="text-danger">*</span></label>
                    <InputText id="lgaOfOrigin" class="form-control" @bind-Value="Staff.Person.LgaOfOrigin" />
                    <ValidationMessage For="@(() => Staff.Person.LgaOfOrigin)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="phoneNumber" class="form-label">Phone Number<span class="text-danger">*</span></label>
                    <InputText id="phoneNumber" class="form-control" @bind-Value="Staff.Person.PhoneNumber" />
                    <ValidationMessage For="@(() => Staff.Person.PhoneNumber)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="emergencyContact" class="form-label">Emergency Contact<span class="text-danger">*</span></label>
                    <InputText id="emergencyContact" class="form-control" @bind-Value="Staff.Person.EmergencyContact" />
                    <ValidationMessage For="@(() => Staff.Person.EmergencyContact)" />
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-check form-switch mt-4">
                        <InputCheckbox id="isActive" class="form-check-input" @bind-Value="Staff.Person.IsActive" />
                        <label class="form-check-label" for="isActive">Status</label>
                    </div>
                </div>
            </div>

            <h4 class="mb-3">Professional Information</h4>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="jobRole" class="form-label">Job Role<span class="text-danger">*</span></label>
                    <InputSelect id="jobRole" class="form-select" @bind-Value="Staff.JobRole">
                        <option value="">-- Select Job Role --</option>
                        @foreach (var role in Enum.GetValues(typeof(JobRole)))
                        {
                            <option value="@role">@role</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="dateOfEmployment" class="form-label">Date of Employment<span class="text-danger">*</span></label>
                    <InputDate id="dateOfEmployment" class="form-control" @bind-Value="employmentDate" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-12 mb-3">
                    <label for="jobDescription" class="form-label">Job Description</label>
                    <InputTextArea id="jobDescription" class="form-control" @bind-Value="Staff.JobDescription" rows="3" />
                </div>
            </div>

            <!-- Integrated EducationLevelAndCourseSelector -->
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="educationLevel" class="form-label">Education Level<span class="text-danger">*</span></label>
                    <InputSelect id="educationLevel" class="form-select" @bind-Value="Staff.Person.EducationLevel" @bind-Value:after="HandleEducationLevelChange">
                        <option value="">-- Select Education Level --</option>
                        @foreach (var level in Enum.GetValues(typeof(EducationLevel)))
                        {
                            <option value="@level">@level</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="areaOfSpecialization" class="form-label">Area of Specialization<span class="text-danger">*</span></label>
                    <InputSelect id="areaOfSpecialization" class="form-select" @bind-Value="Staff.AreaOfSpecialization">
                        <option value="">-- Select Area of Specialization --</option>
                        @foreach (var course in availableCourses)
                        {
                            <option value="@course">@course</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <h5 class="mb-3">Qualifications</h5>
            @for (int i = 0; i < Staff.Qualifications.Count; i++)
            {
                var index = i;
                <div class="mb-2 d-flex">
                    <InputText class="form-control me-2" @bind-Value="Staff.Qualifications[index]" />
                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveQualification(index)">
                        <i class="fa fa-trash"></i>
                    </button>
                </div>
            }
            <button type="button" class="btn btn-outline-primary mb-3" @onclick="AddQualification">
                <i class="fa fa-plus"></i> Add Qualification
            </button>

            <h5 class="mb-3 mt-4">Work Experience</h5>
            @for (int i = 0; i < Staff.WorkExperience.Count; i++)
            {
                var index = i;
                <div class="mb-2 d-flex">
                    <InputText class="form-control me-2" @bind-Value="Staff.WorkExperience[index]" />
                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveWorkExperience(index)">
                        <i class="fa fa-trash"></i>
                    </button>
                </div>
            }
            <button type="button" class="btn btn-outline-primary mb-3" @onclick="AddWorkExperience">
                <i class="fa fa-plus"></i> Add Work Experience
            </button>

            <h5 class="mb-3 mt-4">Address Information<span class="text-danger">*</span></h5>
            @if (showAddressForm)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Add New Address</h5>
                        <AddressForm Address="@currentAddress"
                                     OnValidSubmit="SaveAddress"
                                     OnCancel="CancelAddressEdit"
                                     ButtonText="Save Address" />
                    </div>
                </div>
            }
            else
            {
                <button type="button" class="btn btn-outline-primary mb-3" @onclick="ShowAddressForm">
                    <i class="fa fa-plus"></i> Add Address
                </button>
            }

            @if (Staff.Person.Addresses.Any())
            {
                <div class="table-responsive mb-3">
                    <table class="table table-sm table-bordered">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Street</th>
                                <th>City</th>
                                <th>State</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var address in Staff.Person.Addresses)
                            {
                                <tr>
                                    <td>@address.AddressType</td>
                                    <td>@address.Street</td>
                                    <td>@address.City</td>
                                    <td>@address.State</td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveAddress(address)">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            <div class="d-flex gap-2 mt-4">
                <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public Staff Staff { get; set; } = new()
        {
            Person = new Person()
            {
                IsActive = true
            },
            Qualifications = new List<string>(),
            WorkExperience = new List<string>()
        };

    [Parameter]
    public string SubmitButtonText { get; set; } = "Save";

    [Parameter, EditorRequired]
    public EventCallback<Staff> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnCancel { get; set; }

    private string profilePictureUrl = "";
    private DateTime employmentDate = DateTime.Today;
    private bool showAddressForm = false;
    private Address currentAddress = new();
    private List<string> availableCourses { get; set; } = new();

    protected override void OnInitialized()
    {
        if (Staff.Qualifications == null)
            Staff.Qualifications = new List<string>();

        if (Staff.WorkExperience == null)
            Staff.WorkExperience = new List<string>();

        if (Staff.Person.Addresses == null)
            Staff.Person.Addresses = new List<Address>();

        Staff.Person.DateOfBirth = DateTime.Today;
        profilePictureUrl = Staff.Person.ProfilePictureUrl;

        // Initialize available courses based on current education level
        availableCourses = CourseDefaults.GetCourseNames(Staff.Person.EducationLevel);
    }

    private void HandleEducationLevelChange()
    {
        availableCourses = CourseDefaults.GetCourseNames(Staff.Person.EducationLevel);
        Staff.AreaOfSpecialization = "";
        StateHasChanged();
    }

    private void HandleProfilePictureChanged(string newImageUrl)
    {
        profilePictureUrl = newImageUrl;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        Staff.Person.ProfilePictureUrl = profilePictureUrl;
        await OnSubmit.InvokeAsync(Staff);
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    private void AddQualification()
    {
        Staff.Qualifications.Add(string.Empty);
    }

    private void RemoveQualification(int index)
    {
        if (index >= 0 && index < Staff.Qualifications.Count)
        {
            Staff.Qualifications.RemoveAt(index);
        }
    }

    private void AddWorkExperience()
    {
        Staff.WorkExperience.Add(string.Empty);
    }

    private void RemoveWorkExperience(int index)
    {
        if (index >= 0 && index < Staff.WorkExperience.Count)
        {
            Staff.WorkExperience.RemoveAt(index);
        }
    }

    private void ShowAddressForm()
    {
        currentAddress = new Address();
        showAddressForm = true;
    }

    private void SaveAddress(Address address)
    {
        Staff.Person.Addresses.Add(address);
        showAddressForm = false;
        currentAddress = new Address();
    }

    private void CancelAddressEdit()
    {
        showAddressForm = false;
        currentAddress = new Address();
    }

    private void RemoveAddress(Address address)
    {
        Staff.Person.Addresses.Remove(address);
    }
}