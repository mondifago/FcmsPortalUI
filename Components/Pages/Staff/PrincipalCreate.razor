@page "/principal/create"
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Services
@using FcmsPortalUI.Services
@using Microsoft.AspNetCore.Identity
@inject ISchoolDataService SchoolDataService
@inject UserManager<Person> UserManager
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card shadow">
                <div class="card-header bg-primary text-white text-center">
                    <h3 class="mb-0">
                        <i class="fa fa-user-shield me-2"></i>
                        Create Principal Account
                    </h3>
                    <p class="mb-0 mt-2">Set up the main administrator account for your school</p>
                </div>
                <div class="card-body">
                    @if (isCreating)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Creating principal account...</span>
                            </div>
                            <div class="mt-3">
                                <h5>Setting up Principal account...</h5>
                                <p class="text-muted">This will only take a moment</p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fa fa-info-circle me-2"></i>
                            <strong>Important:</strong> You are creating the Principal account for this school.
                            This account will have full administrative access to manage the school.
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                <i class="fa fa-exclamation-triangle me-2"></i>@errorMessage
                            </div>
                        }

                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">Account Password</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="password" class="form-label">Password <span class="text-danger">*</span></label>
                                        <input type="password"
                                               id="password"
                                               class="form-control"
                                               @bind="password"
                                               placeholder="Enter password" />
                                        <small class="text-muted">Minimum 6 characters, at least one uppercase, one lowercase, one number, and one special character</small>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="confirmPassword" class="form-label">Confirm Password <span class="text-danger">*</span></label>
                                        <input type="password"
                                               id="confirmPassword"
                                               class="form-control"
                                               @bind="confirmPassword"
                                               placeholder="Re-enter password" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <StaffForm Staff="@principalStaff"
                                   SubmitButtonText="Create Principal Account"
                                   OnSubmit="CreatePrincipal"
                                   OnCancel="Cancel" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Staff principalStaff = new();
    private string password = "";
    private string confirmPassword = "";
    private string errorMessage = "";
    private bool isCreating = false;

    protected override void OnInitialized()
    {
        if (!SchoolDataService.HasSchool())
        {
            NavigationManager.NavigateTo("/school/create", true);
            return;
        }

        if (SchoolDataService.HasPrincipal())
        {
            NavigationManager.NavigateTo("/", true);
            return;
        }

        InitializePrincipalStaff();
    }

    private void InitializePrincipalStaff()
    {
        principalStaff = new Staff
        {
            Person = new Person
            {
                IsActive = true,
                Address = new Address(),
                DateOfBirth = DateTime.Today.AddYears(-30),
                DateOfEnrollment = DateTime.Today
            },
            UserRole = UserRole.Principal,
            DateOfEmployment = DateTime.Today
        };
    }

    private async Task CreatePrincipal(Staff staff)
    {
        try
        {
            errorMessage = "";

            // Validate password fields
            if (string.IsNullOrWhiteSpace(password))
            {
                errorMessage = "Password is required.";
                return;
            }

            if (password != confirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            if (password.Length < 6)
            {
                errorMessage = "Password must be at least 6 characters long.";
                return;
            }

            // Ensure email is provided
            if (string.IsNullOrWhiteSpace(staff.Person.Email))
            {
                errorMessage = "Email is required for Principal account.";
                return;
            }

            isCreating = true;
            StateHasChanged();

            // Set UserName same as Email
            staff.Person.UserName = staff.Person.Email;
            staff.Person.EmailConfirmed = true;

            // Create user account with Identity using the provided password
            var createResult = await UserManager.CreateAsync(staff.Person, password);

            if (!createResult.Succeeded)
            {
                errorMessage = string.Join(", ", createResult.Errors.Select(e => e.Description));
                isCreating = false;
                StateHasChanged();
                return;
            }

            // Add to Principal role
            var roleResult = await UserManager.AddToRoleAsync(staff.Person, nameof(UserRole.Principal));

            if (!roleResult.Succeeded)
            {
                errorMessage = "User created but failed to assign Principal role: " +
                              string.Join(", ", roleResult.Errors.Select(e => e.Description));
                isCreating = false;
                StateHasChanged();
                return;
            }

            // Add to Staff table
            var school = SchoolDataService.GetSchool();
            staff.SchoolId = school.Id;
            SchoolDataService.AddStaff(staff);

            NavigationManager.NavigateTo("/", false);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating principal: {ex.Message}";
            isCreating = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
    }
}