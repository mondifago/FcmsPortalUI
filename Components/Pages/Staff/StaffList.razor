@page "/staff"
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortalUI.Services
@namespace FcmsPortalUI.Components.Pages.Shared.DeleteConfirmation
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject StaffService StaffService

<h3>Staff List</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="NavigateToCreate">Add New Staff</button>
</div>

@if (staffList == null || !staffList.Any())
{
    <p>No staff records found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Staff ID</th>
                    <th>Profile Picture</th>
                    <th>Full Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Education Level</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var staff in staffList)
                {
                    <tr>
                        <td>@staff.Id</td>
                        <td>
                            @if (!string.IsNullOrEmpty(staff.Person.ProfilePictureUrl))
                            {
                                <img src="@staff.Person.ProfilePictureUrl" alt="Profile" style="width: 40px; height: 40px; border-radius: 50%;" />
                            }
                            else
                            {
                                <div class="bg-secondary text-white d-flex align-items-center justify-content-center" 
                                     style="width: 40px; height: 40px; border-radius: 50%;">
                                    @(staff.Person.FirstName[0])@(staff.Person.LastName[0])
                                </div>
                            }
                        </td>
                        <td>@GetFullName(staff.Person)</td>
                        <td>@staff.Person.Email</td>
                        <td>@staff.Person.PhoneNumber</td>
                        <td>@staff.Person.EducationLevel</td>
                        <td>
                            <span class="badge @(staff.Person.IsActive ? "bg-success" : "bg-danger")">
                                @(staff.Person.IsActive ? "Active" : "Inactive")
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-info me-1" @onclick="() => NavigateToDetails(staff.Id)">
                                <i class="fa fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-primary me-1" @onclick="() => NavigateToEdit(staff.Id)">
                                <i class="fa fa-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirmation(staff)">
                                <i class="fa fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<ConfirmDeleteModal 
    IsVisible="showConfirmDelete"
    Title="Delete Staff"
    Message="@($"Are you sure you want to delete {staffToDelete?.Person?.FirstName} {staffToDelete?.Person?.LastName}?")"
    OnConfirm="DeleteStaff"
    OnCancel="CancelDelete" />

@code {
    private List<Staff> staffList = new();
    private bool showConfirmDelete = false;
    private Staff? staffToDelete;

    protected override void OnInitialized()
    {
        // In a real application, you would load data from a service
        // For this example, we'll create some sample data
        LoadSampleData();
    }

    private void LoadSampleData()
    {
        staffList = new List<Staff>
        {
            new Staff
            {
                Id = 1,
                Person = new Person
                {
                    Id = 1,
                    ProfilePictureUrl = "https://example.com/profile1.jpg",
                    FirstName = "John",
                    LastName = "Doe",
                    Email = "john.doe@example.com",
                    PhoneNumber = "+2347012345678",
                    StateOfOrigin = "Lagos",
                    LgaOfOrigin = "Ikeja",
                    EducationLevel = EducationLevel.SeniorCollege,
                    IsActive = true,
                    Sex = Gender.Male,
                    DateOfBirth = new DateTime(1985, 5, 15),
                    EmergencyContact = "Jane Doe: +2347098765432"
                },
                JobRole = JobRole.Teacher,
                JobDescription = "Mathematics Teacher",
                Qualifications = new List<string> { "B.Sc Mathematics", "PGDE" },
                WorkExperience = new List<string> { "5 years teaching experience" },
                DateOfEmployment = new DateOnly(2020, 1, 15),
                AreaOfSpecialization = "Mathematics"
            },
            new Staff
            {
                Id = 2,
                Person = new Person
                {
                    Id = 2,
                    ProfilePictureUrl = "https://example.com/profile2.jpg",
                    FirstName = "Sarah",
                    LastName = "Smith",
                    Email = "sarah.smith@example.com",
                    PhoneNumber = "+2347023456789",
                    StateOfOrigin = "Abuja",
                    LgaOfOrigin = "Municipal",
                    EducationLevel = EducationLevel.Primary,
                    IsActive = true,
                    Sex = Gender.Female,
                    DateOfBirth = new DateTime(1990, 8, 22),
                    EmergencyContact = "Michael Smith: +2347087654321"
                },
                JobRole = JobRole.Admin,
                JobDescription = "School Administrator",
                Qualifications = new List<string> { "M.Ed Educational Management" },
                WorkExperience = new List<string> { "8 years administrative experience" },
                DateOfEmployment = new DateOnly(2018, 6, 10),
                AreaOfSpecialization = "Educational Administration"
            }
        };
    }

    private string GetFullName(Person person)
    {
        if (string.IsNullOrEmpty(person.MiddleName))
        {
            return $"{person.FirstName} {person.LastName}";
        }
        return $"{person.FirstName} {person.MiddleName} {person.LastName}";
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/staff/create");
    }

    private void NavigateToDetails(int id)
    {
        NavigationManager.NavigateTo($"/staff/details/{id}");
    }

    private void NavigateToEdit(int id)
    {
        NavigationManager.NavigateTo($"/staff/edit/{id}");
    }

    private void ShowDeleteConfirmation(Staff staff)
    {
        staffToDelete = staff;
        showConfirmDelete = true;
    }

    private void CancelDelete()
    {
        showConfirmDelete = false;
        staffToDelete = null;
    }

    private void DeleteStaff()
    {
        if (staffToDelete != null)
        {
            staffList.Remove(staffToDelete);
            // In a real application, you would call a service to delete from database
            showConfirmDelete = false;
            staffToDelete = null;
            StateHasChanged();
        }
    }
}