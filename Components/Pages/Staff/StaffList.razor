@page "/staff"
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortalUI.Services
@inject ISchoolDataService SchoolDataService
@using FcmsPortal.Services
@namespace FcmsPortalUI.Components.Pages.Shared.DeleteConfirmation
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject StaffService StaffService

<h3>Staff List</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="NavigateToCreate">Add New Staff</button>
</div>

@if (staffList == null || !staffList.Any())
{
    <p>No staff records found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Staff ID</th>
                    <th>Profile Picture</th>
                    <th>Full Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Job Role</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var staff in staffList)
                {
                    <tr>
                        <td>@staff.Id</td>
                        <td>
                            @if (!string.IsNullOrEmpty(staff.Person.ProfilePictureUrl))
                            {
                                <img src="@staff.Person.ProfilePictureUrl" class="rounded-circle" width="40" height="40" alt="Profile Picture" />
                            }
                            else
                            {
                                <div class="bg-light rounded-circle d-flex justify-content-center align-items-center" style="width: 40px; height: 40px;">
                                    <i class="fa fa-person"></i>
                                </div>
                            }
                        </td>
                        <td>@GetFullName(staff.Person)</td>
                        <td>@staff.Person.Email</td>
                        <td>@staff.Person.PhoneNumber</td>
                        <td>@staff.JobRole</td>
                        <td>
                            <span class="badge @(staff.Person.IsActive ? "bg-success" : "bg-danger")">
                                @(staff.Person.IsActive ? "Active" : "Inactive")
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-info me-1" @onclick="() => NavigateToDetails(staff.Id)">
                                <i class="fa fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-primary me-1" @onclick="() => NavigateToEdit(staff.Id)">
                                <i class="fa fa-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirmation(staff)">
                                <i class="fa fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<ConfirmDeleteModal 
IsVisible="showConfirmDelete"
Title="Delete Staff"
Message="@($"Are you sure you want to delete {staffToDelete?.Person?.FirstName} {staffToDelete?.Person?.LastName}?")"
OnConfirm="DeleteStaff"
OnCancel="CancelDelete" />

@code {
    //private List<Staff> staffList = new();
    private bool showConfirmDelete = false;
    private Staff? staffToDelete;
    private IEnumerable<Staff> staffList;

    protected override async Task OnInitializedAsync()
    {
        //staffList = await StaffService.GetStaffAsync();
        staffList = SchoolDataService.GetStaff();
    }

    private string GetFullName(Person person)
    {
        if (string.IsNullOrEmpty(person.MiddleName))
        {
            return $"{person.FirstName} {person.LastName}";
        }
        return $"{person.FirstName} {person.MiddleName} {person.LastName}";
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/staff/create");
    }

    private void NavigateToDetails(int id)
    {
        NavigationManager.NavigateTo($"/staff/details/{id}");
    }

    private void NavigateToEdit(int id)
    {
        NavigationManager.NavigateTo($"/staff/edit/{id}");
    }

    private void ShowDeleteConfirmation(Staff staff)
    {
        staffToDelete = staff;
        showConfirmDelete = true;
    }

    private void CancelDelete()
    {
        showConfirmDelete = false;
        staffToDelete = null;
    }

    /*private void DeleteStaff()
    {
        
        if (staffToDelete != null)
        {
            staffList.Remove(staffToDelete);
            showConfirmDelete = false;
            staffToDelete = null;
            StateHasChanged();
        }
    }*/

    private async Task DeleteStaff()
    {
        if (staffToDelete != null)
        {
            var result = await SchoolDataService.DeleteStaff(staffToDelete.Id, isHardDelete: true);
            if (result)
            {
                staffList = SchoolDataService.GetStaff();
                showConfirmDelete = false;
                staffToDelete = null;
                StateHasChanged();
            }
        }
    }


}