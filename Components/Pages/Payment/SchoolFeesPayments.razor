@page "/schoolfees/{SchoolFeesId:int}/payments"
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Services
@using FcmsPortalUI.Components.Pages.Shared
@using System.Globalization
@inject NavigationManager NavigationManager
@inject ISchoolDataService SchoolDataService
@rendermode InteractiveServer

<h3>Manage Payments</h3>

@if (schoolFees == null || student == null)
{
    <p>Loading...</p>
}
else
{
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Student Payment Summary</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h5>@Util.GetFullName(student.Person)</h5>
                        <p>ID: @student.Id</p>
                        <p>Class: @student.Person.ClassLevel</p>
                        <p>Education Level: @student.Person.EducationLevel</p>
                    </div>

                    @if (student.CurrentLearningPath != null)
                    {
                        <div class="mb-3">
                            <p><strong>Academic Year:</strong> @student.CurrentLearningPath.AcademicYear</p>
                            <p><strong>Semester:</strong> @student.CurrentLearningPath.Semester</p>
                        </div>
                    }

                    <div class="row">
                        <div class="col-md-4">
                            <p class="fw-bold">Total Amount:</p>
                            <p class="fs-5">@schoolFees.TotalAmount.ToString("C", new CultureInfo("en-NG"))</p>
                        </div>
                        <div class="col-md-4">
                            <p class="fw-bold">Total Paid:</p>
                            <p class="fs-5 text-success">@schoolFees.TotalPaid.ToString("C", new CultureInfo("en-NG"))</p>
                        </div>
                        <div class="col-md-4">
                            <p class="fw-bold">Balance:</p>
                            <p class="fs-5 @(schoolFees.Balance > 0 ? "text-danger" : "text-success")">
                                @schoolFees.Balance.ToString("C", new CultureInfo("en-NG"))
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Add New Payment</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="@newPayment" OnValidSubmit="AddPayment">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mb-3">
                            <label for="amount">Amount:</label>
                            <InputNumber id="amount" @bind-Value="newPayment.Amount" class="form-control" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="date">Date:</label>
                            <InputDate id="date" @bind-Value="newPayment.Date" class="form-control" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="paymentMethod">Payment Method:</label>
                            <InputSelect id="paymentMethod" @bind-Value="newPayment.PaymentMethod" class="form-control">
                                @foreach (var method in Enum.GetValues(typeof(PaymentMethod)))
                                {
                                    <option value="@method">@method</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group mb-3">
                            <label for="reference">Reference:</label>
                            <InputNumber id="reference" @bind-Value="newPayment.Reference" class="form-control" />
                        </div>

                        <button type="submit" class="btn btn-primary">Add Payment</button>
                    </EditForm>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Payment History</h5>
                </div>
                <div class="card-body">
                    @if (schoolFees.Payments.Count == 0)
                    {
                        <p>No payments recorded.</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Amount</th>
                                        <th>Date</th>
                                        <th>Method</th>
                                        <th>Reference</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var payment in schoolFees.Payments)
                                    {
                                        <tr>
                                            <td>@payment.Amount.ToString("C", new CultureInfo("en-NG"))</td>
                                            <td>@payment.Date.ToShortDateString()</td>
                                            <td>@payment.PaymentMethod</td>
                                            <td>@payment.Reference</td>
                                            <td>
                                                <button class="btn btn-info btn-sm me-1" @onclick="() => ViewPaymentDetails(payment)">
                                                    <i class="fa fa-eye"></i>
                                                </button>
                                                <button class="btn btn-warning btn-sm me-1" @onclick="() => EditPayment(payment)">
                                                    <i class="fa fa-pencil"></i>
                                                </button>
                                                <button class="btn btn-danger btn-sm" @onclick="() => RemovePayment(payment.Id)">
                                                    <i class="fa fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="mt-3 d-flex justify-content-between">
        <button class="btn btn-success" @onclick="ShowPaymentReport">
            <i class="fa fa-file-alt"></i> Generate Report
        </button>
        <a href="/students/details/@student?.Id" class="btn btn-primary">Done</a>
    </div>

    <StudentPaymentReportModal IsVisible="showPaymentReport"
                    Student="student"
                    OnClose="ClosePaymentReport" />
}

@if (showPaymentDetailsModal && selectedPayment != null)
{
    <div class="modal show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Payment Details</h5>
                    <button type="button" class="btn-close" @onclick="ClosePaymentDetailsModal"></button>
                </div>
                <div class="modal-body">
                    <dl class="row">
                        <dt class="col-sm-4">Amount:</dt>
                        <dd class="col-sm-8">@selectedPayment.Amount.ToString("C", new CultureInfo("en-NG"))</dd>

                        <dt class="col-sm-4">Date:</dt>
                        <dd class="col-sm-8">@selectedPayment.Date.ToString("MMMM d, yyyy")</dd>

                        <dt class="col-sm-4">Payment Method:</dt>
                        <dd class="col-sm-8">@selectedPayment.PaymentMethod</dd>

                        <dt class="col-sm-4">Reference:</dt>
                        <dd class="col-sm-8">@selectedPayment.Reference</dd>

                        <dt class="col-sm-4">Academic Year:</dt>
                        <dd class="col-sm-8">@selectedPayment.AcademicYear</dd>

                        <dt class="col-sm-4">Education Level:</dt>
                        <dd class="col-sm-8">@selectedPaymentLearningPath?.EducationLevel</dd>

                        <dt class="col-sm-4">Class Level:</dt>
                        <dd class="col-sm-8">@selectedPaymentLearningPath?.ClassLevel</dd>

                        <dt class="col-sm-4">Semester:</dt>
                        <dd class="col-sm-8">@selectedPayment.Semester</dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClosePaymentDetailsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showEditPaymentModal && editingPayment != null)
{
    <div class="modal show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Payment</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditPaymentModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingPayment" OnValidSubmit="UpdatePayment">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mb-3">
                            <label for="editAmount">Amount:</label>
                            <InputNumber id="editAmount" @bind-Value="editingPayment.Amount" class="form-control" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="editDate">Date:</label>
                            <InputDate id="editDate" @bind-Value="editingPayment.Date" class="form-control" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="editPaymentMethod">Payment Method:</label>
                            <InputSelect id="editPaymentMethod" @bind-Value="editingPayment.PaymentMethod" class="form-control">
                                @foreach (var method in Enum.GetValues(typeof(PaymentMethod)))
                                {
                                    <option value="@method">@method</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group mb-3">
                            <label for="editReference">Reference:</label>
                            <InputNumber id="editReference" @bind-Value="editingPayment.Reference" class="form-control" />
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="CloseEditPaymentModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Update Payment</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public int SchoolFeesId { get; set; }

    private SchoolFees schoolFees;
    private Student student;
    private Payment newPayment;
    private bool showPaymentDetailsModal = false;
    private Payment selectedPayment;
    private LearningPath selectedPaymentLearningPath;
    private bool showEditPaymentModal = false;
    private Payment editingPayment = null;

    protected override void OnInitialized()
    {
        schoolFees = SchoolDataService.GetSchoolFees(SchoolFeesId);
        student = SchoolDataService.GetStudentBySchoolFeesId(SchoolFeesId);

        if (student != null)
        {
            newPayment = SchoolDataService.PrepareNewPayment(student);
        }
    }

    private void AddPayment()
    {
        SchoolDataService.AddPayment(newPayment);
        schoolFees = SchoolDataService.GetSchoolFees(SchoolFeesId);
        newPayment = SchoolDataService.PrepareNewPayment(student);
    }

    private void RemovePayment(int paymentId)
    {
        SchoolDataService.DeletePayment(paymentId);
        schoolFees = SchoolDataService.GetSchoolFees(SchoolFeesId);
    }

    private void ViewPaymentDetails(Payment payment)
    {
        selectedPayment = payment;

        if (payment.LearningPathId > 0)
        {
            selectedPaymentLearningPath = SchoolDataService.GetLearningPathById(payment.LearningPathId);
        }
        showPaymentDetailsModal = true;
    }

    private void ClosePaymentDetailsModal()
    {
        showPaymentDetailsModal = false;
        selectedPayment = null;
        selectedPaymentLearningPath = null;
    }

    private void EditPayment(Payment payment)
    {
        editingPayment = new Payment
            {
                Id = payment.Id,
                Amount = payment.Amount,
                Date = payment.Date,
                PaymentMethod = payment.PaymentMethod,
                Reference = payment.Reference,
                SchoolFeesId = payment.SchoolFeesId,
                Semester = payment.Semester,
                AcademicYearStart = payment.AcademicYearStart,
                LearningPathId = payment.LearningPathId
            };
        showEditPaymentModal = true;
    }

    private void CloseEditPaymentModal()
    {
        showEditPaymentModal = false;
        editingPayment = null;
    }

    private void UpdatePayment()
    {
        SchoolDataService.UpdatePayment(editingPayment);
        schoolFees = SchoolDataService.GetSchoolFees(SchoolFeesId);
        CloseEditPaymentModal();
    }

    private bool showPaymentReport = false;

    private void ShowPaymentReport()
    {
        showPaymentReport = true;
    }

    private void ClosePaymentReport()
    {
        showPaymentReport = false;
    }
}