@page "/payments/create"
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Services
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Create Payment</h3>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@payment" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="amount">Amount:</label>
                <InputNumber id="amount" @bind-Value="payment.Amount" class="form-control" />
            </div>

            <div class="form-group mb-3">
                <label for="date">Date:</label>
                <InputDate id="date" @bind-Value="payment.Date" class="form-control" />
            </div>

            <div class="form-group mb-3">
                <label for="paymentMethod">Payment Method:</label>
                <InputSelect id="paymentMethod" @bind-Value="payment.PaymentMethod" class="form-control">
                    @foreach (var method in Enum.GetValues(typeof(PaymentMethod)))
                    {
                        <option value="@method">@method</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group mb-3">
                <label for="reference">Reference:</label>
                <InputNumber id="reference" @bind-Value="payment.Reference" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </EditForm>
    </div>
</div>

@code {
    private Payment payment = new Payment
        {
            Date = DateTime.Today
        };

    private void HandleValidSubmit()
    {
        //TODO: 
        // In a real application, this goes to data source
        // For now, we'll just navigate back to the list
        // will implement a PaymentService to handle data operations
        // Assign a new ID (in a real app this would be handled by the database)
        payment.Id = PaymentService.GetNextId();

        PaymentService.AddPayment(payment);

        NavigationManager.NavigateTo("/payments");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/payments");
    }
}