@page "/payments/create"
@page "/payments/create/{StudentId:int?}"
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Services
@inject NavigationManager NavigationManager
@inject ISchoolDataService SchoolDataService
@rendermode InteractiveServer

<h3>Create Payment</h3>

@if (student != null)
{
    <div class="alert alert-info">
        <strong>Creating payment for:</strong> @student.Person.FirstName @student.Person.LastName
        <p class="mb-0">School Fees ID: @student.Person.SchoolFees?.Id</p>
    </div>
}

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@payment" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (student == null)
            {
                <div class="form-group mb-3">
                    <label for="studentId" class="form-label">Student:</label>
                    <select id="studentId" class="form-select" @bind="selectedStudentId">
                        <option value="0">-- Select Student --</option>
                        @foreach (var s in students)
                        {
                            <option value="@s.Id">@s.Person.FirstName @s.Person.LastName</option>
                        }
                    </select>
                </div>
            }

            <div class="form-group mb-3">
                <label for="amount" class="form-label">Amount:</label>
                <InputNumber id="amount" @bind-Value="payment.Amount" class="form-control" />
            </div>

            <div class="form-group mb-3">
                <label for="date" class="form-label">Date:</label>
                <InputDate id="date" @bind-Value="payment.Date" class="form-control" />
            </div>

            <div class="form-group mb-3">
                <label for="paymentMethod" class="form-label">Payment Method:</label>
                <InputSelect id="paymentMethod" @bind-Value="payment.PaymentMethod" class="form-control">
                    @foreach (var method in Enum.GetValues(typeof(PaymentMethod)))
                    {
                        <option value="@method">@method</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group mb-3">
                <label for="reference" class="form-label">Reference:</label>
                <InputNumber id="reference" @bind-Value="payment.Reference" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Save Payment</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int? StudentId { get; set; }

    private Payment payment = new Payment
        {
            Date = DateTime.Today,
            Reference = new Random().Next(10000, 99999)
        };

    private List<Student> students = new List<Student>();
    private Student student;
    private int selectedStudentId;

    protected override void OnInitialized()
    {
        students = SchoolDataService.GetStudents().ToList();

        if (!StudentId.HasValue)
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("studentId", out var studentIdParam))
            {
                if (int.TryParse(studentIdParam, out var id))
                {
                    StudentId = id;
                }
            }
        }

        if (StudentId.HasValue && StudentId.Value > 0)
        {
            student = SchoolDataService.GetStudentById(StudentId.Value);
            if (student != null)
            {
                selectedStudentId = student.Id;
                if (student.Person.SchoolFees == null)
                {
                    student.Person.SchoolFees = new SchoolFees();
                    student.Person.SchoolFees.Id = SchoolDataService.GetNextSchoolFeesId();
                    student.Person.SchoolFees.Payments = new List<Payment>();
                    SchoolDataService.UpdateStudent(student);
                }
                payment.SchoolFeesId = student.Person.SchoolFees.Id;
            }
        }
    }

    private void HandleValidSubmit()
    {
        if (student == null && selectedStudentId > 0)
        {
            student = SchoolDataService.GetStudentById(selectedStudentId);
            if (student != null && student.Person.SchoolFees != null)
            {
                payment.SchoolFeesId = student.Person.SchoolFees.Id;
            }
        }

        if (student != null)
        {
            if (student.Person.SchoolFees == null)
            {
                student.Person.SchoolFees = new SchoolFees();
                student.Person.SchoolFees.Id = SchoolDataService.GetNextSchoolFeesId();
                student.Person.SchoolFees.Payments = new List<Payment>();
                SchoolDataService.UpdateStudent(student);
            }
            payment.SchoolFeesId = student.Person.SchoolFees.Id;
            SchoolDataService.AddPayment(payment);

            if (student.Person.SchoolFees.Payments == null)
                student.Person.SchoolFees.Payments = new List<Payment>();

            student.Person.SchoolFees.Payments.Add(payment);
            SchoolDataService.UpdateStudent(student);

            NavigationManager.NavigateTo($"/students/details/{student.Id}");
        }
        else
        {
            SchoolDataService.AddPayment(payment);
            NavigationManager.NavigateTo("/payments");
        }
    }

    private void Cancel()
    {
        if (student != null)
        {
            NavigationManager.NavigateTo($"/students/details/{student.Id}");
        }
        else
        {
            NavigationManager.NavigateTo("/payments");
        }
    }
}