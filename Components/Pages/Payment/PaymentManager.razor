@page "/payment"
@rendermode InteractiveServer
@inject PaymentService PaymentService
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Services
<h1>Payment Manager</h1>

<div class="mb-3">
    <h4>@(isEditing ? "Edit Payment" : "Add New Payment")</h4>
    <EditForm Model="currentPayment" OnValidSubmit="HandleAddOrUpdatePayment">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label>Amount</label>
            <InputNumber class="form-control" @bind-Value="currentPayment.Amount" />
        </div>
        <div class="form-group">
            <label>Date</label>
            <InputDate class="form-control" @bind-Value="currentPayment.Date" />
        </div>
        <div class="form-group">
            <label>Payment Method</label>
            <InputSelect class="form-control" @bind-Value="currentPayment.PaymentMethod">
                @foreach (PaymentMethod method in Enum.GetValues(typeof(PaymentMethod)))
                {
                    <option value="@method">@method</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label>Reference</label>
            <InputNumber class="form-control" @bind-Value="currentPayment.Reference" />
        </div>
        <button type="submit" class="btn btn-primary mt-2">@(isEditing ? "Update" : "Add") Payment</button>
        @if (isEditing)
        {
            <button type="button" class="btn btn-secondary mt-2" @onclick="CancelEdit">Cancel</button>
        }
    </EditForm>
</div>

<!-- Payment List -->
@if (payments != null && payments.Any())
{
    <table class="table mt-4">
        <thead>
            <tr>
                <th>ID</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Payment Method</th>
                <th>Reference</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var payment in payments)
            {
                <tr>
                    <td>@payment.Id</td>
                    <td>@payment.Amount.ToString("C")</td>
                    <td>@payment.Date.ToShortDateString()</td>
                    <td>@payment.PaymentMethod</td>
                    <td>@payment.Reference</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => StartEdit(payment)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeletePayment(payment.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No payments found.</p>
}

@code {
    private List<Payment> payments = new();
    private Payment currentPayment = new();
    private bool isEditing = false;

    protected override void OnInitialized()
    {
        payments = PaymentService.GetPayments();
    }

    private void HandleAddOrUpdatePayment()
    {
        if (isEditing)
        {
            PaymentService.UpdatePayment(currentPayment);
            isEditing = false;
        }
        else
        {
            PaymentService.AddPayment(currentPayment);
        }
        currentPayment = new(); // Reset form
        payments = PaymentService.GetPayments(); // Refresh list
    }

    private void StartEdit(Payment payment)
    {
        currentPayment = new Payment
            {
                Id = payment.Id,
                Amount = payment.Amount,
                Date = payment.Date,
                PaymentMethod = payment.PaymentMethod,
                Reference = payment.Reference
            };
        isEditing = true;
    }

    private void DeletePayment(int id)
    {
        PaymentService.DeletePayment(id);
        payments = PaymentService.GetPayments();
        if (isEditing && currentPayment.Id == id)
        {
            currentPayment = new();
            isEditing = false;
        }
    }

    private void CancelEdit()
    {
        currentPayment = new();
        isEditing = false;
    }
}
