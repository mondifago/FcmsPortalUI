@using FcmsPortal.Models
@using FcmsPortal.Enums
@using Microsoft.AspNetCore.Components.Forms

<div class="modal @(IsVisible ? "show" : "")" style="display: @(IsVisible ? "block" : "none");" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">@(IsEditing ? "Edit" : "Create") Schedule Entry</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@ScheduleEntry" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="scheduleType" class="form-label">Schedule Type<span class="text-danger">*</span></label>
                            <select id="scheduleType" class="form-select" @bind="scheduleType">
                                <option value="@ScheduleType.Event">Event</option>
                                <option value="@ScheduleType.Meeting">Meeting</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="title" class="form-label">Title<span class="text-danger">*</span></label>
                            <InputText id="title" @bind-Value="ScheduleEntry.Title" class="form-control" />
                            <ValidationMessage For="@(() => ScheduleEntry.Title)" />
                        </div>
                    </div>

                    @if (scheduleType == ScheduleType.Event)
                    {
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <label for="eventDetails" class="form-label">Event Details<span class="text-danger">*</span></label>
                                <InputTextArea id="eventDetails" @bind-Value="ScheduleEntry.Event" class="form-control" rows="3" />
                            </div>
                        </div>
                    }
                    else if (scheduleType == ScheduleType.Meeting)
                    {
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <label for="meetingDetails" class="form-label">Meeting Details<span class="text-danger">*</span></label>
                                <InputTextArea id="meetingDetails" @bind-Value="ScheduleEntry.Meeting" class="form-control" rows="3" />
                            </div>
                        </div>
                    }

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="date" class="form-label">Date<span class="text-danger">*</span></label>
                            <InputDate id="date" @bind-Value="scheduleDate" class="form-control" />
                        </div>
                        <div class="col-md-3">
                            <label for="startTime" class="form-label">Start Time<span class="text-danger">*</span></label>
                            <InputText id="startTime" @bind-Value="startTimeString" type="time" class="form-control" />
                        </div>
                        <div class="col-md-3">
                            <label for="duration" class="form-label">Duration (minutes)<span class="text-danger">*</span></label>
                            <InputNumber id="duration" @bind-Value="durationMinutes" class="form-control" min="15" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="venue" class="form-label">Venue<span class="text-danger">*</span></label>
                            <InputText id="venue" @bind-Value="ScheduleEntry.Venue" class="form-control" />
                            <ValidationMessage For="@(() => ScheduleEntry.Venue)" />
                        </div>
                    </div>

                    <div class="form-check mb-3">
                        <InputCheckbox id="isRecurring" @bind-Value="ScheduleEntry.IsRecurring" class="form-check-input" />
                        <label class="form-check-label" for="isRecurring">Recurring Schedule</label>
                    </div>

                    @if (ScheduleEntry.IsRecurring)
                    {
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="recurrencePattern" class="form-label">Recurrence Pattern<span class="text-danger">*</span></label>
                                <InputSelect id="recurrencePattern" @bind-Value="ScheduleEntry.RecurrencePattern" class="form-select">
                                    <option value="">-- Select Pattern --</option>
                                    @foreach (var pattern in Enum.GetValues(typeof(RecurrenceType)))
                                    {
                                        <option value="@pattern">@pattern</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-4">
                                <label for="recurrenceInterval" class="form-label">Interval<span class="text-danger">*</span></label>
                                <InputNumber id="recurrenceInterval" @bind-Value="ScheduleEntry.RecurrenceInterval" class="form-control" min="1" />
                            </div>
                            <div class="col-md-4">
                                <label for="endDate" class="form-label">End Date<span class="text-danger">*</span></label>
                                <InputDate id="endDate" @bind-Value="ScheduleEntry.EndDate" class="form-control" />
                            </div>
                        </div>
                        @if (ScheduleEntry.RecurrencePattern == RecurrenceType.Weekly)
                        {
                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label class="form-label">Days of Week</label>
                                    <div class="d-flex flex-wrap gap-2">
                                        @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
                                        {
                                            var currentDay = day;
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="checkbox"
                                                       id="day-@day"
                                                       checked="@IsDaySelected(currentDay)"
                                                       @onchange="(e) => ToggleDayOfWeek(currentDay, e.Value)" />
                                                <label class="form-check-label" for="day-@day">
                                                    @day.ToString()
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        else if (ScheduleEntry.RecurrencePattern == RecurrenceType.Monthly)
                        {
                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label for="dayOfMonth" class="form-label">Day of Month</label>
                                    <InputNumber id="dayOfMonth" @bind-Value="ScheduleEntry.DayOfMonth" class="form-control" min="1" max="31" />
                                </div>
                            </div>
                        }
                    }

                    <div class="d-flex justify-content-end mt-4">
                        <button type="button" class="btn btn-secondary me-2" @onclick="Close">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public ScheduleEntry ScheduleEntry { get; set; } = new();
    [Parameter] public Person CurrentPerson { get; set; }
    [Parameter] public EventCallback<ScheduleEntry> OnSave { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private ScheduleType scheduleType = ScheduleType.Event;
    private DateTime scheduleDate = DateTime.Today;
    private string startTimeString = "09:00";
    private int durationMinutes = 60;
    private bool IsEditing => ScheduleEntry?.Id > 0;

    protected override void OnParametersSet()
    {
        if (IsVisible && ScheduleEntry != null)
        {
            scheduleDate = ScheduleEntry.DateTime.Date;
            startTimeString = ScheduleEntry.DateTime.ToString("HH:mm");
            durationMinutes = (int)ScheduleEntry.Duration.TotalMinutes;

            if (ScheduleEntry.ClassSession != null)
            {
                scheduleType = ScheduleType.ClassSession;
            }

            if (scheduleType != ScheduleType.ClassSession &&
                !string.IsNullOrEmpty(ScheduleEntry.Meeting))
            {
                scheduleType = ScheduleType.Meeting;
            }

            if (scheduleType != ScheduleType.ClassSession &&
                scheduleType != ScheduleType.Meeting &&
                !string.IsNullOrEmpty(ScheduleEntry.Event))
            {
                scheduleType = ScheduleType.Event;
            }

            if (ScheduleEntry.DaysOfWeek == null)
            {
                ScheduleEntry.DaysOfWeek = new List<DayOfWeek>();
            }

            if (ScheduleEntry.DaysOfWeek.Count == 0)
            {
                ScheduleEntry.DaysOfWeek.Add(ScheduleEntry.DateTime.DayOfWeek);
            }
        }
    }


    private bool IsDaySelected(DayOfWeek day)
    {
        return ScheduleEntry.DaysOfWeek?.Contains(day) == true;
    }

    private void ToggleDayOfWeek(DayOfWeek day, object isChecked)
    {
        if (ScheduleEntry.DaysOfWeek == null)
        {
            ScheduleEntry.DaysOfWeek = new List<DayOfWeek>();
        }

        bool isSelected = (bool)isChecked;

        if (isSelected && !ScheduleEntry.DaysOfWeek.Contains(day))
        {
            ScheduleEntry.DaysOfWeek.Add(day);
        }
        else if (!isSelected && ScheduleEntry.DaysOfWeek.Contains(day))
        {
            ScheduleEntry.DaysOfWeek.Remove(day);
        }
    }

    private async Task HandleSubmit()
    {
        if (TimeOnly.TryParse(startTimeString, out var timeOnly))
        {
            ScheduleEntry.DateTime = scheduleDate.Add(timeOnly.ToTimeSpan());
        }

        ScheduleEntry.Duration = TimeSpan.FromMinutes(durationMinutes);

        if (scheduleType == ScheduleType.Meeting)
        {
            if (string.IsNullOrEmpty(ScheduleEntry.Meeting))
            {
                ScheduleEntry.Meeting = ScheduleEntry.Title;
            }
        }

        if (scheduleType == ScheduleType.Event)
        {
            if (string.IsNullOrEmpty(ScheduleEntry.Event))
            {
                ScheduleEntry.Event = ScheduleEntry.Title;
            }
        }

        if (scheduleType != ScheduleType.Meeting)
        {
            ScheduleEntry.Meeting = null;
        }

        if (scheduleType != ScheduleType.Event)
        {
            ScheduleEntry.Event = null;
        }

        if (scheduleType != ScheduleType.ClassSession)
        {
            ScheduleEntry.ClassSession = null;
        }

        await OnSave.InvokeAsync(ScheduleEntry);
    }


    private void Close()
    {
        OnClose.InvokeAsync();
    }
}

