@page "/guardians/create"
@inject GuardianService GuardianService
@inject NavigationManager NavigationManager
@inject AddressService AddressService
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortalUI.Services
@using System.ComponentModel.DataAnnotations;
@rendermode InteractiveServer

<PageTitle>Add New Guardian</PageTitle>

<div class="container">
    <h1>Add New Guardian</h1>

    <div class="card">
        <div class="card-body">
            <EditForm Model="newGuardian" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <div class="col-md-12 mb-4 text-center">
                        <label for="profilePicture" class="form-label">Profile Picture</label>
                        <div class="d-flex justify-content-center">
                            <div class="position-relative" style="width: 150px; height: 150px;">
                                @if (!string.IsNullOrEmpty(profilePictureUrl))
                                {
                                    <img src="@profilePictureUrl" class="img-thumbnail rounded-circle" style="width: 150px; height: 150px; object-fit: cover;" alt="Profile Picture" />
                                }
                                else
                                {
                                    <div class="bg-light rounded-circle d-flex justify-content-center align-items-center" style="width: 150px; height: 150px;">
                                        <i class="oi oi-person" style="font-size: 3rem;"></i>
                                    </div>
                                }
                            </div>
                        </div>
                        <InputFile id="profilePicture" OnChange="HandleFileSelection" class="form-control mt-2" accept="image/*" />
                    </div>
                </div>

                <h4 class="mb-3">Personal Information</h4>
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="firstName" class="form-label">First Name <span class="text-danger">*</span></label>
                        <InputText id="firstName" class="form-control" @bind-Value="newGuardian.Person.FirstName" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="middleName" class="form-label">Middle Name</label>
                        <InputText id="middleName" class="form-control" @bind-Value="newGuardian.Person.MiddleName" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="lastName" class="form-label">Last Name <span class="text-danger">*</span></label>
                        <InputText id="lastName" class="form-control" @bind-Value="newGuardian.Person.LastName" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="gender" class="form-label">Gender</label>
                        <InputSelect id="gender" class="form-select" @bind-Value="newGuardian.Person.Sex">
                            <option value="">-- Select Gender --</option>
                            @foreach (var gender in Enum.GetValues(typeof(Gender)))
                            {
                                <option value="@gender">@gender</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="stateOfOrigin" class="form-label">State of Origin <span class="text-danger">*</span></label>
                        <InputText id="stateOfOrigin" class="form-control" @bind-Value="newGuardian.Person.StateOfOrigin" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="lgaOfOrigin" class="form-label">LGA of Origin <span class="text-danger">*</span></label>
                        <InputText id="lgaOfOrigin" class="form-control" @bind-Value="newGuardian.Person.LgaOfOrigin" />
                    </div>
                </div>

                <h4 class="mb-3">Contact Information</h4>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="email" class="form-label">Email <span class="text-danger">*</span></label>
                        <InputText id="email" class="form-control" @bind-Value="newGuardian.Person.Email" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="phoneNumber" class="form-label">Phone Number <span class="text-danger">*</span></label>
                        <InputText id="phoneNumber" class="form-control" @bind-Value="newGuardian.Person.PhoneNumber" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 mb-3">
                        <label for="emergencyContact" class="form-label">Emergency Contact</label>
                        <InputText id="emergencyContact" class="form-control" @bind-Value="newGuardian.Person.EmergencyContact" />
                    </div>
                </div>

                <h4 class="mb-3">Guardian Details</h4>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="relationship" class="form-label">Relationship to Student</label>
                        <InputSelect id="relationship" class="form-select" @bind-Value="newGuardian.RelationshipToStudent">
                            <option value="">-- Select Relationship --</option>
                            @foreach (var relationship in Enum.GetValues(typeof(Relationship)))
                            {
                                <option value="@relationship">@relationship</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="occupation" class="form-label">Occupation <span class="text-danger">*</span></label>
                        <InputText id="occupation" class="form-control" @bind-Value="newGuardian.Occupation" />
                    </div>
                    <div class="col-md-12 mb-3">
                        <label class="form-label">Active Status</label>
                        <InputCheckbox class="form-check-input" @bind-Value="newGuardian.Person.IsActive" checked="@newGuardian.Person.IsActive" />
                        <label class="form-check-label">Active</label>
                    </div>
                </div>

                <h4 class="mb-3">Address Information</h4>
                <Address />

                <div class="d-flex gap-2 mt-4">
                    <button type="submit" class="btn btn-primary">Save Guardian</button>
                    <a href="/guardians" class="btn btn-secondary">Cancel</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Guardian newGuardian = new Guardian { Person = new Person { Addresses = new List<Address>(), IsActive = true } };
    private string profilePictureUrl = "";
    private IBrowserFile? profilePictureFile;

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        profilePictureFile = e.File;
        if (profilePictureFile != null && profilePictureFile.ContentType.StartsWith("image/"))
        {
            const long maxSize = 1024 * 1024;
            if (profilePictureFile.Size <= maxSize)
            {
                var buffer = new byte[profilePictureFile.Size];
                await profilePictureFile.OpenReadStream(maxSize).ReadAsync(buffer);
                profilePictureUrl = $"data:{profilePictureFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
                newGuardian.Person.ProfilePictureUrl = profilePictureUrl;
            }
        }
    }

    private async Task HandleSubmit()
    {
        var validationResults = new List<ValidationResult>();
        if (!GuardianService.ValidateGuardian(newGuardian, out validationResults))
        {
            // Validation errors are handled by DataAnnotationsValidator in the UI
            return;
        }

        if (profilePictureFile != null)
        {
            newGuardian.Person.ProfilePictureUrl = profilePictureUrl;
        }

        GuardianService.AddGuardian(newGuardian);
        newGuardian = new Guardian { Person = new Person { Addresses = new List<Address>(), IsActive = true } };
        profilePictureUrl = "";
        profilePictureFile = null;
        NavigationManager.NavigateTo("/guardians");
    }
}