@page "/guardians/create"
@inject AddressService AddressService
@inject NavigationManager NavigationManager
@inject ISchoolDataService SchoolDataService
@using Microsoft.AspNetCore.Components.Forms
@using FcmsPortalUI.Components.Pages.Shared
@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortalUI.Services
@rendermode InteractiveServer

<PageTitle>Add New Guardian</PageTitle>

<div class="container">
    <h1>Add New Guardian</h1>

    <div class="card">
        <div class="card-body">
            <EditForm Model="newGuardian" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <div class="col-md-12 mb-4 text-center">
                        <ProfileThumbnailForm ImageUrl="@profilePictureUrl"
                                              ImageUrlChanged="HandleProfilePictureChanged" />
                    </div>
                </div>

                <h4 class="mb-3">Personal Information</h4>
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="firstName" class="form-label">First Name</label>
                        <InputText id="firstName" class="form-control" @bind-Value="newGuardian.Person.FirstName" />
                        <ValidationMessage For="@(() => newGuardian.Person.FirstName)" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="middleName" class="form-label">Middle Name</label>
                        <InputText id="middleName" class="form-control" @bind-Value="newGuardian.Person.MiddleName" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="lastName" class="form-label">Last Name</label>
                        <InputText id="lastName" class="form-control" @bind-Value="newGuardian.Person.LastName" />
                        <ValidationMessage For="@(() => newGuardian.Person.LastName)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="gender" class="form-label">Gender</label>
                        <InputSelect id="gender" class="form-select" @bind-Value="newGuardian.Person.Sex">
                            <option value="">-- Select Gender --</option>
                            @foreach (var gender in Enum.GetValues(typeof(Gender)))
                            {
                                <option value="@gender">@gender</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => newGuardian.Person.Sex)" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="stateOfOrigin" class="form-label">State of Origin</label>
                        <InputText id="stateOfOrigin" class="form-control" @bind-Value="newGuardian.Person.StateOfOrigin" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="lgaOfOrigin" class="form-label">LGA of Origin</label>
                        <InputText id="lgaOfOrigin" class="form-control" @bind-Value="newGuardian.Person.LgaOfOrigin" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="newGuardian.Person.Email" />
                        <ValidationMessage For="@(() => newGuardian.Person.Email)" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="phoneNumber" class="form-label">Phone Number</label>
                        <InputText id="phoneNumber" class="form-control" @bind-Value="phoneNumber" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="emergencyContact" class="form-label">Emergency Contact</label>
                        <InputText id="emergencyContact" class="form-control" @bind-Value="newGuardian.Person.EmergencyContact" />
                    </div>
                </div>

                <h4 class="mb-3">Guardian Details</h4>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="relationship" class="form-label">Relationship to Student</label>
                        <InputSelect id="relationship" class="form-select" @bind-Value="newGuardian.RelationshipToStudent">
                            <option value="">-- Select Relationship --</option>
                            @foreach (var relationship in Enum.GetValues(typeof(Relationship)))
                            {
                                <option value="@relationship">@relationship</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => newGuardian.RelationshipToStudent)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="occupation" class="form-label">Occupation</label>
                        <InputText id="occupation" class="form-control" @bind-Value="newGuardian.Occupation" />
                        <ValidationMessage For="@(() => newGuardian.Occupation)" />
                    </div>

                    <div class="mb-3">
                        <label for="dateOfEnrollment" class="form-label">Date of Enrollment</label>
                        <InputDate id="dateOfEnrollment" class="form-control" @bind-Value="newGuardian.Person.DateOfEnrollment" />
                    </div>

                    <div class="form-check form-switch mb-3">
                        <InputCheckbox id="isActive" class="form-check-input" @bind-Value="newGuardian.Person.IsActive" />
                        <label class="form-check-label" for="isActive">Status</label>
                    </div>
                </div>

                <h4 class="mb-3">Address Information</h4>
                @if (showAddressForm)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">Add New Address</h5>
                            <AddressForm Address="@newAddress"
                                         OnValidSubmit="SaveAddress"
                                         OnCancel="CancelAddAddress"
                                         ButtonText="Save Address" />
                        </div>
                    </div>
                }
                else
                {
                    <button type="button" class="btn btn-outline-primary mb-3" @onclick="ShowAddressForm">
                        <i class="fa fa-plus"></i> Add Address
                    </button>
                }

                @if (addresses.Any())
                {
                    <div class="table-responsive mb-3">
                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>Street</th>
                                    <th>City</th>
                                    <th>State</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var address in addresses)
                                {
                                    <tr>
                                        <td>@address.AddressType</td>
                                        <td>@address.Street</td>
                                        <td>@address.City</td>
                                        <td>@address.State</td>
                                        <td>
                                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveAddress(address)">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }

                <div class="d-flex gap-2 mt-4">
                    <button type="submit" class="btn btn-primary">Save Guardian</button>
                    <a href="/guardians" class="btn btn-secondary">Cancel</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Guardian newGuardian = new Guardian
        {
            Person = new Person
            {
                Addresses = new List<Address>(),
                DateOfEnrollment = DateTime.Now,
                IsActive = true
            }
        };

    private string phoneNumber = "";
    private List<Address> addresses = new List<Address>();
    private Address newAddress = new Address();
    private bool showAddressForm = false;
    private string profilePictureUrl = "";

    private void ShowAddressForm()
    {
        showAddressForm = true;
        newAddress = new Address();
    }

    private void CancelAddAddress()
    {
        showAddressForm = false;
    }

    private void SaveAddress(Address address)
    {
        addresses.Add(new Address
            {
                Street = address.Street,
                City = address.City,
                State = address.State,
                PostalCode = address.PostalCode,
                Country = address.Country,
                AddressType = address.AddressType
            });
        showAddressForm = false;
    }

    private void RemoveAddress(Address address)
    {
        addresses.Remove(address);
    }

    private void HandleProfilePictureChanged(string newImageUrl)
    {
        profilePictureUrl = newImageUrl;
        StateHasChanged();
    }

    private void HandleSubmit()
    {
        newGuardian.Person.ProfilePictureUrl = profilePictureUrl;
        if (!string.IsNullOrEmpty(phoneNumber))
        {
            newGuardian.Person.PhoneNumber = phoneNumber;
        }

        newGuardian.Person.Addresses = addresses;
        SchoolDataService.AddGuardian(newGuardian);
        NavigationManager.NavigateTo("/guardians");
    }
}