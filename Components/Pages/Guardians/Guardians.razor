@page "/guardians"
@inject ISchoolDataService SchoolDataService
@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortalUI.Components.Pages.Shared
@rendermode InteractiveServer

<PageTitle>Guardians</PageTitle>

<div class="container">
    <h1>Guardians Management</h1>

    <div class="mb-3">
        <a href="/guardians/create" class="btn btn-primary">
            <i class="fa fa-plus"></i> Add New Guardian
        </a>
    </div>

    @if (guardians == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!guardians.Any())
    {
        <div class="alert alert-info">
            No guardians found. Add a new guardian to get started.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Profile</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var guardian in guardians)
                    {
                        <tr>
                            <td>@guardian.Id</td>
                            <td>
                                <ProfileThumbnailList Person="guardian.Person" />
                            </td>
                            <td>@Util.GetFullName(guardian.Person)</td>
                            <td>@guardian.Person.Email</td>
                            <td>@guardian.Person.PhoneNumber</td>
                            <td>
                                <span class="badge @(guardian.Person.IsActive ? "bg-success" : "bg-danger")">
                                    @(guardian.Person.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a href="/guardians/details/@guardian.Id" class="btn btn-info btn-sm">
                                        <i class="fa fa-eye"></i> View
                                    </a>
                                    <a href="/guardians/edit/@guardian.Id" class="btn btn-warning btn-sm">
                                        <i class="fa fa-pencil"></i> Edit
                                    </a>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteGuardian(guardian.Id)">
                                        <i class="fa fa-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <ConfirmDeleteModal IsVisible="showDeleteConfirmation"
                        Title="Confirm Delete"
                        Message="Are you sure you want to delete this guardian?"
                        OnConfirm="ConfirmDelete"
                        OnCancel="CancelDelete" />
</div>

@code {
    private IEnumerable<Guardian>? guardians;
    private int guardianIdToDelete;
    private bool showDeleteConfirmation = false;

    protected override void OnInitialized()
    {
        guardians = SchoolDataService.GetGuardians();
    }

    private void DeleteGuardian(int id)
    {
        guardianIdToDelete = id;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
    }

    private async Task ConfirmDelete()
    {
        var guardian = SchoolDataService.GetGuardianById(guardianIdToDelete);

        if (guardian != null && !string.IsNullOrEmpty(guardian.Person.ProfilePictureUrl) && !guardian.Person.ProfilePictureUrl.StartsWith("data:"))
        {
            var attachment = new FileAttachment { FilePath = guardian.Person.ProfilePictureUrl };
            await SchoolDataService.DeleteFileAsync(attachment);
        }

        var result = SchoolDataService.DeleteGuardian(guardianIdToDelete);
        if (result)
        {
            guardians = SchoolDataService.GetGuardians();
            showDeleteConfirmation = false;
            StateHasChanged();
        }
    }
}