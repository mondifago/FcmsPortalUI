@page "/guardians/edit/{Id:int}"
@inject GuardianService GuardianService
@inject AddressService AddressService
@inject NavigationManager NavigationManager
@inject ISchoolDataService SchoolDataService
@using FcmsPortal.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortalUI.Services
@rendermode InteractiveServer

<PageTitle>Edit Guardian</PageTitle>

<div class="container">
    @if (guardian == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h1>Edit Guardian</h1>
        
        <div class="card">
            <div class="card-body">
                <EditForm Model="guardian" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    
                    <div class="row">
                        <div class="col-md-12 mb-4 text-center">
                            <div class="mb-3">
                                <label for="profilePicture" class="form-label">Profile Picture</label>
                                <div class="d-flex justify-content-center">
                                    <div class="position-relative" style="width: 150px; height: 150px;">
                                        @if (!string.IsNullOrEmpty(profilePictureUrl))
                                        {
                                            <img src="@profilePictureUrl" class="img-thumbnail rounded-circle" style="width: 150px; height: 150px; object-fit: cover;" alt="Profile Picture" />
                                        }
                                        else if (!string.IsNullOrEmpty(guardian.Person.ProfilePictureUrl))
                                        {
                                            <img src="@guardian.Person.ProfilePictureUrl" class="img-thumbnail rounded-circle" style="width: 150px; height: 150px; object-fit: cover;" alt="Profile Picture" />
                                        }
                                        else
                                        {
                                            <div class="bg-light rounded-circle d-flex justify-content-center align-items-center" style="width: 150px; height: 150px;">
                                                <i class="fa fa-person" style="font-size: 3rem;"></i>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <InputFile OnChange="HandleFileSelection" class="form-control mt-2" accept="image/*" />
                            </div>
                        </div>
                    </div>
                    
                    <h4 class="mb-3">Personal Information</h4>
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="firstName" class="form-label">First Name</label>
                            <InputText id="firstName" class="form-control" @bind-Value="guardian.Person.FirstName" />
                            <ValidationMessage For="@(() => guardian.Person.FirstName)" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="middleName" class="form-label">Middle Name</label>
                            <InputText id="middleName" class="form-control" @bind-Value="guardian.Person.MiddleName" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="lastName" class="form-label">Last Name</label>
                            <InputText id="lastName" class="form-control" @bind-Value="guardian.Person.LastName" />
                            <ValidationMessage For="@(() => guardian.Person.LastName)" />
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="gender" class="form-label">Gender</label>
                            <InputSelect id="gender" class="form-select" @bind-Value="guardian.Person.Sex">
                                <option value="">-- Select Gender --</option>
                                @foreach (var gender in Enum.GetValues(typeof(Gender)))
                                {
                                    <option value="@gender">@gender</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => guardian.Person.Sex)" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="stateOfOrigin" class="form-label">State of Origin</label>
                            <InputText id="stateOfOrigin" class="form-control" @bind-Value="guardian.Person.StateOfOrigin" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="lgaOfOrigin" class="form-label">LGA of Origin</label>
                            <InputText id="lgaOfOrigin" class="form-control" @bind-Value="guardian.Person.LgaOfOrigin" />
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="guardian.Person.Email" />
                            <ValidationMessage For="@(() => guardian.Person.Email)" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="phoneNumber" class="form-label">Phone Number</label>
                            <InputText id="phoneNumber" class="form-control" @bind-Value="phoneNumber" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="emergencyContact" class="form-label">Emergency Contact</label>
                            <InputText id="emergencyContact" class="form-control" @bind-Value="guardian.Person.EmergencyContact" />
                        </div>
                    </div>

                    <h4 class="mb-3">Guardian Details</h4>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="relationship" class="form-label">Relationship to Student</label>
                            <InputSelect id="relationship" class="form-select" @bind-Value="guardian.RelationshipToStudent">
                                <option value="">-- Select Relationship --</option>
                                @foreach (var relationship in Enum.GetValues(typeof(Relationship)))
                                {
                                    <option value="@relationship">@relationship</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => guardian.RelationshipToStudent)" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="occupation" class="form-label">Occupation</label>
                            <InputText id="occupation" class="form-control" @bind-Value="guardian.Occupation" />
                            <ValidationMessage For="@(() => guardian.Occupation)" />
                        </div>
                        <div class="form-check form-switch mb-3">
                            <InputCheckbox id="isActive" class="form-check-input" @bind-Value="guardian.Person.IsActive" />
                            <label class="form-check-label" for="isActive">Is Active</label>
                        </div>
                    </div>
                    
                    <h4 class="mb-3">Address Information</h4>
                    @if (showAddressForm)
                    {
                        <div class="card mb-3">
                            <div class="card-body">
                                <h5 class="card-title">Add New Address</h5>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="street" class="form-label">Street</label>
                                        <InputText id="street" class="form-control" @bind-Value="newAddress.Street" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="city" class="form-label">City</label>
                                        <InputText id="city" class="form-control" @bind-Value="newAddress.City" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="state" class="form-label">State</label>
                                        <InputText id="state" class="form-control" @bind-Value="newAddress.State" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="postalCode" class="form-label">Postal Code</label>
                                        <InputText id="postalCode" class="form-control" @bind-Value="newAddress.PostalCode" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="country" class="form-label">Country</label>
                                        <InputText id="country" class="form-control" @bind-Value="newAddress.Country" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="addressType" class="form-label">Address Type</label>
                                        <InputSelect id="addressType" class="form-select" @bind-Value="newAddress.AddressType">
                                            @foreach (AddressType type in Enum.GetValues(typeof(AddressType)))
                                            {
                                                <option value="@type">@type</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="d-flex gap-2">
                                    <button type="button" class="btn btn-success" @onclick="AddAddress">Save Address</button>
                                    <button type="button" class="btn btn-secondary" @onclick="CancelAddAddress">Cancel</button>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-primary mb-3" @onclick="ShowAddressForm">
                            <i class="fa fa-plus"></i> Add Address
                        </button>
                    }
                    
                    @if (addresses.Any())
                    {
                        <div class="table-responsive mb-3">
                            <table class="table table-sm table-bordered">
                                <thead>
                                    <tr>
                                        <th>Type</th>
                                        <th>Street</th>
                                        <th>City</th>
                                        <th>State</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var address in addresses)
                                    {
                                        <tr>
                                            <td>@address.AddressType</td>
                                            <td>@address.Street</td>
                                            <td>@address.City</td>
                                            <td>@address.State</td>
                                            <td>
                                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveAddress(address)">
                                                    <i class="fa fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    
                    <div class="d-flex gap-2 mt-4">
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                        <a href="/guardians" class="btn btn-secondary">Cancel</a>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>


@code {
    [Parameter]
    public int Id { get; set; }

    private Guardian guardian;
    private string phoneNumber = "";
    private List<Address> addresses = new List<Address>();
    private Address newAddress = new Address();
    private bool showAddressForm = false;
    private string profilePictureUrl = "";
    private IBrowserFile profilePictureFile;

    protected override async Task OnInitializedAsync()
    {
        //guardian = await GuardianService.GetGuardianByIdAsync(Id);
        guardian = SchoolDataService.GetGuardianById(Id);
        
        if (guardian == null)
        {
            NavigationManager.NavigateTo("/guardians");
            return;
        }
        
        if (guardian.Person.Addresses != null)
        {
            addresses = guardian.Person.Addresses.Select(a => new Address
            {
                Id = a.Id,
                Street = a.Street,
                City = a.City,
                State = a.State,
                PostalCode = a.PostalCode,
                Country = a.Country,
                AddressType = a.AddressType
            }).ToList();
        }
        
        if (guardian.Person.PhoneNumber != null && guardian.Person.PhoneNumber.Any())
        {
            phoneNumber = guardian.Person.PhoneNumber;
        }
    }

    private void ShowAddressForm()
    {
        showAddressForm = true;
        newAddress = new Address();
    }

    private void CancelAddAddress()
    {
        showAddressForm = false;
    }

    private void AddAddress()
    {
        addresses.Add(new Address
        {
            Street = newAddress.Street,
            City = newAddress.City,
            State = newAddress.State,
            PostalCode = newAddress.PostalCode,
            Country = newAddress.Country,
            AddressType = newAddress.AddressType
        });
        
        showAddressForm = false;
    }

    private void RemoveAddress(Address address)
    {
        addresses.Remove(address);
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        profilePictureFile = e.File;
        
        var buffer = new byte[profilePictureFile.Size];
        await profilePictureFile.OpenReadStream().ReadAsync(buffer);
        var imageType = profilePictureFile.ContentType;
        profilePictureUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task HandleSubmit()
    {
        if (!string.IsNullOrEmpty(phoneNumber))
        {
            guardian.Person.PhoneNumber = phoneNumber;
        }
        
        guardian.Person.Addresses = addresses;
        
        if (profilePictureFile != null)
        {
            guardian.Person.ProfilePictureUrl = profilePictureUrl;
        }
        SchoolDataService.UpdateGuardian(guardian);
        //await GuardianService.UpdateGuardianAsync(guardian);
        NavigationManager.NavigateTo("/guardians");
    }
}