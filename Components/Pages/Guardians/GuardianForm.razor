@using Microsoft.AspNetCore.Components.Forms
@using FcmsPortalUI.Components.Pages.Shared
@using FcmsPortalUI.Services
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Services
@inject ISchoolDataService SchoolDataService
@inject ValidationService ValidationService
@rendermode InteractiveServer

<EditForm EditContext="@editContext" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-12 mb-4 text-center">
                    <ProfileThumbnailForm ImageUrl="@profilePictureUrl"
                                          ImageUrlChanged="HandleProfilePictureChanged"
                                          Category="GuardianProfilePictures" />
                </div>
            </div>

            <h4 class="mb-3">Personal Information</h4>
            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="firstName" class="form-label">First Name<span class="text-danger">*</span></label>
                    <InputText id="firstName" class="form-control" @bind-Value="Guardian.Person.FirstName" />
                    <ValidationMessage For="@(() => Guardian.Person.FirstName)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="middleName" class="form-label">Middle Name</label>
                    <InputText id="middleName" class="form-control" @bind-Value="Guardian.Person.MiddleName" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="lastName" class="form-label">Last Name<span class="text-danger">*</span></label>
                    <InputText id="lastName" class="form-control" @bind-Value="Guardian.Person.LastName" />
                    <ValidationMessage For="@(() => Guardian.Person.LastName)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="gender" class="form-label">Gender<span class="text-danger">*</span></label>
                    <InputSelect id="gender" class="form-select" @bind-Value="Guardian.Person.Sex">
                        <option value="">-- Select Gender --</option>
                        @foreach (var gender in Enum.GetValues(typeof(Gender)).Cast<Gender>().Where(g => g != Gender.None))
                        {
                            <option value="@gender">@gender</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Guardian.Person.Sex)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="stateOfOrigin" class="form-label">State of Origin<span class="text-danger">*</span></label>
                    <InputText id="stateOfOrigin" class="form-control" @bind-Value="Guardian.Person.StateOfOrigin" />
                    <ValidationMessage For="@(() => Guardian.Person.StateOfOrigin)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="lgaOfOrigin" class="form-label">LGA of Origin<span class="text-danger">*</span></label>
                    <InputText id="lgaOfOrigin" class="form-control" @bind-Value="Guardian.Person.LgaOfOrigin" />
                    <ValidationMessage For="@(() => Guardian.Person.LgaOfOrigin)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="email" class="form-label">Email<span class="text-danger">*</span></label>
                    <InputText id="email" class="form-control" @bind-Value="Guardian.Person.Email" />
                    <ValidationMessage For="@(() => Guardian.Person.Email)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="phoneNumber" class="form-label">Phone Number<span class="text-danger">*</span></label>
                    <InputText id="phoneNumber" class="form-control" @bind-Value="Guardian.Person.PhoneNumber" />
                    <ValidationMessage For="@(() => Guardian.Person.PhoneNumber)" />
                </div>
            </div>

            <h4 class="mb-3">Guardian Details</h4>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="relationship" class="form-label">Relationship to Student<span class="text-danger">*</span></label>
                    <InputSelect id="relationship" class="form-select" @bind-Value="Guardian.RelationshipToStudent">
                        <option value="">-- Select Relationship --</option>
                        @foreach (var relationship in Enum.GetValues(typeof(Relationship)).Cast<Relationship>().Where(r => r != Relationship.None))
                        {
                            <option value="@relationship">@relationship</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Guardian.RelationshipToStudent)" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="occupation" class="form-label">Occupation<span class="text-danger">*</span></label>
                    <InputText id="occupation" class="form-control" @bind-Value="Guardian.Occupation" />
                    <ValidationMessage For="@(() => Guardian.Occupation)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="dateOfEnrollment" class="form-label">Date of Enrollment<span class="text-danger">*</span></label>
                    <InputDate id="dateOfEnrollment" class="form-control" @bind-Value="enrollmentDate" />
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-check form-switch mt-4">
                        <InputCheckbox id="isActive" class="form-check-input" @bind-Value="Guardian.Person.IsActive" />
                        <label class="form-check-label" for="isActive">Status</label>
                    </div>
                </div>
            </div>

            <h4 class="mb-3">Address Information<span class="text-danger">*</span></h4>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="street" class="form-label">Street<span class="text-danger">*</span></label>
                    <InputText id="street" class="form-control" @bind-Value="Guardian.Person.Address.Street" />
                    <ValidationMessage For="@(() => Guardian.Person.Address.Street)" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="city" class="form-label">City<span class="text-danger">*</span></label>
                    <InputText id="city" class="form-control" @bind-Value="Guardian.Person.Address.City" />
                    <ValidationMessage For="@(() => Guardian.Person.Address.City)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="state" class="form-label">State<span class="text-danger">*</span></label>
                    <InputText id="state" class="form-control" @bind-Value="Guardian.Person.Address.State" />
                    <ValidationMessage For="@(() => Guardian.Person.Address.State)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="postalCode" class="form-label">Postal Code</label>
                    <InputText id="postalCode" class="form-control" @bind-Value="Guardian.Person.Address.PostalCode"
                               placeholder="This could also be postal address, e.g., P.O. Box 250" />
                    <ValidationMessage For="@(() => Guardian.Person.Address.PostalCode)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="country" class="form-label">Country<span class="text-danger">*</span></label>
                    <InputText id="country" class="form-control" @bind-Value="Guardian.Person.Address.Country" />
                    <ValidationMessage For="@(() => Guardian.Person.Address.Country)" />
                </div>
            </div>

            <div class="d-flex gap-2 mt-4">
                <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public Guardian Guardian { get; set; } = new()
    {
       Person = new Person()
       {
           IsActive = true,
           Address = new Address()
       },
       Wards = new List<Student>()
    };

    [Parameter]
    public string SubmitButtonText { get; set; } = "Save";

    [Parameter, EditorRequired]
    public EventCallback<Guardian> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnCancel { get; set; }

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private string oldProfilePictureUrl = "";
    private string profilePictureUrl = "";
    private DateTime enrollmentDate;

    protected override void OnInitialized()
    {
        if (Guardian.Person.DateOfEnrollment != default)
        {
            enrollmentDate = Guardian.Person.DateOfEnrollment;
        }
        else
        {
            enrollmentDate = DateTime.Today;
        }

        if (Guardian.Person.Address == null)
            Guardian.Person.Address = new Address();

        profilePictureUrl = Guardian.Person.ProfilePictureUrl ?? "";
        oldProfilePictureUrl = profilePictureUrl;

        editContext = new EditContext(Guardian);
        messageStore = new ValidationMessageStore(editContext);
    }

    private async Task HandleProfilePictureChanged(string newImageUrl)
    {
        if (!string.IsNullOrEmpty(oldProfilePictureUrl) &&
            !oldProfilePictureUrl.StartsWith("data:") &&
            oldProfilePictureUrl != newImageUrl)
        {
            try
            {
                var oldAttachment = new FileAttachment
                {
                    FilePath = oldProfilePictureUrl
                };
                await SchoolDataService.DeleteFileAsync(oldAttachment);
            }
            catch
            {
                // Log error but don't stop the process
            }
        }

        profilePictureUrl = newImageUrl;
        oldProfilePictureUrl = newImageUrl;
        StateHasChanged();
    }

    private async Task HandleSubmit(EditContext context)
    {
        if (!ValidationService.ValidateGuardian(context, Guardian, messageStore!))
        {
            return;
        }

        Guardian.Person.ProfilePictureUrl = profilePictureUrl;
        Guardian.Person.DateOfEnrollment = enrollmentDate;

        await OnSubmit.InvokeAsync(Guardian);
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
}