@using Microsoft.AspNetCore.Components.Forms
@using FcmsPortalUI.Components.Pages.Shared
@using FcmsPortal.Models
@using FcmsPortal.Enums
@using FcmsPortal.Services
@inject ISchoolDataService SchoolDataService
@rendermode InteractiveServer

<EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <ObjectGraphDataAnnotationsValidator />

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-12 mb-4 text-center">
                    <ProfileThumbnailForm ImageUrl="@profilePictureUrl"
                                          ImageUrlChanged="HandleProfilePictureChanged"
                                          Category="GuardianProfilePictures" />
                </div>
            </div>

            <h4 class="mb-3">Personal Information</h4>
            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="firstName" class="form-label">First Name<span class="text-danger">*</span></label>
                    <InputText id="firstName" class="form-control" @bind-Value="Guardian.Person.FirstName" />
                    <ValidationMessage For="@(() => Guardian.Person.FirstName)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="middleName" class="form-label">Middle Name</label>
                    <InputText id="middleName" class="form-control" @bind-Value="Guardian.Person.MiddleName" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="lastName" class="form-label">Last Name<span class="text-danger">*</span></label>
                    <InputText id="lastName" class="form-control" @bind-Value="Guardian.Person.LastName" />
                    <ValidationMessage For="@(() => Guardian.Person.LastName)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="gender" class="form-label">Gender</label>
                    <InputSelect id="gender" class="form-select" @bind-Value="Guardian.Person.Sex">
                        <option value="">-- Select Gender --</option>
                        @foreach (var gender in Enum.GetValues(typeof(Gender)))
                        {
                            <option value="@gender">@gender</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-4 mb-3">
                    <label for="stateOfOrigin" class="form-label">State of Origin<span class="text-danger">*</span></label>
                    <InputText id="stateOfOrigin" class="form-control" @bind-Value="Guardian.Person.StateOfOrigin" />
                    <ValidationMessage For="@(() => Guardian.Person.StateOfOrigin)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="lgaOfOrigin" class="form-label">LGA of Origin<span class="text-danger">*</span></label>
                    <InputText id="lgaOfOrigin" class="form-control" @bind-Value="Guardian.Person.LgaOfOrigin" />
                    <ValidationMessage For="@(() => Guardian.Person.LgaOfOrigin)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="email" class="form-label">Email<span class="text-danger">*</span></label>
                    <InputText id="email" class="form-control" @bind-Value="Guardian.Person.Email" />
                    <ValidationMessage For="@(() => Guardian.Person.Email)" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="phoneNumber" class="form-label">Phone Number<span class="text-danger">*</span></label>
                    <InputText id="phoneNumber" class="form-control" @bind-Value="Guardian.Person.PhoneNumber" />
                    <ValidationMessage For="@(() => Guardian.Person.PhoneNumber)" />
                </div>
            </div>

            <h4 class="mb-3">Guardian Details</h4>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="relationship" class="form-label">Relationship to Student</label>
                    <InputSelect id="relationship" class="form-select" @bind-Value="Guardian.RelationshipToStudent">
                        <option value="">-- Select Relationship --</option>
                        @foreach (var relationship in Enum.GetValues(typeof(Relationship)))
                        {
                            <option value="@relationship">@relationship</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="occupation" class="form-label">Occupation<span class="text-danger">*</span></label>
                    <InputText id="occupation" class="form-control" @bind-Value="Guardian.Occupation" />
                    <ValidationMessage For="@(() => Guardian.Occupation)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="dateOfEnrollment" class="form-label">Date of Enrollment</label>
                    <InputDate id="dateOfEnrollment" class="form-control" @bind-Value="enrollmentDate" />
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-check form-switch mt-4">
                        <InputCheckbox id="isActive" class="form-check-input" @bind-Value="Guardian.Person.IsActive" />
                        <label class="form-check-label" for="isActive">Status</label>
                    </div>
                </div>
            </div>

            <h4 class="mb-3">Address Information<span class="text-danger">*</span></h4>
            @if (showAddressForm)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Add New Address</h5>
                        <AddressForm Address="@currentAddress"
                                     OnValidSubmit="SaveAddress"
                                     OnCancel="CancelAddressEdit"
                                     ButtonText="Save Address" />
                    </div>
                </div>
            }
            else
            {
                <button type="button" class="btn btn-outline-primary mb-3" @onclick="ShowAddressForm">
                    <i class="fa fa-plus"></i> Add Address
                </button>
            }

            @if (Guardian.Person.Addresses.Any())
            {
                <div class="table-responsive mb-3">
                    <table class="table table-sm table-bordered">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Street</th>
                                <th>City</th>
                                <th>State</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var address in Guardian.Person.Addresses)
                            {
                                <tr>
                                    <td>@address.AddressType</td>
                                    <td>@address.Street</td>
                                    <td>@address.City</td>
                                    <td>@address.State</td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveAddress(address)">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            <div class="d-flex gap-2 mt-4">
                <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public Guardian Guardian { get; set; } = new()
    {
       Person = new Person()
       {
           IsActive = true,
           Addresses = new List<Address>()
       },
       Wards = new List<Student>()
    };

    [Parameter]
    public string SubmitButtonText { get; set; } = "Save";

    [Parameter, EditorRequired]
    public EventCallback<Guardian> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnCancel { get; set; }

    private EditContext? editContext;
    private string oldProfilePictureUrl = "";
    private string profilePictureUrl = "";
    private DateTime enrollmentDate;
    private bool showAddressForm = false;
    private Address currentAddress = new();

    protected override void OnInitialized()
    {
        if (Guardian.Person.DateOfEnrollment != default)
        {
            enrollmentDate = Guardian.Person.DateOfEnrollment;
        }
        else
        {
            enrollmentDate = DateTime.Today;
        }

        if (Guardian.Person.Addresses == null)
            Guardian.Person.Addresses = new List<Address>();

        profilePictureUrl = Guardian.Person.ProfilePictureUrl ?? "";
        oldProfilePictureUrl = profilePictureUrl;
        editContext = new EditContext(Guardian);
    }

    private async Task HandleProfilePictureChanged(string newImageUrl)
    {
        if (!string.IsNullOrEmpty(oldProfilePictureUrl) &&
            !oldProfilePictureUrl.StartsWith("data:") &&
            oldProfilePictureUrl != newImageUrl)
        {
            try
            {
                var oldAttachment = new FileAttachment
                {
                    FilePath = oldProfilePictureUrl
                };
                await SchoolDataService.DeleteFileAsync(oldAttachment);
            }
            catch
            {
                // Log error but don't stop the process
            }
        }

        profilePictureUrl = newImageUrl;
        oldProfilePictureUrl = newImageUrl;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        Guardian.Person.ProfilePictureUrl = profilePictureUrl;
        Guardian.Person.DateOfEnrollment = enrollmentDate;
        await OnSubmit.InvokeAsync(Guardian);
    }

    private Task HandleInvalidSubmit()
    {
        Console.WriteLine("Form is invalid — including nested properties.");
        return Task.CompletedTask;
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    private void ShowAddressForm()
    {
        currentAddress = new Address();
        showAddressForm = true;
    }

    private void SaveAddress(Address address)
    {
        var savedAddress = SchoolDataService.AddAddress(address);
        Guardian.Person.Addresses.Add(savedAddress);
        showAddressForm = false;
        currentAddress = new Address();
    }

    private void CancelAddressEdit()
    {
        showAddressForm = false;
        currentAddress = new Address();
    }

    private void RemoveAddress(Address address)
    {
        Guardian.Person.Addresses.Remove(address);
    }
}