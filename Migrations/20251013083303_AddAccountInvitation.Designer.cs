// <auto-generated />
using System;
using FcmsPortalUI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FcmsPortalUI.Migrations
{
    [DbContext(typeof(FcmsPortalUIContext))]
    [Migration("20251013083303_AddAccountInvitation")]
    partial class AddAccountInvitation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DailyAttendanceLogEntryStudent", b =>
                {
                    b.Property<int>("DailyAttendanceLogEntryId")
                        .HasColumnType("int");

                    b.Property<int>("PresentStudentsId")
                        .HasColumnType("int");

                    b.HasKey("DailyAttendanceLogEntryId", "PresentStudentsId");

                    b.HasIndex("PresentStudentsId");

                    b.ToTable("DailyAttendancePresentStudents", (string)null);
                });

            modelBuilder.Entity("DailyAttendanceLogEntryStudent1", b =>
                {
                    b.Property<int>("AbsentStudentsId")
                        .HasColumnType("int");

                    b.Property<int>("DailyAttendanceLogEntry1Id")
                        .HasColumnType("int");

                    b.HasKey("AbsentStudentsId", "DailyAttendanceLogEntry1Id");

                    b.HasIndex("DailyAttendanceLogEntry1Id");

                    b.ToTable("DailyAttendanceAbsentStudents", (string)null);
                });

            modelBuilder.Entity("FcmsPortal.Models.AccountInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SentByAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AccountInvitations");
                });

            modelBuilder.Entity("FcmsPortal.Models.ArchivedPaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<int>("ArchivedStudentPaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ArchivedStudentPaymentId");

                    b.ToTable("ArchivedPaymentDetails");
                });

            modelBuilder.Entity("FcmsPortal.Models.ArchivedStudentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ArchivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ClassLevel")
                        .HasColumnType("int");

                    b.Property<int>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<int>("LearningPathId")
                        .HasColumnType("int");

                    b.Property<string>("LearningPathName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("OutstandingBalance")
                        .HasColumnType("double");

                    b.Property<double>("PaymentCompletionRate")
                        .HasColumnType("double");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("TimelyCompletionRate")
                        .HasColumnType("double");

                    b.Property<double>("TotalFees")
                        .HasColumnType("double");

                    b.Property<double>("TotalPaid")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("ArchivedStudentPayments");
                });

            modelBuilder.Entity("FcmsPortal.Models.AttendanceArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ArchivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ClassLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LearningPathId")
                        .HasColumnType("int");

                    b.Property<string>("LearningPathName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AttendanceArchives");
                });

            modelBuilder.Entity("FcmsPortal.Models.CalendarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("CalendarModel");
                });

            modelBuilder.Entity("FcmsPortal.Models.ClassSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LessonPlan")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherRemarks")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassSessions");
                });

            modelBuilder.Entity("FcmsPortal.Models.CourseGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FinalGradeCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("GradingConfigurationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LearningPathId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<double>("TotalGrade")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("GradingConfigurationId");

                    b.HasIndex("LearningPathId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseGrades");
                });

            modelBuilder.Entity("FcmsPortal.Models.CourseGradingConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("FinalExamWeightPercentage")
                        .HasColumnType("double");

                    b.Property<double>("HomeworkWeightPercentage")
                        .HasColumnType("double");

                    b.Property<int>("LearningPathId")
                        .HasColumnType("int");

                    b.Property<double>("QuizWeightPercentage")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("LearningPathId");

                    b.ToTable("CourseGradingConfiguration");
                });

            modelBuilder.Entity("FcmsPortal.Models.DailyAttendanceLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LearningPathId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LearningPathId");

                    b.HasIndex("TeacherId");

                    b.ToTable("DailyAttendanceLogEntries");
                });

            modelBuilder.Entity("FcmsPortal.Models.DiscussionThread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClassSessionId");

                    b.ToTable("DiscussionThreads");
                });

            modelBuilder.Entity("FcmsPortal.Models.FileAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassSessionId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClassSessionId");

                    b.ToTable("FileAttachments");
                });

            modelBuilder.Entity("FcmsPortal.Models.FirstPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiscussionThreadId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionThreadId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("FirstPosts");
                });

            modelBuilder.Entity("FcmsPortal.Models.Guardian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RelationshipToStudent")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("FcmsPortal.Models.Homework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ClassSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClassSessionId")
                        .IsUnique();

                    b.ToTable("Homework");
                });

            modelBuilder.Entity("FcmsPortal.Models.HomeworkSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("FeedbackComment")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("HomeworkGradeId")
                        .HasColumnType("int");

                    b.Property<int>("HomeworkId")
                        .HasColumnType("int");

                    b.Property<bool>("IsGraded")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkGradeId");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("StudentId");

                    b.ToTable("HomeworkSubmission");
                });

            modelBuilder.Entity("FcmsPortal.Models.LearningPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcademicYearStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int>("ClassLevel")
                        .HasColumnType("int");

                    b.Property<int>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExamsStartDate")
                        .HasColumnType("date");

                    b.Property<double>("FeePerSemester")
                        .HasColumnType("double");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<DateTime>("SemesterEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SemesterStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TemplateKey")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("LearningPaths");
                });

            modelBuilder.Entity("FcmsPortal.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcademicYearStart")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LearningPathId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("Reference")
                        .HasColumnType("int");

                    b.Property<int>("SchoolFeesId")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolFeesId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FcmsPortal.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("ClassLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfEnrollment")
                        .HasColumnType("date");

                    b.Property<int>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LgaOfOrigin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("StateOfOrigin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FcmsPortal.Models.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiscussionThreadId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionThreadId");

                    b.HasIndex("PersonId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("FcmsPortal.Models.ScheduleEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalendarModelId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Event")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LearningPathId")
                        .HasColumnType("int");

                    b.Property<string>("Meeting")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RecurrenceInterval")
                        .HasColumnType("int");

                    b.Property<int?>("RecurrencePattern")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarModelId");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("LearningPathId");

                    b.ToTable("ScheduleEntries");
                });

            modelBuilder.Entity("FcmsPortal.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("School");
                });

            modelBuilder.Entity("FcmsPortal.Models.SchoolFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("SchoolFees");
                });

            modelBuilder.Entity("FcmsPortal.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOfSpecialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateOfEmployment")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<string>("WorkExperience")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("FcmsPortal.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GuardianId")
                        .HasColumnType("int");

                    b.Property<string>("LastSchoolAttended")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("LearningPathId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PositionAmongSiblings")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuardianId");

                    b.HasIndex("LearningPathId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("FcmsPortal.Models.StudentReportCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AttendanceRate")
                        .HasColumnType("double");

                    b.Property<DateTime?>("DateFinalized")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateGenerated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FinalizedByPrincipalId")
                        .HasColumnType("int");

                    b.Property<int?>("GeneratedByTeacherId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPromoted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LearningPathId")
                        .HasColumnType("int");

                    b.Property<int>("PresentDays")
                        .HasColumnType("int");

                    b.Property<string>("PrincipalRemarks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("PromotionGrade")
                        .HasColumnType("double");

                    b.Property<string>("PromotionStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("SemesterOverallGrade")
                        .HasColumnType("double");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentRank")
                        .HasColumnType("int");

                    b.Property<string>("TeacherRemarks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinalizedByPrincipalId");

                    b.HasIndex("GeneratedByTeacherId");

                    b.HasIndex("LearningPathId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentReportCards");
                });

            modelBuilder.Entity("FcmsPortal.Models.TestGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseGradeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GradeType")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("double");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherRemark")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CourseGradeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TestGrades");
                });

            modelBuilder.Entity("LearningPathStudentsWithAccess", b =>
                {
                    b.Property<int>("StudentsWithAccessId")
                        .HasColumnType("int");

                    b.Property<int>("LearningPathId")
                        .HasColumnType("int");

                    b.HasKey("StudentsWithAccessId", "LearningPathId");

                    b.HasIndex("LearningPathId");

                    b.ToTable("LearningPathStudentsWithAccess", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DailyAttendanceLogEntryStudent", b =>
                {
                    b.HasOne("FcmsPortal.Models.DailyAttendanceLogEntry", null)
                        .WithMany()
                        .HasForeignKey("DailyAttendanceLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("PresentStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyAttendanceLogEntryStudent1", b =>
                {
                    b.HasOne("FcmsPortal.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("AbsentStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.DailyAttendanceLogEntry", null)
                        .WithMany()
                        .HasForeignKey("DailyAttendanceLogEntry1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FcmsPortal.Models.ArchivedPaymentDetail", b =>
                {
                    b.HasOne("FcmsPortal.Models.ArchivedStudentPayment", "ArchivedStudentPayment")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("ArchivedStudentPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArchivedStudentPayment");
                });

            modelBuilder.Entity("FcmsPortal.Models.CalendarModel", b =>
                {
                    b.HasOne("FcmsPortal.Models.School", "School")
                        .WithMany("SchoolCalendar")
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("FcmsPortal.Models.ClassSession", b =>
                {
                    b.HasOne("FcmsPortal.Models.Staff", "Teacher")
                        .WithMany("ClassSessions")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FcmsPortal.Models.CourseGrade", b =>
                {
                    b.HasOne("FcmsPortal.Models.CourseGradingConfiguration", "GradingConfiguration")
                        .WithMany()
                        .HasForeignKey("GradingConfigurationId");

                    b.HasOne("FcmsPortal.Models.LearningPath", "LearningPath")
                        .WithMany()
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.Student", "Student")
                        .WithMany("CourseGrades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradingConfiguration");

                    b.Navigation("LearningPath");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FcmsPortal.Models.CourseGradingConfiguration", b =>
                {
                    b.HasOne("FcmsPortal.Models.LearningPath", "LearningPath")
                        .WithMany("CourseGradingConfigurations")
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningPath");
                });

            modelBuilder.Entity("FcmsPortal.Models.DailyAttendanceLogEntry", b =>
                {
                    b.HasOne("FcmsPortal.Models.LearningPath", "LearningPath")
                        .WithMany("AttendanceLog")
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.Staff", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearningPath");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FcmsPortal.Models.DiscussionThread", b =>
                {
                    b.HasOne("FcmsPortal.Models.ClassSession", "ClassSession")
                        .WithMany("DiscussionThreads")
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSession");
                });

            modelBuilder.Entity("FcmsPortal.Models.FileAttachment", b =>
                {
                    b.HasOne("FcmsPortal.Models.ClassSession", null)
                        .WithMany("StudyMaterials")
                        .HasForeignKey("ClassSessionId");
                });

            modelBuilder.Entity("FcmsPortal.Models.FirstPost", b =>
                {
                    b.HasOne("FcmsPortal.Models.DiscussionThread", "DiscussionThread")
                        .WithOne("FirstPost")
                        .HasForeignKey("FcmsPortal.Models.FirstPost", "DiscussionThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.Person", "Author")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("DiscussionThread");
                });

            modelBuilder.Entity("FcmsPortal.Models.Guardian", b =>
                {
                    b.HasOne("FcmsPortal.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.School", "School")
                        .WithMany("Guardians")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("School");
                });

            modelBuilder.Entity("FcmsPortal.Models.Homework", b =>
                {
                    b.HasOne("FcmsPortal.Models.ClassSession", "ClassSession")
                        .WithOne("HomeworkDetails")
                        .HasForeignKey("FcmsPortal.Models.Homework", "ClassSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSession");
                });

            modelBuilder.Entity("FcmsPortal.Models.HomeworkSubmission", b =>
                {
                    b.HasOne("FcmsPortal.Models.TestGrade", "HomeworkGrade")
                        .WithMany()
                        .HasForeignKey("HomeworkGradeId");

                    b.HasOne("FcmsPortal.Models.Homework", "Homework")
                        .WithMany("Submissions")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homework");

                    b.Navigation("HomeworkGrade");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FcmsPortal.Models.LearningPath", b =>
                {
                    b.HasOne("FcmsPortal.Models.School", "School")
                        .WithMany("LearningPaths")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("FcmsPortal.Models.Payment", b =>
                {
                    b.HasOne("FcmsPortal.Models.SchoolFees", "SchoolFees")
                        .WithMany("Payments")
                        .HasForeignKey("SchoolFeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolFees");
                });

            modelBuilder.Entity("FcmsPortal.Models.Person", b =>
                {
                    b.OwnsOne("FcmsPortal.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("PersonId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("FcmsPortal.Models.Reply", b =>
                {
                    b.HasOne("FcmsPortal.Models.DiscussionThread", "DiscussionThread")
                        .WithMany("Replies")
                        .HasForeignKey("DiscussionThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.Person", "Author")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("DiscussionThread");
                });

            modelBuilder.Entity("FcmsPortal.Models.ScheduleEntry", b =>
                {
                    b.HasOne("FcmsPortal.Models.CalendarModel", null)
                        .WithMany("ScheduleEntries")
                        .HasForeignKey("CalendarModelId");

                    b.HasOne("FcmsPortal.Models.ClassSession", "ClassSession")
                        .WithMany()
                        .HasForeignKey("ClassSessionId");

                    b.HasOne("FcmsPortal.Models.LearningPath", "LearningPath")
                        .WithMany("Schedule")
                        .HasForeignKey("LearningPathId");

                    b.Navigation("ClassSession");

                    b.Navigation("LearningPath");
                });

            modelBuilder.Entity("FcmsPortal.Models.School", b =>
                {
                    b.OwnsOne("FcmsPortal.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("SchoolId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("SchoolId");

                            b1.ToTable("School");

                            b1.WithOwner()
                                .HasForeignKey("SchoolId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("FcmsPortal.Models.SchoolFees", b =>
                {
                    b.HasOne("FcmsPortal.Models.Person", "Person")
                        .WithOne("SchoolFees")
                        .HasForeignKey("FcmsPortal.Models.SchoolFees", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FcmsPortal.Models.Staff", b =>
                {
                    b.HasOne("FcmsPortal.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.School", "School")
                        .WithMany("Staff")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("School");
                });

            modelBuilder.Entity("FcmsPortal.Models.Student", b =>
                {
                    b.HasOne("FcmsPortal.Models.Guardian", "Guardian")
                        .WithMany("Wards")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.LearningPath", "LearningPath")
                        .WithMany("Students")
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FcmsPortal.Models.Person", "Person")
                        .WithOne()
                        .HasForeignKey("FcmsPortal.Models.Student", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId");

                    b.Navigation("Guardian");

                    b.Navigation("LearningPath");

                    b.Navigation("Person");

                    b.Navigation("School");
                });

            modelBuilder.Entity("FcmsPortal.Models.StudentReportCard", b =>
                {
                    b.HasOne("FcmsPortal.Models.Staff", "FinalizedByPrincipal")
                        .WithMany()
                        .HasForeignKey("FinalizedByPrincipalId");

                    b.HasOne("FcmsPortal.Models.Staff", "GeneratedByTeacher")
                        .WithMany()
                        .HasForeignKey("GeneratedByTeacherId");

                    b.HasOne("FcmsPortal.Models.LearningPath", "LearningPath")
                        .WithMany("ReportCards")
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.Student", "Student")
                        .WithMany("ReportCards")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinalizedByPrincipal");

                    b.Navigation("GeneratedByTeacher");

                    b.Navigation("LearningPath");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FcmsPortal.Models.TestGrade", b =>
                {
                    b.HasOne("FcmsPortal.Models.CourseGrade", "CourseGrade")
                        .WithMany("TestGrades")
                        .HasForeignKey("CourseGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.Staff", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("CourseGrade");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LearningPathStudentsWithAccess", b =>
                {
                    b.HasOne("FcmsPortal.Models.LearningPath", null)
                        .WithMany()
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsWithAccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FcmsPortal.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FcmsPortal.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FcmsPortal.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FcmsPortal.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FcmsPortal.Models.ArchivedStudentPayment", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("FcmsPortal.Models.CalendarModel", b =>
                {
                    b.Navigation("ScheduleEntries");
                });

            modelBuilder.Entity("FcmsPortal.Models.ClassSession", b =>
                {
                    b.Navigation("DiscussionThreads");

                    b.Navigation("HomeworkDetails");

                    b.Navigation("StudyMaterials");
                });

            modelBuilder.Entity("FcmsPortal.Models.CourseGrade", b =>
                {
                    b.Navigation("TestGrades");
                });

            modelBuilder.Entity("FcmsPortal.Models.DiscussionThread", b =>
                {
                    b.Navigation("FirstPost")
                        .IsRequired();

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("FcmsPortal.Models.Guardian", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("FcmsPortal.Models.Homework", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("FcmsPortal.Models.LearningPath", b =>
                {
                    b.Navigation("AttendanceLog");

                    b.Navigation("CourseGradingConfigurations");

                    b.Navigation("ReportCards");

                    b.Navigation("Schedule");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("FcmsPortal.Models.Person", b =>
                {
                    b.Navigation("SchoolFees");
                });

            modelBuilder.Entity("FcmsPortal.Models.School", b =>
                {
                    b.Navigation("Guardians");

                    b.Navigation("LearningPaths");

                    b.Navigation("SchoolCalendar");

                    b.Navigation("Staff");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("FcmsPortal.Models.SchoolFees", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FcmsPortal.Models.Staff", b =>
                {
                    b.Navigation("ClassSessions");
                });

            modelBuilder.Entity("FcmsPortal.Models.Student", b =>
                {
                    b.Navigation("CourseGrades");

                    b.Navigation("ReportCards");
                });
#pragma warning restore 612, 618
        }
    }
}
